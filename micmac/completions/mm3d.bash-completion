_mm3d() {
    local i cur prev opts cmds
    COMPREPLY=()
    cur="${COMP_WORDS[COMP_CWORD]}"
    prev="${COMP_WORDS[COMP_CWORD-1]}"
    cmd=""
    opts=""

    for i in ${COMP_WORDS[@]}
    do
        case "${i}" in
            mm3d)
                cmd="mm3d"
                ;;

            AllDev)
                cmd+="__AllDev"
                ;;
            Ann)
                cmd+="__Ann"
                ;;
            AperiCloud)
                cmd+="__AperiCloud"
                ;;
            Apero)
                cmd+="__Apero"
                ;;
            Apero2Meshlab)
                cmd+="__Apero2Meshlab"
                ;;
            Apero2NVM)
                cmd+="__Apero2NVM"
                ;;
            Apero2PMVS)
                cmd+="__Apero2PMVS"
                ;;
            AperoChImSecMM)
                cmd+="__AperoChImSecMM"
                ;;
            Arsenic)
                cmd+="__Arsenic"
                ;;
            Aspro)
                cmd+="__Aspro"
                ;;
            BAR)
                cmd+="__BAR"
                ;;
            Bascule)
                cmd+="__Bascule"
                ;;
            BatchFDC)
                cmd+="__BatchFDC"
                ;;
            Blinis)
                cmd+="__Blinis"
                ;;
            C3DC)
                cmd+="__C3DC"
                ;;
            CASA)
                cmd+="__CASA"
                ;;
            CalibFinale)
                cmd+="__CalibFinale"
                ;;
            CalibInit)
                cmd+="__CalibInit"
                ;;
            Campari)
                cmd+="__Campari"
                ;;
            CatImSaisie)
                cmd+="__CatImSaisie"
                ;;
            CenterBascule)
                cmd+="__CenterBascule"
                ;;
            ChantierClip)
                cmd+="__ChantierClip"
                ;;
            CheckDependencies)
                cmd+="__CheckDependencies"
                ;;
            ChgSysCo)
                cmd+="__ChgSysCo"
                ;;
            CleanPatByOri)
                cmd+="__CleanPatByOri"
                ;;
            ClipIm)
                cmd+="__ClipIm"
                ;;
            CmpCalib)
                cmd+="__CmpCalib"
                ;;
            CmpIm)
                cmd+="__CmpIm"
                ;;
            CmpOri)
                cmd+="__CmpOri"
                ;;
            CoherEpip)
                cmd+="__CoherEpip"
                ;;
            Compens)
                cmd+="__Compens"
                ;;
            ContrastFilter)
                cmd+="__ContrastFilter"
                ;;
            Convert2GenBundle)
                cmd+="__Convert2GenBundle"
                ;;
            ConvertCalib)
                cmd+="__ConvertCalib"
                ;;
            ConvertIm)
                cmd+="__ConvertIm"
                ;;
            ConvertPolygone)
                cmd+="__ConvertPolygone"
                ;;
            CreateEpip)
                cmd+="__CreateEpip"
                ;;
            DIV)
                cmd+="__DIV"
                ;;
            Dequant)
                cmd+="__Dequant"
                ;;
            Devlop)
                cmd+="__Devlop"
                ;;
            Digeo)
                cmd+="__Digeo"
                ;;
            Donuts)
                cmd+="__Donuts"
                ;;
            Drunk)
                cmd+="__Drunk"
                ;;
            ElDcraw)
                cmd+="__ElDcraw"
                ;;
            ExtractAppui3D)
                cmd+="__ExtractAppui3D"
                ;;
            ExtractMesure2D)
                cmd+="__ExtractMesure2D"
                ;;
            FFTKugelhupf)
                cmd+="__FFTKugelhupf"
                ;;
            FieldDep3d)
                cmd+="__FieldDep3d"
                ;;
            FusionDepl)
                cmd+="__FusionDepl"
                ;;
            GCPBascule)
                cmd+="__GCPBascule"
                ;;
            GCPConvert)
                cmd+="__GCPConvert"
                ;;
            GCPCtrl)
                cmd+="__GCPCtrl"
                ;;
            GCPVisib)
                cmd+="__GCPVisib"
                ;;
            GenCode)
                cmd+="__GenCode"
                ;;
            GenPairsFile)
                cmd+="__GenPairsFile"
                ;;
            GenXML2Cpp)
                cmd+="__GenXML2Cpp"
                ;;
            Genepi)
                cmd+="__Genepi"
                ;;
            GenerateBorderCam)
                cmd+="__GenerateBorderCam"
                ;;
            Genere_Header_TiffFile)
                cmd+="__Genere_Header_TiffFile"
                ;;
            GrShade)
                cmd+="__GrShade"
                ;;
            GrapheHom)
                cmd+="__GrapheHom"
                ;;
            Gri2Bin)
                cmd+="__Gri2Bin"
                ;;
            Homol2GND)
                cmd+="__Homol2GND"
                ;;
            HomolFilterMasq)
                cmd+="__HomolFilterMasq"
                ;;
            HomolMergePDVUnik)
                cmd+="__HomolMergePDVUnik"
                ;;
            Im2XYZ)
                cmd+="__Im2XYZ"
                ;;
            ImMire)
                cmd+="__ImMire"
                ;;
            ImRandGray)
                cmd+="__ImRandGray"
                ;;
            Impaint)
                cmd+="__Impaint"
                ;;
            Init11P)
                cmd+="__Init11P"
                ;;
            InitOriLinear)
                cmd+="__InitOriLinear"
                ;;
            Kugelhupf)
                cmd+="__Kugelhupf"
                ;;
            Liquor)
                cmd+="__Liquor"
                ;;
            LumRas)
                cmd+="__LumRas"
                ;;
            MICMAC)
                cmd+="__MICMAC"
                ;;
            MICMACSaisieLiaisons)
                cmd+="__MICMACSaisieLiaisons"
                ;;
            MM1P)
                cmd+="__MM1P"
                ;;
            MM2DPosSism)
                cmd+="__MM2DPosSism"
                ;;
            MMByP)
                cmd+="__MMByP"
                ;;
            MMCalcSzWCor)
                cmd+="__MMCalcSzWCor"
                ;;
            MMHomCorOri)
                cmd+="__MMHomCorOri"
                ;;
            MMInitialModel)
                cmd+="__MMInitialModel"
                ;;
            MMMergeCloud)
                cmd+="__MMMergeCloud"
                ;;
            MMPyram)
                cmd+="__MMPyram"
                ;;
            MMTestAllAuto)
                cmd+="__MMTestAllAuto"
                ;;
            MMTestOrient)
                cmd+="__MMTestOrient"
                ;;
            MMXmlXif)
                cmd+="__MMXmlXif"
                ;;
            MPDtest)
                cmd+="__MPDtest"
                ;;
            MakeGrid)
                cmd+="__MakeGrid"
                ;;
            Malt)
                cmd+="__Malt"
                ;;
            MapCmd)
                cmd+="__MapCmd"
                ;;
            Martini)
                cmd+="__Martini"
                ;;
            MartiniGin)
                cmd+="__MartiniGin"
                ;;
            MasqMaker)
                cmd+="__MasqMaker"
                ;;
            MergeDepthMap)
                cmd+="__MergeDepthMap"
                ;;
            MergeHomol)
                cmd+="__MergeHomol"
                ;;
            MergePly)
                cmd+="__MergePly"
                ;;
            MeshProjOnImg)
                cmd+="__MeshProjOnImg"
                ;;
            Morito)
                cmd+="__Morito"
                ;;
            MpDcraw)
                cmd+="__MpDcraw"
                ;;
            MyRename)
                cmd+="__MyRename"
                ;;
            NewTapas)
                cmd+="__NewTapas"
                ;;
            Nuage2Ply)
                cmd+="__Nuage2Ply"
                ;;
            NuageBascule)
                cmd+="__NuageBascule"
                ;;
            OldTapas)
                cmd+="__OldTapas"
                ;;
            Ori2Xml)
                cmd+="__Ori2Xml"
                ;;
            OriConvert)
                cmd+="__OriConvert"
                ;;
            OriExport)
                cmd+="__OriExport"
                ;;
            OriRedTieP)
                cmd+="__OriRedTieP"
                ;;
            PHO_MI)
                cmd+="__PHO_MI"
                ;;
            PIMs)
                cmd+="__PIMs"
                ;;
            PIMs2Mnt)
                cmd+="__PIMs2Mnt"
                ;;
            PIMs2Ply)
                cmd+="__PIMs2Ply"
                ;;
            PanelIm)
                cmd+="__PanelIm"
                ;;
            PastDevlop)
                cmd+="__PastDevlop"
                ;;
            Pasta)
                cmd+="__Pasta"
                ;;
            Pastis)
                cmd+="__Pastis"
                ;;
            PatFromOri)
                cmd+="__PatFromOri"
                ;;
            PointeInitPolyg)
                cmd+="__PointeInitPolyg"
                ;;
            Porto)
                cmd+="__Porto"
                ;;
            Prep4masq)
                cmd+="__Prep4masq"
                ;;
            Ratafia)
                cmd+="__Ratafia"
                ;;
            ReSampFid)
                cmd+="__ReSampFid"
                ;;
            RechCibleDRad)
                cmd+="__RechCibleDRad"
                ;;
            RechCibleInit)
                cmd+="__RechCibleInit"
                ;;
            RedTieP)
                cmd+="__RedTieP"
                ;;
            Reduc2MM)
                cmd+="__Reduc2MM"
                ;;
            ReducHom)
                cmd+="__ReducHom"
                ;;
            RepLocBascule)
                cmd+="__RepLocBascule"
                ;;
            ReprojImg)
                cmd+="__ReprojImg"
                ;;
            SBGlobBascule)
                cmd+="__SBGlobBascule"
                ;;
            SEL)
                cmd+="__SEL"
                ;;
            SMDM)
                cmd+="__SMDM"
                ;;
            SaisieAppuisInit)
                cmd+="__SaisieAppuisInit"
                ;;
            SaisieAppuisInitQT)
                cmd+="__SaisieAppuisInitQT"
                ;;
            SaisieAppuisPredic)
                cmd+="__SaisieAppuisPredic"
                ;;
            SaisieAppuisPredicQT)
                cmd+="__SaisieAppuisPredicQT"
                ;;
            SaisieBasc)
                cmd+="__SaisieBasc"
                ;;
            SaisieBascQT)
                cmd+="__SaisieBascQT"
                ;;
            SaisieBoxQT)
                cmd+="__SaisieBoxQT"
                ;;
            SaisieCyl)
                cmd+="__SaisieCyl"
                ;;
            SaisieCylQT)
                cmd+="__SaisieCylQT"
                ;;
            SaisieMasq)
                cmd+="__SaisieMasq"
                ;;
            SaisieMasqQT)
                cmd+="__SaisieMasqQT"
                ;;
            SaisiePts)
                cmd+="__SaisiePts"
                ;;
            Sake)
                cmd+="__Sake"
                ;;
            SateLib)
                cmd+="__SateLib"
                ;;
            ScaleIm)
                cmd+="__ScaleIm"
                ;;
            ScaleNuage)
                cmd+="__ScaleNuage"
                ;;
            Schnaps)
                cmd+="__Schnaps"
                ;;
            ScriptCalib)
                cmd+="__ScriptCalib"
                ;;
            SetExif)
                cmd+="__SetExif"
                ;;
            SetGpsExif)
                cmd+="__SetGpsExif"
                ;;
            Sift)
                cmd+="__Sift"
                ;;
            SimplePredict)
                cmd+="__SimplePredict"
                ;;
            SplitMPO)
                cmd+="__SplitMPO"
                ;;
            StackFlatField)
                cmd+="__StackFlatField"
                ;;
            StatIm)
                cmd+="__StatIm"
                ;;
            SupMntIm)
                cmd+="__SupMntIm"
                ;;
            SysCoordPolyn)
                cmd+="__SysCoordPolyn"
                ;;
            Tapas)
                cmd+="__Tapas"
                ;;
            Tapioca)
                cmd+="__Tapioca"
                ;;
            Tarama)
                cmd+="__Tarama"
                ;;
            Tawny)
                cmd+="__Tawny"
                ;;
            Tequila)
                cmd+="__Tequila"
                ;;
            TestBundleInter)
                cmd+="__TestBundleInter"
                ;;
            TestCam)
                cmd+="__TestCam"
                ;;
            TestChantier)
                cmd+="__TestChantier"
                ;;
            TestCmds)
                cmd+="__TestCmds"
                ;;
            TestDistM2C)
                cmd+="__TestDistM2C"
                ;;
            TestKey)
                cmd+="__TestKey"
                ;;
            TestLib)
                cmd+="__TestLib"
                ;;
            TestMTD)
                cmd+="__TestMTD"
                ;;
            TestNameCalib)
                cmd+="__TestNameCalib"
                ;;
            TestPbRPC)
                cmd+="__TestPbRPC"
                ;;
            TestRegEx)
                cmd+="__TestRegEx"
                ;;
            TiPunch)
                cmd+="__TiPunch"
                ;;
            TiePAll)
                cmd+="__TiePAll"
                ;;
            TiePByMesh)
                cmd+="__TiePByMesh"
                ;;
            TiePLine)
                cmd+="__TiePLine"
                ;;
            TiePMS)
                cmd+="__TiePMS"
                ;;
            TifDev)
                cmd+="__TifDev"
                ;;
            TripleSec)
                cmd+="__TripleSec"
                ;;
            Undist)
                cmd+="__Undist"
                ;;
            VV)
                cmd+="__VV"
                ;;
            Vino)
                cmd+="__Vino"
                ;;
            VisuRedHom)
                cmd+="__VisuRedHom"
                ;;
            Vodka)
                cmd+="__Vodka"
                ;;
            XLib)
                cmd+="__XLib"
                ;;
            XYZ2Im)
                cmd+="__XYZ2Im"
                ;;
            XifGps2Txt)
                cmd+="__XifGps2Txt"
                ;;
            XifGps2Xml)
                cmd+="__XifGps2Xml"
                ;;
            Zlimit)
                cmd+="__Zlimit"
                ;;
            cod)
                cmd+="__cod"
                ;;
            genmail)
                cmd+="__genmail"
                ;;
            mmxv)
                cmd+="__mmxv"
                ;;
            tiff_info)
                cmd+="__tiff_info"
                ;;
            to8Bits)
                cmd+="__to8Bits"
                ;;
            vic)
                cmd+="__vic"
                ;;
            *)
                ;;
        esac
    done

    case "${cmd}" in
        mm3d)
            opts="AllDev Ann AperiCloud Apero Apero2Meshlab Apero2NVM Apero2PMVS AperoChImSecMM Arsenic Aspro BAR Bascule BatchFDC Blinis C3DC CalibFinale CalibInit Campari CASA CatImSaisie CenterBascule ChantierClip CheckDependencies ChgSysCo CleanPatByOri ClipIm CmpCalib CmpIm CmpOri cod CoherEpip Compens ContrastFilter Convert2GenBundle ConvertCalib ConvertIm ConvertPolygone CreateEpip Dequant Devlop Digeo DIV Donuts Drunk ElDcraw ExtractAppui3D ExtractMesure2D FFTKugelhupf FieldDep3d FusionDepl GCPBascule GCPConvert GCPCtrl GCPVisib GenCode Genepi GenerateBorderCam Genere_Header_TiffFile genmail GenPairsFile GenXML2Cpp GrapheHom Gri2Bin GrShade Homol2GND HomolFilterMasq HomolMergePDVUnik Im2XYZ ImMire Impaint ImRandGray Init11P InitOriLinear Kugelhupf Liquor LumRas MakeGrid Malt MapCmd Martini MartiniGin MasqMaker MergeDepthMap MergeHomol MergePly MeshProjOnImg MICMAC MICMACSaisieLiaisons MM1P MM2DPosSism MMByP MMCalcSzWCor MMHomCorOri MMInitialModel MMMergeCloud MMPyram MMTestAllAuto MMTestOrient MMXmlXif mmxv Morito MpDcraw MPDtest MyRename NewTapas Nuage2Ply NuageBascule OldTapas Ori2Xml OriConvert OriExport OriRedTieP PanelIm Pasta PastDevlop Pastis PatFromOri PHO_MI PIMs PIMs2Mnt PIMs2Ply PointeInitPolyg Porto Prep4masq Ratafia RechCibleDRad RechCibleInit RedTieP Reduc2MM ReducHom RepLocBascule ReprojImg ReSampFid SaisieAppuisInit SaisieAppuisInitQT SaisieAppuisPredic SaisieAppuisPredicQT SaisieBasc SaisieBascQT SaisieBoxQT SaisieCyl SaisieCylQT SaisieMasq SaisieMasqQT SaisiePts Sake SateLib SBGlobBascule ScaleIm ScaleNuage Schnaps ScriptCalib SEL SetExif SetGpsExif Sift SimplePredict SMDM SplitMPO StackFlatField StatIm SupMntIm SysCoordPolyn Tapas Tapioca Tarama Tawny Tequila TestBundleInter TestCam TestChantier TestCmds TestDistM2C TestKey TestLib TestMTD TestNameCalib TestPbRPC TestRegEx TiePAll TiePByMesh TiePLine TiePMS TifDev tiff_info TiPunch to8Bits TripleSec Undist vic Vino VisuRedHom Vodka VV XifGps2Txt XifGps2Xml XLib XYZ2Im Zlimit"
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 1 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;

        mm3d__AllDev)
            opts="--8BGR --16BGr --8BCoul --XmlXiff  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --8BGR)
                    COMPREPLY=("<unused_8BGR>")
                    return 0
                    ;;
                --16BGr)
                    COMPREPLY=("<unused_16BGr>")
                    return 0
                    ;;
                --8BCoul)
                    COMPREPLY=("<unused_8BCoul>")
                    return 0
                    ;;
                --XmlXiff)
                    COMPREPLY=("<unused_XmlXiff>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Ann)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__AperiCloud)
            opts="--ExpTxt --Out --Bin --RGB --SeuilEc --LimBsH --WithPoints --CalPerIm --Focs --WithCam --StepIm --ColCadre --ColRay --SH --KeyName --ProfCam --NameBundle --RabDrBundle --GCPCtrl  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Bin)
                    COMPREPLY=("<unused_Bin>")
                    return 0
                    ;;
                --RGB)
                    COMPREPLY=("<unused_RGB>")
                    return 0
                    ;;
                --SeuilEc)
                    COMPREPLY=("<unused_SeuilEc>")
                    return 0
                    ;;
                --LimBsH)
                    COMPREPLY=("<unused_LimBsH>")
                    return 0
                    ;;
                --WithPoints)
                    COMPREPLY=("<unused_WithPoints>")
                    return 0
                    ;;
                --CalPerIm)
                    COMPREPLY=("<unused_CalPerIm>")
                    return 0
                    ;;
                --Focs)
                    COMPREPLY=("<unused_Focs>")
                    return 0
                    ;;
                --WithCam)
                    COMPREPLY=("<unused_WithCam>")
                    return 0
                    ;;
                --StepIm)
                    COMPREPLY=("<unused_StepIm>")
                    return 0
                    ;;
                --ColCadre)
                    COMPREPLY=("<unused_ColCadre>")
                    return 0
                    ;;
                --ColRay)
                    COMPREPLY=("<unused_ColRay>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --KeyName)
                    COMPREPLY=("<unused_KeyName>")
                    return 0
                    ;;
                --ProfCam)
                    COMPREPLY=("<unused_ProfCam>")
                    return 0
                    ;;
                --NameBundle)
                    COMPREPLY=("<unused_NameBundle>")
                    return 0
                    ;;
                --RabDrBundle)
                    COMPREPLY=("<unused_RabDrBundle>")
                    return 0
                    ;;
                --GCPCtrl)
                    COMPREPLY=("<unused_GCPCtrl>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Apero)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Apero2Meshlab)
            opts="--UnDist  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --UnDist)
                    COMPREPLY=("<unused_UnDist>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Apero2NVM)
            opts="--Nom --Out --ExpTxt --ExpApeCloud --ExpTiePt --KpImCen  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Nom)
                    COMPREPLY=("<unused_Nom>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ExpApeCloud)
                    COMPREPLY=("<unused_ExpApeCloud>")
                    return 0
                    ;;
                --ExpTiePt)
                    COMPREPLY=("<unused_ExpTiePt>")
                    return 0
                    ;;
                --KpImCen)
                    COMPREPLY=("<unused_KpImCen>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Apero2PMVS)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__AperoChImSecMM)
            opts="--ExpTxt --Out --CalPerIm --PatExp --Focs --PenPerIm --TetaOpt --Masq3D --VecDep --OnlyVecDep --ExpImSec  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --CalPerIm)
                    COMPREPLY=("<unused_CalPerIm>")
                    return 0
                    ;;
                --PatExp)
                    COMPREPLY=("<unused_PatExp>")
                    return 0
                    ;;
                --Focs)
                    COMPREPLY=("<unused_Focs>")
                    return 0
                    ;;
                --PenPerIm)
                    COMPREPLY=("<unused_PenPerIm>")
                    return 0
                    ;;
                --TetaOpt)
                    COMPREPLY=("<unused_TetaOpt>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --VecDep)
                    COMPREPLY=("<unused_VecDep>")
                    return 0
                    ;;
                --OnlyVecDep)
                    COMPREPLY=("<unused_OnlyVecDep>")
                    return 0
                    ;;
                --ExpImSec)
                    COMPREPLY=("<unused_ExpImSec>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Arsenic)
            opts="--Out --InVig --ResolModel --TPA --NbIte --ThreshDisp  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --InVig)
                    COMPREPLY=("<unused_InVig>")
                    return 0
                    ;;
                --ResolModel)
                    COMPREPLY=("<unused_ResolModel>")
                    return 0
                    ;;
                --TPA)
                    COMPREPLY=("<unused_TPA>")
                    return 0
                    ;;
                --NbIte)
                    COMPREPLY=("<unused_NbIte>")
                    return 0
                    ;;
                --ThreshDisp)
                    COMPREPLY=("<unused_ThreshDisp>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Aspro)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__BAR)
            opts="--NbTir  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbTir)
                    COMPREPLY=("<unused_NbTir>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Bascule)
            opts="--ImPl --ExpTxt --PostPlan --AllPl --UserKeyPlan --P1Rep --P2Rep --AxeRep --ImRep --Teta --MesureIm --OrthoCyl --DistFS --Norm --SNorm --LimBsH  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ImPl)
                    COMPREPLY=("<unused_ImPl>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --PostPlan)
                    COMPREPLY=("<unused_PostPlan>")
                    return 0
                    ;;
                --AllPl)
                    COMPREPLY=("<unused_AllPl>")
                    return 0
                    ;;
                --UserKeyPlan)
                    COMPREPLY=("<unused_UserKeyPlan>")
                    return 0
                    ;;
                --P1Rep)
                    COMPREPLY=("<unused_P1Rep>")
                    return 0
                    ;;
                --P2Rep)
                    COMPREPLY=("<unused_P2Rep>")
                    return 0
                    ;;
                --AxeRep)
                    COMPREPLY=("<unused_AxeRep>")
                    return 0
                    ;;
                --ImRep)
                    COMPREPLY=("<unused_ImRep>")
                    return 0
                    ;;
                --Teta)
                    COMPREPLY=("<unused_Teta>")
                    return 0
                    ;;
                --MesureIm)
                    COMPREPLY=("<unused_MesureIm>")
                    return 0
                    ;;
                --OrthoCyl)
                    COMPREPLY=("<unused_OrthoCyl>")
                    return 0
                    ;;
                --DistFS)
                    COMPREPLY=("<unused_DistFS>")
                    return 0
                    ;;
                --Norm)
                    COMPREPLY=("<unused_Norm>")
                    return 0
                    ;;
                --SNorm)
                    COMPREPLY=("<unused_SNorm>")
                    return 0
                    ;;
                --LimBsH)
                    COMPREPLY=("<unused_LimBsH>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__BatchFDC)
            opts="--File --Exe  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --File)
                    COMPREPLY=("<unused_File>")
                    return 0
                    ;;
                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Blinis)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__C3DC)
            opts="--Masq3D --Out --SzNorm --PlyCoul --Tuning --Purge --DownScale --ZoomF --UseGpu --DefCor --ZReg --ExpTxt --FilePair --DebugMMByP --Bin --ExpImSec --OffsetPly  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --SzNorm)
                    COMPREPLY=("<unused_SzNorm>")
                    return 0
                    ;;
                --PlyCoul)
                    COMPREPLY=("<unused_PlyCoul>")
                    return 0
                    ;;
                --Tuning)
                    COMPREPLY=("<unused_Tuning>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --DownScale)
                    COMPREPLY=("<unused_DownScale>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --UseGpu)
                    COMPREPLY=("<unused_UseGpu>")
                    return 0
                    ;;
                --DefCor)
                    COMPREPLY=("<unused_DefCor>")
                    return 0
                    ;;
                --ZReg)
                    COMPREPLY=("<unused_ZReg>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --FilePair)
                    COMPREPLY=("<unused_FilePair>")
                    return 0
                    ;;
                --DebugMMByP)
                    COMPREPLY=("<unused_DebugMMByP>")
                    return 0
                    ;;
                --Bin)
                    COMPREPLY=("<unused_Bin>")
                    return 0
                    ;;
                --ExpImSec)
                    COMPREPLY=("<unused_ExpImSec>")
                    return 0
                    ;;
                --OffsetPly)
                    COMPREPLY=("<unused_OffsetPly>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CASA)
            opts="--Out --N2 --N3 --N4 --PtsOri  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --N2)
                    COMPREPLY=("<unused_N2>")
                    return 0
                    ;;
                --N3)
                    COMPREPLY=("<unused_N3>")
                    return 0
                    ;;
                --N4)
                    COMPREPLY=("<unused_N4>")
                    return 0
                    ;;
                --PtsOri)
                    COMPREPLY=("<unused_PtsOri>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CalibFinale)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CalibInit)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Campari)
            opts="--GCP --EmGPS --GpsLa --SigmaTieP --FactElimTieP --CPI1 --CPI2 --FocFree --PPFree --AffineFree --AllFree --DetGCP --Visc --ExpTxt --ImMinMax --DegAdd --DegFree --DRMax --PoseFigee --FrozenPoses --AcceptGB --MulRTA --NameRTA --GCPRTA --SH --NbIterEnd --BlocGlob --DistBlocGlob --OptBlocG --BlocTimeRel --NbLiais --PdsGBRot --PdsGBId --PdsGBIter --ExportSensib --UseGaussJ --NormEq --ContrCalCamCons  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --GCP)
                    COMPREPLY=("<unused_GCP>")
                    return 0
                    ;;
                --EmGPS)
                    COMPREPLY=("<unused_EmGPS>")
                    return 0
                    ;;
                --GpsLa)
                    COMPREPLY=("<unused_GpsLa>")
                    return 0
                    ;;
                --SigmaTieP)
                    COMPREPLY=("<unused_SigmaTieP>")
                    return 0
                    ;;
                --FactElimTieP)
                    COMPREPLY=("<unused_FactElimTieP>")
                    return 0
                    ;;
                --CPI1)
                    COMPREPLY=("<unused_CPI1>")
                    return 0
                    ;;
                --CPI2)
                    COMPREPLY=("<unused_CPI2>")
                    return 0
                    ;;
                --FocFree)
                    COMPREPLY=("<unused_FocFree>")
                    return 0
                    ;;
                --PPFree)
                    COMPREPLY=("<unused_PPFree>")
                    return 0
                    ;;
                --AffineFree)
                    COMPREPLY=("<unused_AffineFree>")
                    return 0
                    ;;
                --AllFree)
                    COMPREPLY=("<unused_AllFree>")
                    return 0
                    ;;
                --DetGCP)
                    COMPREPLY=("<unused_DetGCP>")
                    return 0
                    ;;
                --Visc)
                    COMPREPLY=("<unused_Visc>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ImMinMax)
                    COMPREPLY=("<unused_ImMinMax>")
                    return 0
                    ;;
                --DegAdd)
                    COMPREPLY=("<unused_DegAdd>")
                    return 0
                    ;;
                --DegFree)
                    COMPREPLY=("<unused_DegFree>")
                    return 0
                    ;;
                --DRMax)
                    COMPREPLY=("<unused_DRMax>")
                    return 0
                    ;;
                --PoseFigee)
                    COMPREPLY=("<unused_PoseFigee>")
                    return 0
                    ;;
                --FrozenPoses)
                    COMPREPLY=("<unused_FrozenPoses>")
                    return 0
                    ;;
                --AcceptGB)
                    COMPREPLY=("<unused_AcceptGB>")
                    return 0
                    ;;
                --MulRTA)
                    COMPREPLY=("<unused_MulRTA>")
                    return 0
                    ;;
                --NameRTA)
                    COMPREPLY=("<unused_NameRTA>")
                    return 0
                    ;;
                --GCPRTA)
                    COMPREPLY=("<unused_GCPRTA>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --NbIterEnd)
                    COMPREPLY=("<unused_NbIterEnd>")
                    return 0
                    ;;
                --BlocGlob)
                    COMPREPLY=("<unused_BlocGlob>")
                    return 0
                    ;;
                --DistBlocGlob)
                    COMPREPLY=("<unused_DistBlocGlob>")
                    return 0
                    ;;
                --OptBlocG)
                    COMPREPLY=("<unused_OptBlocG>")
                    return 0
                    ;;
                --BlocTimeRel)
                    COMPREPLY=("<unused_BlocTimeRel>")
                    return 0
                    ;;
                --NbLiais)
                    COMPREPLY=("<unused_NbLiais>")
                    return 0
                    ;;
                --PdsGBRot)
                    COMPREPLY=("<unused_PdsGBRot>")
                    return 0
                    ;;
                --PdsGBId)
                    COMPREPLY=("<unused_PdsGBId>")
                    return 0
                    ;;
                --PdsGBIter)
                    COMPREPLY=("<unused_PdsGBIter>")
                    return 0
                    ;;
                --ExportSensib)
                    COMPREPLY=("<unused_ExportSensib>")
                    return 0
                    ;;
                --UseGaussJ)
                    COMPREPLY=("<unused_UseGaussJ>")
                    return 0
                    ;;
                --NormEq)
                    COMPREPLY=("<unused_NormEq>")
                    return 0
                    ;;
                --ContrCalCamCons)
                    COMPREPLY=("<unused_ContrCalCamCons>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CatImSaisie)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CenterBascule)
            opts="--L1 --CalcV  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --L1)
                    COMPREPLY=("<unused_L1>")
                    return 0
                    ;;
                --CalcV)
                    COMPREPLY=("<unused_CalcV>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ChantierClip)
            opts="--PrefCliped --OriOut --MinSz  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --PrefCliped)
                    COMPREPLY=("<unused_PrefCliped>")
                    return 0
                    ;;
                --OriOut)
                    COMPREPLY=("<unused_OriOut>")
                    return 0
                    ;;
                --MinSz)
                    COMPREPLY=("<unused_MinSz>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CheckDependencies)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ChgSysCo)
            opts="--FR  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --FR)
                    COMPREPLY=("<unused_FR>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CleanPatByOri)
            opts="--Show --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Show)
                    COMPREPLY=("<unused_Show>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ClipIm)
            opts="--Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CmpCalib)
            opts="--Teta01 --Teta02 --Teta12 --L1 --SzW --DynV --Out --DispW --XmlG  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Teta01)
                    COMPREPLY=("<unused_Teta01>")
                    return 0
                    ;;
                --Teta02)
                    COMPREPLY=("<unused_Teta02>")
                    return 0
                    ;;
                --Teta12)
                    COMPREPLY=("<unused_Teta12>")
                    return 0
                    ;;
                --L1)
                    COMPREPLY=("<unused_L1>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --DynV)
                    COMPREPLY=("<unused_DynV>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --DispW)
                    COMPREPLY=("<unused_DispW>")
                    return 0
                    ;;
                --XmlG)
                    COMPREPLY=("<unused_XmlG>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CmpIm)
            opts="--FileDiff --Dyn --Brd --OkSzDif --Mul2 --UseFOM --ColDif --16Bit --XmlG --Hist  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --FileDiff)
                    COMPREPLY=("<unused_FileDiff>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --Brd)
                    COMPREPLY=("<unused_Brd>")
                    return 0
                    ;;
                --OkSzDif)
                    COMPREPLY=("<unused_OkSzDif>")
                    return 0
                    ;;
                --Mul2)
                    COMPREPLY=("<unused_Mul2>")
                    return 0
                    ;;
                --UseFOM)
                    COMPREPLY=("<unused_UseFOM>")
                    return 0
                    ;;
                --ColDif)
                    COMPREPLY=("<unused_ColDif>")
                    return 0
                    ;;
                --16Bit)
                    COMPREPLY=("<unused_16Bit>")
                    return 0
                    ;;
                --XmlG)
                    COMPREPLY=("<unused_XmlG>")
                    return 0
                    ;;
                --Hist)
                    COMPREPLY=("<unused_Hist>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CmpOri)
            opts="--DirOri2 --XmlG  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --DirOri2)
                    COMPREPLY=("<unused_DirOri2>")
                    return 0
                    ;;
                --XmlG)
                    COMPREPLY=("<unused_XmlG>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CoherEpip)
            opts="--Dir --Box --SzDec --Brd --SigP --RegCh --FBH --YBox --Regul --RedM --DoMS --DoM --UAM --Visu --Zoom --NumPx --NumMasq --Prefix --Step --ByE --ByP --InParal --InternalCalledByP --InternalPostfixP --ExpFin --BSHReject --FactBSHOk --Debug --Masq3D  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Dir)
                    COMPREPLY=("<unused_Dir>")
                    return 0
                    ;;
                --Box)
                    COMPREPLY=("<unused_Box>")
                    return 0
                    ;;
                --SzDec)
                    COMPREPLY=("<unused_SzDec>")
                    return 0
                    ;;
                --Brd)
                    COMPREPLY=("<unused_Brd>")
                    return 0
                    ;;
                --SigP)
                    COMPREPLY=("<unused_SigP>")
                    return 0
                    ;;
                --RegCh)
                    COMPREPLY=("<unused_RegCh>")
                    return 0
                    ;;
                --FBH)
                    COMPREPLY=("<unused_FBH>")
                    return 0
                    ;;
                --YBox)
                    COMPREPLY=("<unused_YBox>")
                    return 0
                    ;;
                --Regul)
                    COMPREPLY=("<unused_Regul>")
                    return 0
                    ;;
                --RedM)
                    COMPREPLY=("<unused_RedM>")
                    return 0
                    ;;
                --DoMS)
                    COMPREPLY=("<unused_DoMS>")
                    return 0
                    ;;
                --DoM)
                    COMPREPLY=("<unused_DoM>")
                    return 0
                    ;;
                --UAM)
                    COMPREPLY=("<unused_UAM>")
                    return 0
                    ;;
                --Visu)
                    COMPREPLY=("<unused_Visu>")
                    return 0
                    ;;
                --Zoom)
                    COMPREPLY=("<unused_Zoom>")
                    return 0
                    ;;
                --NumPx)
                    COMPREPLY=("<unused_NumPx>")
                    return 0
                    ;;
                --NumMasq)
                    COMPREPLY=("<unused_NumMasq>")
                    return 0
                    ;;
                --Prefix)
                    COMPREPLY=("<unused_Prefix>")
                    return 0
                    ;;
                --Step)
                    COMPREPLY=("<unused_Step>")
                    return 0
                    ;;
                --ByE)
                    COMPREPLY=("<unused_ByE>")
                    return 0
                    ;;
                --ByP)
                    COMPREPLY=("<unused_ByP>")
                    return 0
                    ;;
                --InParal)
                    COMPREPLY=("<unused_InParal>")
                    return 0
                    ;;
                --InternalCalledByP)
                    COMPREPLY=("<unused_InternalCalledByP>")
                    return 0
                    ;;
                --InternalPostfixP)
                    COMPREPLY=("<unused_InternalPostfixP>")
                    return 0
                    ;;
                --ExpFin)
                    COMPREPLY=("<unused_ExpFin>")
                    return 0
                    ;;
                --BSHReject)
                    COMPREPLY=("<unused_BSHReject>")
                    return 0
                    ;;
                --FactBSHOk)
                    COMPREPLY=("<unused_FactBSHOk>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Compens)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ContrastFilter)
            opts="--Out --Gray --Masq  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Gray)
                    COMPREPLY=("<unused_Gray>")
                    return 0
                    ;;
                --Masq)
                    COMPREPLY=("<unused_Masq>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Convert2GenBundle)
            opts="--ChSys --Degre --Type --PertubAng  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ChSys)
                    COMPREPLY=("<unused_ChSys>")
                    return 0
                    ;;
                --Degre)
                    COMPREPLY=("<unused_Degre>")
                    return 0
                    ;;
                --Type)
                    COMPREPLY=("<unused_Type>")
                    return 0
                    ;;
                --PertubAng)
                    COMPREPLY=("<unused_PertubAng>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ConvertCalib)
            opts="--NbXY --NbProf --DRMax --DegGen --PPFree --CDFree --FocFree --DecFree  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbXY)
                    COMPREPLY=("<unused_NbXY>")
                    return 0
                    ;;
                --NbProf)
                    COMPREPLY=("<unused_NbProf>")
                    return 0
                    ;;
                --DRMax)
                    COMPREPLY=("<unused_DRMax>")
                    return 0
                    ;;
                --DegGen)
                    COMPREPLY=("<unused_DegGen>")
                    return 0
                    ;;
                --PPFree)
                    COMPREPLY=("<unused_PPFree>")
                    return 0
                    ;;
                --CDFree)
                    COMPREPLY=("<unused_CDFree>")
                    return 0
                    ;;
                --FocFree)
                    COMPREPLY=("<unused_FocFree>")
                    return 0
                    ;;
                --DecFree)
                    COMPREPLY=("<unused_DecFree>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ConvertIm)
            opts="--Out --Ext --SzOut --P0 --Type --Col --ReducXY --ReducX --ReducY --Visu --SzTifTile --SzTileInterne --Dyn --KCh --NoTile --Permut --F2  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Ext)
                    COMPREPLY=("<unused_Ext>")
                    return 0
                    ;;
                --SzOut)
                    COMPREPLY=("<unused_SzOut>")
                    return 0
                    ;;
                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Type)
                    COMPREPLY=("<unused_Type>")
                    return 0
                    ;;
                --Col)
                    COMPREPLY=("<unused_Col>")
                    return 0
                    ;;
                --ReducXY)
                    COMPREPLY=("<unused_ReducXY>")
                    return 0
                    ;;
                --ReducX)
                    COMPREPLY=("<unused_ReducX>")
                    return 0
                    ;;
                --ReducY)
                    COMPREPLY=("<unused_ReducY>")
                    return 0
                    ;;
                --Visu)
                    COMPREPLY=("<unused_Visu>")
                    return 0
                    ;;
                --SzTifTile)
                    COMPREPLY=("<unused_SzTifTile>")
                    return 0
                    ;;
                --SzTileInterne)
                    COMPREPLY=("<unused_SzTileInterne>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --KCh)
                    COMPREPLY=("<unused_KCh>")
                    return 0
                    ;;
                --NoTile)
                    COMPREPLY=("<unused_NoTile>")
                    return 0
                    ;;
                --Permut)
                    COMPREPLY=("<unused_Permut>")
                    return 0
                    ;;
                --F2)
                    COMPREPLY=("<unused_F2>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ConvertPolygone)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__CreateEpip)
            opts="--Scale --Dir --Gray --16B --InParal --DoIm --NameH --Degre --FG --Kern --AttrMasq --PostIm --ExpTxt --Dir1 --Dir2 --NbBloc  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Scale)
                    COMPREPLY=("<unused_Scale>")
                    return 0
                    ;;
                --Dir)
                    COMPREPLY=("<unused_Dir>")
                    return 0
                    ;;
                --Gray)
                    COMPREPLY=("<unused_Gray>")
                    return 0
                    ;;
                --16B)
                    COMPREPLY=("<unused_16B>")
                    return 0
                    ;;
                --InParal)
                    COMPREPLY=("<unused_InParal>")
                    return 0
                    ;;
                --DoIm)
                    COMPREPLY=("<unused_DoIm>")
                    return 0
                    ;;
                --NameH)
                    COMPREPLY=("<unused_NameH>")
                    return 0
                    ;;
                --Degre)
                    COMPREPLY=("<unused_Degre>")
                    return 0
                    ;;
                --FG)
                    COMPREPLY=("<unused_FG>")
                    return 0
                    ;;
                --Kern)
                    COMPREPLY=("<unused_Kern>")
                    return 0
                    ;;
                --AttrMasq)
                    COMPREPLY=("<unused_AttrMasq>")
                    return 0
                    ;;
                --PostIm)
                    COMPREPLY=("<unused_PostIm>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Dir1)
                    COMPREPLY=("<unused_Dir1>")
                    return 0
                    ;;
                --Dir2)
                    COMPREPLY=("<unused_Dir2>")
                    return 0
                    ;;
                --NbBloc)
                    COMPREPLY=("<unused_NbBloc>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__DIV)
            opts="--Rate --ParamSzSift --PatNumber --DoV2I --NDig --Foc --Cam --PercImInit --MinMax --Tuning --TheSzDecoup --OverLap  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Rate)
                    COMPREPLY=("<unused_Rate>")
                    return 0
                    ;;
                --ParamSzSift)
                    COMPREPLY=("<unused_ParamSzSift>")
                    return 0
                    ;;
                --PatNumber)
                    COMPREPLY=("<unused_PatNumber>")
                    return 0
                    ;;
                --DoV2I)
                    COMPREPLY=("<unused_DoV2I>")
                    return 0
                    ;;
                --NDig)
                    COMPREPLY=("<unused_NDig>")
                    return 0
                    ;;
                --Foc)
                    COMPREPLY=("<unused_Foc>")
                    return 0
                    ;;
                --Cam)
                    COMPREPLY=("<unused_Cam>")
                    return 0
                    ;;
                --PercImInit)
                    COMPREPLY=("<unused_PercImInit>")
                    return 0
                    ;;
                --MinMax)
                    COMPREPLY=("<unused_MinMax>")
                    return 0
                    ;;
                --Tuning)
                    COMPREPLY=("<unused_Tuning>")
                    return 0
                    ;;
                --TheSzDecoup)
                    COMPREPLY=("<unused_TheSzDecoup>")
                    return 0
                    ;;
                --OverLap)
                    COMPREPLY=("<unused_OverLap>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Dequant)
            opts="--Out --P0 --Sz --SzMaxDalles --SzRecDalles --TraitSpecCuv --Dyn --Offs  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --SzMaxDalles)
                    COMPREPLY=("<unused_SzMaxDalles>")
                    return 0
                    ;;
                --SzRecDalles)
                    COMPREPLY=("<unused_SzRecDalles>")
                    return 0
                    ;;
                --TraitSpecCuv)
                    COMPREPLY=("<unused_TraitSpecCuv>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --Offs)
                    COMPREPLY=("<unused_Offs>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Devlop)
            opts="--8B --Gray --Post --ConsCol --NameOut --Split  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --8B)
                    COMPREPLY=("<unused_8B>")
                    return 0
                    ;;
                --Gray)
                    COMPREPLY=("<unused_Gray>")
                    return 0
                    ;;
                --Post)
                    COMPREPLY=("<unused_Post>")
                    return 0
                    ;;
                --ConsCol)
                    COMPREPLY=("<unused_ConsCol>")
                    return 0
                    ;;
                --NameOut)
                    COMPREPLY=("<unused_NameOut>")
                    return 0
                    ;;
                --Split)
                    COMPREPLY=("<unused_Split>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Digeo)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Donuts)
            opts="--Out --Show --Check  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Show)
                    COMPREPLY=("<unused_Show>")
                    return 0
                    ;;
                --Check)
                    COMPREPLY=("<unused_Check>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Drunk)
            opts="--Out --Talk  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Talk)
                    COMPREPLY=("<unused_Talk>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ElDcraw)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ExtractAppui3D)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ExtractMesure2D)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__FFTKugelhupf)
            opts="--TargetHalfSize --Masq --SearchIncertitude --SzFFT --Debug --ValSim  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --TargetHalfSize)
                    COMPREPLY=("<unused_TargetHalfSize>")
                    return 0
                    ;;
                --Masq)
                    COMPREPLY=("<unused_Masq>")
                    return 0
                    ;;
                --SearchIncertitude)
                    COMPREPLY=("<unused_SearchIncertitude>")
                    return 0
                    ;;
                --SzFFT)
                    COMPREPLY=("<unused_SzFFT>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --ValSim)
                    COMPREPLY=("<unused_ValSim>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__FieldDep3d)
            opts="--SeuilG  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SeuilG)
                    COMPREPLY=("<unused_SeuilG>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__FusionDepl)
            opts="--YYYYY  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --YYYYY)
                    COMPREPLY=("<unused_YYYYY>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GCPBascule)
            opts="--L1 --CPI --ShowU --ShowD --PatNLD --NLDegX --NLDegY --NLDegZ --NLFR --NLShow  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --L1)
                    COMPREPLY=("<unused_L1>")
                    return 0
                    ;;
                --CPI)
                    COMPREPLY=("<unused_CPI>")
                    return 0
                    ;;
                --ShowU)
                    COMPREPLY=("<unused_ShowU>")
                    return 0
                    ;;
                --ShowD)
                    COMPREPLY=("<unused_ShowD>")
                    return 0
                    ;;
                --PatNLD)
                    COMPREPLY=("<unused_PatNLD>")
                    return 0
                    ;;
                --NLDegX)
                    COMPREPLY=("<unused_NLDegX>")
                    return 0
                    ;;
                --NLDegY)
                    COMPREPLY=("<unused_NLDegY>")
                    return 0
                    ;;
                --NLDegZ)
                    COMPREPLY=("<unused_NLDegZ>")
                    return 0
                    ;;
                --NLFR)
                    COMPREPLY=("<unused_NLFR>")
                    return 0
                    ;;
                --NLShow)
                    COMPREPLY=("<unused_NLShow>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GCPConvert)
            opts="--Out --ChSys --MulCo --MulInc  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --ChSys)
                    COMPREPLY=("<unused_ChSys>")
                    return 0
                    ;;
                --MulCo)
                    COMPREPLY=("<unused_MulCo>")
                    return 0
                    ;;
                --MulInc)
                    COMPREPLY=("<unused_MulInc>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GCPCtrl)
            opts="--CPI --ShowU  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --CPI)
                    COMPREPLY=("<unused_CPI>")
                    return 0
                    ;;
                --ShowU)
                    COMPREPLY=("<unused_ShowU>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GCPVisib)
            opts="--Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GenCode)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GenPairsFile)
            opts="--Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GenXML2Cpp)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Genepi)
            opts="--NbXY --NbProf  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbXY)
                    COMPREPLY=("<unused_NbXY>")
                    return 0
                    ;;
                --NbProf)
                    COMPREPLY=("<unused_NbProf>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GenerateBorderCam)
            opts="--Int --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Int)
                    COMPREPLY=("<unused_Int>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Genere_Header_TiffFile)
            opts="--Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GrShade)
            opts="--Out --FileCol --Visu --P0 --Sz --FZ --DynMed --Anisotropie --NbDir --Brd --TypeMnt --TypeShade --Dequant --HypsoDyn --HypsoSat --SzMaxDalles --SzRecDalles --ModeOmbre --Mask --DericheFact --NbIterF --FactExp --Dyn --PdsF --ModeColor --NbMed --NbIterMed --TetaH --Azimut  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --FileCol)
                    COMPREPLY=("<unused_FileCol>")
                    return 0
                    ;;
                --Visu)
                    COMPREPLY=("<unused_Visu>")
                    return 0
                    ;;
                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --FZ)
                    COMPREPLY=("<unused_FZ>")
                    return 0
                    ;;
                --DynMed)
                    COMPREPLY=("<unused_DynMed>")
                    return 0
                    ;;
                --Anisotropie)
                    COMPREPLY=("<unused_Anisotropie>")
                    return 0
                    ;;
                --NbDir)
                    COMPREPLY=("<unused_NbDir>")
                    return 0
                    ;;
                --Brd)
                    COMPREPLY=("<unused_Brd>")
                    return 0
                    ;;
                --TypeMnt)
                    COMPREPLY=("<unused_TypeMnt>")
                    return 0
                    ;;
                --TypeShade)
                    COMPREPLY=("<unused_TypeShade>")
                    return 0
                    ;;
                --Dequant)
                    COMPREPLY=("<unused_Dequant>")
                    return 0
                    ;;
                --HypsoDyn)
                    COMPREPLY=("<unused_HypsoDyn>")
                    return 0
                    ;;
                --HypsoSat)
                    COMPREPLY=("<unused_HypsoSat>")
                    return 0
                    ;;
                --SzMaxDalles)
                    COMPREPLY=("<unused_SzMaxDalles>")
                    return 0
                    ;;
                --SzRecDalles)
                    COMPREPLY=("<unused_SzRecDalles>")
                    return 0
                    ;;
                --ModeOmbre)
                    COMPREPLY=("<unused_ModeOmbre>")
                    return 0
                    ;;
                --Mask)
                    COMPREPLY=("<unused_Mask>")
                    return 0
                    ;;
                --DericheFact)
                    COMPREPLY=("<unused_DericheFact>")
                    return 0
                    ;;
                --NbIterF)
                    COMPREPLY=("<unused_NbIterF>")
                    return 0
                    ;;
                --FactExp)
                    COMPREPLY=("<unused_FactExp>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --PdsF)
                    COMPREPLY=("<unused_PdsF>")
                    return 0
                    ;;
                --ModeColor)
                    COMPREPLY=("<unused_ModeColor>")
                    return 0
                    ;;
                --NbMed)
                    COMPREPLY=("<unused_NbMed>")
                    return 0
                    ;;
                --NbIterMed)
                    COMPREPLY=("<unused_NbIterMed>")
                    return 0
                    ;;
                --TetaH)
                    COMPREPLY=("<unused_TetaH>")
                    return 0
                    ;;
                --Azimut)
                    COMPREPLY=("<unused_Azimut>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__GrapheHom)
            opts="--TagC --TagOri --AltiSol --Dist --Rab --Terr --Sym --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --TagC)
                    COMPREPLY=("<unused_TagC>")
                    return 0
                    ;;
                --TagOri)
                    COMPREPLY=("<unused_TagOri>")
                    return 0
                    ;;
                --AltiSol)
                    COMPREPLY=("<unused_AltiSol>")
                    return 0
                    ;;
                --Dist)
                    COMPREPLY=("<unused_Dist>")
                    return 0
                    ;;
                --Rab)
                    COMPREPLY=("<unused_Rab>")
                    return 0
                    ;;
                --Terr)
                    COMPREPLY=("<unused_Terr>")
                    return 0
                    ;;
                --Sym)
                    COMPREPLY=("<unused_Sym>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Gri2Bin)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Homol2GND)
            opts="--SH --nbPts --out --ptsName --ExpTxt  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --nbPts)
                    COMPREPLY=("<unused_nbPts>")
                    return 0
                    ;;
                --out)
                    COMPREPLY=("<unused_out>")
                    return 0
                    ;;
                --ptsName)
                    COMPREPLY=("<unused_ptsName>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__HomolFilterMasq)
            opts="--PostPlan --GlobalMasq --KeyCalculMasq --KeyEquivNoMasq --Resol --ANM --ExpTxt --PostIn --PostOut --OriMasq3D --Masq3D --SelecTer --DistId  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --PostPlan)
                    COMPREPLY=("<unused_PostPlan>")
                    return 0
                    ;;
                --GlobalMasq)
                    COMPREPLY=("<unused_GlobalMasq>")
                    return 0
                    ;;
                --KeyCalculMasq)
                    COMPREPLY=("<unused_KeyCalculMasq>")
                    return 0
                    ;;
                --KeyEquivNoMasq)
                    COMPREPLY=("<unused_KeyEquivNoMasq>")
                    return 0
                    ;;
                --Resol)
                    COMPREPLY=("<unused_Resol>")
                    return 0
                    ;;
                --ANM)
                    COMPREPLY=("<unused_ANM>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --PostIn)
                    COMPREPLY=("<unused_PostIn>")
                    return 0
                    ;;
                --PostOut)
                    COMPREPLY=("<unused_PostOut>")
                    return 0
                    ;;
                --OriMasq3D)
                    COMPREPLY=("<unused_OriMasq3D>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --SelecTer)
                    COMPREPLY=("<unused_SelecTer>")
                    return 0
                    ;;
                --DistId)
                    COMPREPLY=("<unused_DistId>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__HomolMergePDVUnik)
            opts="--PostIn --PostOut --ExpTxt --DirN  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --PostIn)
                    COMPREPLY=("<unused_PostIn>")
                    return 0
                    ;;
                --PostOut)
                    COMPREPLY=("<unused_PostOut>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --DirN)
                    COMPREPLY=("<unused_DirN>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Im2XYZ)
            opts="--FilterInput --PointIsImRef --InputImWithZ  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --FilterInput)
                    COMPREPLY=("<unused_FilterInput>")
                    return 0
                    ;;
                --PointIsImRef)
                    COMPREPLY=("<unused_PointIsImRef>")
                    return 0
                    ;;
                --InputImWithZ)
                    COMPREPLY=("<unused_InputImWithZ>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ImMire)
            opts="--Sz --Out --DoC  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --DoC)
                    COMPREPLY=("<unused_DoC>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ImRandGray)
            opts="--VRand --InitR --MacroIm --PdsMI  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --VRand)
                    COMPREPLY=("<unused_VRand>")
                    return 0
                    ;;
                --InitR)
                    COMPREPLY=("<unused_InitR>")
                    return 0
                    ;;
                --MacroIm)
                    COMPREPLY=("<unused_MacroIm>")
                    return 0
                    ;;
                --PdsMI)
                    COMPREPLY=("<unused_PdsMI>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Impaint)
            opts="--Out --2Fill  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --2Fill)
                    COMPREPLY=("<unused_2Fill>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Init11P)
            opts="--FM --Filter  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --FM)
                    COMPREPLY=("<unused_FM>")
                    return 0
                    ;;
                --Filter)
                    COMPREPLY=("<unused_Filter>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__InitOriLinear)
            opts="--PatTurn --PatAngle --WithIdent --Axe --Plan  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --PatTurn)
                    COMPREPLY=("<unused_PatTurn>")
                    return 0
                    ;;
                --PatAngle)
                    COMPREPLY=("<unused_PatAngle>")
                    return 0
                    ;;
                --WithIdent)
                    COMPREPLY=("<unused_WithIdent>")
                    return 0
                    ;;
                --Axe)
                    COMPREPLY=("<unused_Axe>")
                    return 0
                    ;;
                --Plan)
                    COMPREPLY=("<unused_Plan>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Kugelhupf)
            opts="--TargetHalfSize --SearchIncertitude --SearchStep --Threshold  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --TargetHalfSize)
                    COMPREPLY=("<unused_TargetHalfSize>")
                    return 0
                    ;;
                --SearchIncertitude)
                    COMPREPLY=("<unused_SearchIncertitude>")
                    return 0
                    ;;
                --SearchStep)
                    COMPREPLY=("<unused_SearchStep>")
                    return 0
                    ;;
                --Threshold)
                    COMPREPLY=("<unused_Threshold>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Liquor)
            opts="--SzInit --OverLap  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzInit)
                    COMPREPLY=("<unused_SzInit>")
                    return 0
                    ;;
                --OverLap)
                    COMPREPLY=("<unused_OverLap>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__LumRas)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MICMAC)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MICMACSaisieLiaisons)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MM1P)
            opts="--Exe --Show --Zoom0 --ZoomF --CreateE --2Way --CMS --DoMR --SigmaP --BoxIm --Purge --PurgeAtEnd --InParal --BascMTD --RIE --DoHom --DegCE --QualOr --DoPly --ScalePly --DoOMF --DCE --HasVeg --HasSBG --Masq3D --UseGpu --DefCor --ZReg --ExpTxt  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --Show)
                    COMPREPLY=("<unused_Show>")
                    return 0
                    ;;
                --Zoom0)
                    COMPREPLY=("<unused_Zoom0>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --CreateE)
                    COMPREPLY=("<unused_CreateE>")
                    return 0
                    ;;
                --2Way)
                    COMPREPLY=("<unused_2Way>")
                    return 0
                    ;;
                --CMS)
                    COMPREPLY=("<unused_CMS>")
                    return 0
                    ;;
                --DoMR)
                    COMPREPLY=("<unused_DoMR>")
                    return 0
                    ;;
                --SigmaP)
                    COMPREPLY=("<unused_SigmaP>")
                    return 0
                    ;;
                --BoxIm)
                    COMPREPLY=("<unused_BoxIm>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --PurgeAtEnd)
                    COMPREPLY=("<unused_PurgeAtEnd>")
                    return 0
                    ;;
                --InParal)
                    COMPREPLY=("<unused_InParal>")
                    return 0
                    ;;
                --BascMTD)
                    COMPREPLY=("<unused_BascMTD>")
                    return 0
                    ;;
                --RIE)
                    COMPREPLY=("<unused_RIE>")
                    return 0
                    ;;
                --DoHom)
                    COMPREPLY=("<unused_DoHom>")
                    return 0
                    ;;
                --DegCE)
                    COMPREPLY=("<unused_DegCE>")
                    return 0
                    ;;
                --QualOr)
                    COMPREPLY=("<unused_QualOr>")
                    return 0
                    ;;
                --DoPly)
                    COMPREPLY=("<unused_DoPly>")
                    return 0
                    ;;
                --ScalePly)
                    COMPREPLY=("<unused_ScalePly>")
                    return 0
                    ;;
                --DoOMF)
                    COMPREPLY=("<unused_DoOMF>")
                    return 0
                    ;;
                --DCE)
                    COMPREPLY=("<unused_DCE>")
                    return 0
                    ;;
                --HasVeg)
                    COMPREPLY=("<unused_HasVeg>")
                    return 0
                    ;;
                --HasSBG)
                    COMPREPLY=("<unused_HasSBG>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --UseGpu)
                    COMPREPLY=("<unused_UseGpu>")
                    return 0
                    ;;
                --DefCor)
                    COMPREPLY=("<unused_DefCor>")
                    return 0
                    ;;
                --ZReg)
                    COMPREPLY=("<unused_ZReg>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MM2DPosSism)
            opts="--Masq --Teta --Exe --SzW --Reg --Dequant --Inc --SsResolOpt --DirMEC --PxMoy --ZoomInit  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Masq)
                    COMPREPLY=("<unused_Masq>")
                    return 0
                    ;;
                --Teta)
                    COMPREPLY=("<unused_Teta>")
                    return 0
                    ;;
                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --Reg)
                    COMPREPLY=("<unused_Reg>")
                    return 0
                    ;;
                --Dequant)
                    COMPREPLY=("<unused_Dequant>")
                    return 0
                    ;;
                --Inc)
                    COMPREPLY=("<unused_Inc>")
                    return 0
                    ;;
                --SsResolOpt)
                    COMPREPLY=("<unused_SsResolOpt>")
                    return 0
                    ;;
                --DirMEC)
                    COMPREPLY=("<unused_DirMEC>")
                    return 0
                    ;;
                --PxMoy)
                    COMPREPLY=("<unused_PxMoy>")
                    return 0
                    ;;
                --ZoomInit)
                    COMPREPLY=("<unused_ZoomInit>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMByP)
            opts="--Zoom0 --ZoomF --Delaunay --FilePair --MMImSec --ImLine --ByStrip --StripIsFisrt --DeltaStrip --Sym --Show --Inc --TetaStrip --SMD --Do --ByMM1P --ImOfBox --BoxOfIm --ParMMI --QualOr --RIEPar --TimesExe --DCE --DebugMMByP --DoOMF --HasVeg --HasSBG --Masters --Masq3D --CalPerIm --PenPerIm --Purge --UseGpu --DefCor --ZReg --ExpTxt --ExpImSec  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Zoom0)
                    COMPREPLY=("<unused_Zoom0>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --Delaunay)
                    COMPREPLY=("<unused_Delaunay>")
                    return 0
                    ;;
                --FilePair)
                    COMPREPLY=("<unused_FilePair>")
                    return 0
                    ;;
                --MMImSec)
                    COMPREPLY=("<unused_MMImSec>")
                    return 0
                    ;;
                --ImLine)
                    COMPREPLY=("<unused_ImLine>")
                    return 0
                    ;;
                --ByStrip)
                    COMPREPLY=("<unused_ByStrip>")
                    return 0
                    ;;
                --StripIsFisrt)
                    COMPREPLY=("<unused_StripIsFisrt>")
                    return 0
                    ;;
                --DeltaStrip)
                    COMPREPLY=("<unused_DeltaStrip>")
                    return 0
                    ;;
                --Sym)
                    COMPREPLY=("<unused_Sym>")
                    return 0
                    ;;
                --Show)
                    COMPREPLY=("<unused_Show>")
                    return 0
                    ;;
                --Inc)
                    COMPREPLY=("<unused_Inc>")
                    return 0
                    ;;
                --TetaStrip)
                    COMPREPLY=("<unused_TetaStrip>")
                    return 0
                    ;;
                --SMD)
                    COMPREPLY=("<unused_SMD>")
                    return 0
                    ;;
                --Do)
                    COMPREPLY=("<unused_Do>")
                    return 0
                    ;;
                --ByMM1P)
                    COMPREPLY=("<unused_ByMM1P>")
                    return 0
                    ;;
                --ImOfBox)
                    COMPREPLY=("<unused_ImOfBox>")
                    return 0
                    ;;
                --BoxOfIm)
                    COMPREPLY=("<unused_BoxOfIm>")
                    return 0
                    ;;
                --ParMMI)
                    COMPREPLY=("<unused_ParMMI>")
                    return 0
                    ;;
                --QualOr)
                    COMPREPLY=("<unused_QualOr>")
                    return 0
                    ;;
                --RIEPar)
                    COMPREPLY=("<unused_RIEPar>")
                    return 0
                    ;;
                --TimesExe)
                    COMPREPLY=("<unused_TimesExe>")
                    return 0
                    ;;
                --DCE)
                    COMPREPLY=("<unused_DCE>")
                    return 0
                    ;;
                --DebugMMByP)
                    COMPREPLY=("<unused_DebugMMByP>")
                    return 0
                    ;;
                --DoOMF)
                    COMPREPLY=("<unused_DoOMF>")
                    return 0
                    ;;
                --HasVeg)
                    COMPREPLY=("<unused_HasVeg>")
                    return 0
                    ;;
                --HasSBG)
                    COMPREPLY=("<unused_HasSBG>")
                    return 0
                    ;;
                --Masters)
                    COMPREPLY=("<unused_Masters>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --CalPerIm)
                    COMPREPLY=("<unused_CalPerIm>")
                    return 0
                    ;;
                --PenPerIm)
                    COMPREPLY=("<unused_PenPerIm>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --UseGpu)
                    COMPREPLY=("<unused_UseGpu>")
                    return 0
                    ;;
                --DefCor)
                    COMPREPLY=("<unused_DefCor>")
                    return 0
                    ;;
                --ZReg)
                    COMPREPLY=("<unused_ZReg>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ExpImSec)
                    COMPREPLY=("<unused_ExpImSec>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMCalcSzWCor)
            opts="--P0 --Sz --Wsz --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --Wsz)
                    COMPREPLY=("<unused_Wsz>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMHomCorOri)
            opts="--Match --ZoomF  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Match)
                    COMPREPLY=("<unused_Match>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMInitialModel)
            opts="--Visu --DoPly --Zoom --ReduceExp --Do2Z --DoMatch --Masq3D --ExportEnv --DoPyram --SzW  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Visu)
                    COMPREPLY=("<unused_Visu>")
                    return 0
                    ;;
                --DoPly)
                    COMPREPLY=("<unused_DoPly>")
                    return 0
                    ;;
                --Zoom)
                    COMPREPLY=("<unused_Zoom>")
                    return 0
                    ;;
                --ReduceExp)
                    COMPREPLY=("<unused_ReduceExp>")
                    return 0
                    ;;
                --Do2Z)
                    COMPREPLY=("<unused_Do2Z>")
                    return 0
                    ;;
                --DoMatch)
                    COMPREPLY=("<unused_DoMatch>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --ExportEnv)
                    COMPREPLY=("<unused_ExportEnv>")
                    return 0
                    ;;
                --DoPyram)
                    COMPREPLY=("<unused_DoPyram>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMMergeCloud)
            opts="--Key --NbCelGraph --PercRecMin  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Key)
                    COMPREPLY=("<unused_Key>")
                    return 0
                    ;;
                --NbCelGraph)
                    COMPREPLY=("<unused_NbCelGraph>")
                    return 0
                    ;;
                --PercRecMin)
                    COMPREPLY=("<unused_PercRecMin>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMPyram)
            opts="--ImSec  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ImSec)
                    COMPREPLY=("<unused_ImSec>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMTestAllAuto)
            opts="--ZoomF  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMTestOrient)
            opts="--Dir --Zoom0 --ZoomF --PB --GB --MOri --ZMoy --ZInc --ShowCom --ExportDepl --DirMEC  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Dir)
                    COMPREPLY=("<unused_Dir>")
                    return 0
                    ;;
                --Zoom0)
                    COMPREPLY=("<unused_Zoom0>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --PB)
                    COMPREPLY=("<unused_PB>")
                    return 0
                    ;;
                --GB)
                    COMPREPLY=("<unused_GB>")
                    return 0
                    ;;
                --MOri)
                    COMPREPLY=("<unused_MOri>")
                    return 0
                    ;;
                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --ZInc)
                    COMPREPLY=("<unused_ZInc>")
                    return 0
                    ;;
                --ShowCom)
                    COMPREPLY=("<unused_ShowCom>")
                    return 0
                    ;;
                --ExportDepl)
                    COMPREPLY=("<unused_ExportDepl>")
                    return 0
                    ;;
                --DirMEC)
                    COMPREPLY=("<unused_DirMEC>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MMXmlXif)
            opts="--toto  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --toto)
                    COMPREPLY=("<unused_toto>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MPDtest)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MakeGrid)
            opts="--Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Malt)
            opts="--Master --SzW --CorMS --ForDeform --UseGpu --Regul --DirMEC --DirOF --UseTA --ZoomF --ZoomI --ZPas --Exe --Repere --NbVI --HrOr --LrOr --DirTA --Purge --DoMEC --DoOrtho --UnAnam --2Ortho --ZInc --DefCor --CostTrans --Etape0 --AffineLast --ResolOrtho --ImMNT --ImOrtho --ZMoy --Spherik --WMI --MasqIm --MasqImGlob --IncMax --BoxClip --BoxTerrain --ResolTerrain --RRI --RoundResol --GCC --EZA --Equiv --MOri --MaxFlow --SzRec --Masq3D --NbProc --PSIBN --InternalNoIncid --PtDebug --ForceZFais --VSND  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Master)
                    COMPREPLY=("<unused_Master>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --CorMS)
                    COMPREPLY=("<unused_CorMS>")
                    return 0
                    ;;
                --ForDeform)
                    COMPREPLY=("<unused_ForDeform>")
                    return 0
                    ;;
                --UseGpu)
                    COMPREPLY=("<unused_UseGpu>")
                    return 0
                    ;;
                --Regul)
                    COMPREPLY=("<unused_Regul>")
                    return 0
                    ;;
                --DirMEC)
                    COMPREPLY=("<unused_DirMEC>")
                    return 0
                    ;;
                --DirOF)
                    COMPREPLY=("<unused_DirOF>")
                    return 0
                    ;;
                --UseTA)
                    COMPREPLY=("<unused_UseTA>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --ZoomI)
                    COMPREPLY=("<unused_ZoomI>")
                    return 0
                    ;;
                --ZPas)
                    COMPREPLY=("<unused_ZPas>")
                    return 0
                    ;;
                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --Repere)
                    COMPREPLY=("<unused_Repere>")
                    return 0
                    ;;
                --NbVI)
                    COMPREPLY=("<unused_NbVI>")
                    return 0
                    ;;
                --HrOr)
                    COMPREPLY=("<unused_HrOr>")
                    return 0
                    ;;
                --LrOr)
                    COMPREPLY=("<unused_LrOr>")
                    return 0
                    ;;
                --DirTA)
                    COMPREPLY=("<unused_DirTA>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --DoMEC)
                    COMPREPLY=("<unused_DoMEC>")
                    return 0
                    ;;
                --DoOrtho)
                    COMPREPLY=("<unused_DoOrtho>")
                    return 0
                    ;;
                --UnAnam)
                    COMPREPLY=("<unused_UnAnam>")
                    return 0
                    ;;
                --2Ortho)
                    COMPREPLY=("<unused_2Ortho>")
                    return 0
                    ;;
                --ZInc)
                    COMPREPLY=("<unused_ZInc>")
                    return 0
                    ;;
                --DefCor)
                    COMPREPLY=("<unused_DefCor>")
                    return 0
                    ;;
                --CostTrans)
                    COMPREPLY=("<unused_CostTrans>")
                    return 0
                    ;;
                --Etape0)
                    COMPREPLY=("<unused_Etape0>")
                    return 0
                    ;;
                --AffineLast)
                    COMPREPLY=("<unused_AffineLast>")
                    return 0
                    ;;
                --ResolOrtho)
                    COMPREPLY=("<unused_ResolOrtho>")
                    return 0
                    ;;
                --ImMNT)
                    COMPREPLY=("<unused_ImMNT>")
                    return 0
                    ;;
                --ImOrtho)
                    COMPREPLY=("<unused_ImOrtho>")
                    return 0
                    ;;
                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --Spherik)
                    COMPREPLY=("<unused_Spherik>")
                    return 0
                    ;;
                --WMI)
                    COMPREPLY=("<unused_WMI>")
                    return 0
                    ;;
                --MasqIm)
                    COMPREPLY=("<unused_MasqIm>")
                    return 0
                    ;;
                --MasqImGlob)
                    COMPREPLY=("<unused_MasqImGlob>")
                    return 0
                    ;;
                --IncMax)
                    COMPREPLY=("<unused_IncMax>")
                    return 0
                    ;;
                --BoxClip)
                    COMPREPLY=("<unused_BoxClip>")
                    return 0
                    ;;
                --BoxTerrain)
                    COMPREPLY=("<unused_BoxTerrain>")
                    return 0
                    ;;
                --ResolTerrain)
                    COMPREPLY=("<unused_ResolTerrain>")
                    return 0
                    ;;
                --RRI)
                    COMPREPLY=("<unused_RRI>")
                    return 0
                    ;;
                --RoundResol)
                    COMPREPLY=("<unused_RoundResol>")
                    return 0
                    ;;
                --GCC)
                    COMPREPLY=("<unused_GCC>")
                    return 0
                    ;;
                --EZA)
                    COMPREPLY=("<unused_EZA>")
                    return 0
                    ;;
                --Equiv)
                    COMPREPLY=("<unused_Equiv>")
                    return 0
                    ;;
                --MOri)
                    COMPREPLY=("<unused_MOri>")
                    return 0
                    ;;
                --MaxFlow)
                    COMPREPLY=("<unused_MaxFlow>")
                    return 0
                    ;;
                --SzRec)
                    COMPREPLY=("<unused_SzRec>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --NbProc)
                    COMPREPLY=("<unused_NbProc>")
                    return 0
                    ;;
                --PSIBN)
                    COMPREPLY=("<unused_PSIBN>")
                    return 0
                    ;;
                --InternalNoIncid)
                    COMPREPLY=("<unused_InternalNoIncid>")
                    return 0
                    ;;
                --PtDebug)
                    COMPREPLY=("<unused_PtDebug>")
                    return 0
                    ;;
                --ForceZFais)
                    COMPREPLY=("<unused_ForceZFais>")
                    return 0
                    ;;
                --VSND)
                    COMPREPLY=("<unused_VSND>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MapCmd)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Martini)
            opts="--OriCalib --Exe --SH --ExtName --ModeNO  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --OriCalib)
                    COMPREPLY=("<unused_OriCalib>")
                    return 0
                    ;;
                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --ExtName)
                    COMPREPLY=("<unused_ExtName>")
                    return 0
                    ;;
                --ModeNO)
                    COMPREPLY=("<unused_ModeNO>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MartiniGin)
            opts="--OriCalib --Exe --SH --ExtName --ModeNO  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --OriCalib)
                    COMPREPLY=("<unused_OriCalib>")
                    return 0
                    ;;
                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --ExtName)
                    COMPREPLY=("<unused_ExtName>")
                    return 0
                    ;;
                --ModeNO)
                    COMPREPLY=("<unused_ModeNO>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MasqMaker)
            opts="--MasqSup --SzW  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --MasqSup)
                    COMPREPLY=("<unused_MasqSup>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MergeDepthMap)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MergeHomol)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MergePly)
            opts="--Out --Bin  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Bin)
                    COMPREPLY=("<unused_Bin>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MeshProjOnImg)
            opts="--zoomF --oriTri --click --ptsInteret --SH  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --zoomF)
                    COMPREPLY=("<unused_zoomF>")
                    return 0
                    ;;
                --oriTri)
                    COMPREPLY=("<unused_oriTri>")
                    return 0
                    ;;
                --click)
                    COMPREPLY=("<unused_click>")
                    return 0
                    ;;
                --ptsInteret)
                    COMPREPLY=("<unused_ptsInteret>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Morito)
            opts="--WithOutLayer --Dir  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --WithOutLayer)
                    COMPREPLY=("<unused_WithOutLayer>")
                    return 0
                    ;;
                --Dir)
                    COMPREPLY=("<unused_Dir>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MpDcraw)
            opts="--Exe --IC --Purge --Add --Rev --DOIDE --MkF --MkAdd --IsRelancedByThis  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --IC)
                    COMPREPLY=("<unused_IC>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --Add)
                    COMPREPLY=("<unused_Add>")
                    return 0
                    ;;
                --Rev)
                    COMPREPLY=("<unused_Rev>")
                    return 0
                    ;;
                --DOIDE)
                    COMPREPLY=("<unused_DOIDE>")
                    return 0
                    ;;
                --MkF)
                    COMPREPLY=("<unused_MkF>")
                    return 0
                    ;;
                --MkAdd)
                    COMPREPLY=("<unused_MkAdd>")
                    return 0
                    ;;
                --IsRelancedByThis)
                    COMPREPLY=("<unused_IsRelancedByThis>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__MyRename)
            opts="--Exe --Niv --F --FD --AddFoc --Mod --File2M --Full --LastFirst --PrfNum --PatSub  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --Niv)
                    COMPREPLY=("<unused_Niv>")
                    return 0
                    ;;
                --F)
                    COMPREPLY=("<unused_F>")
                    return 0
                    ;;
                --FD)
                    COMPREPLY=("<unused_FD>")
                    return 0
                    ;;
                --AddFoc)
                    COMPREPLY=("<unused_AddFoc>")
                    return 0
                    ;;
                --Mod)
                    COMPREPLY=("<unused_Mod>")
                    return 0
                    ;;
                --File2M)
                    COMPREPLY=("<unused_File2M>")
                    return 0
                    ;;
                --Full)
                    COMPREPLY=("<unused_Full>")
                    return 0
                    ;;
                --LastFirst)
                    COMPREPLY=("<unused_LastFirst>")
                    return 0
                    ;;
                --PrfNum)
                    COMPREPLY=("<unused_PrfNum>")
                    return 0
                    ;;
                --PatSub)
                    COMPREPLY=("<unused_PatSub>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__NewTapas)
            opts="--ExpTxt --Out --InCal --InOri --DoC --ForCalib --Focs --VitesseInit --PPRel --Decentre --PropDiag --SauvAutom --ImInit --MOI --DBF --Debug --DegRadMax --DegGen --LibAff --LibDec --LibPP --LibCP --LibFoc --RapTxt --LinkPPaPPs --FrozenPoses --FreeCalibInit --FrozenCalibs --FreeCalibs --SH --RefineAll --ImMinMax --EcMax --EcInit --CondMaxPano --SinglePos --RankInitF --RankInitPP --RegulDist --MulLVM  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --InCal)
                    COMPREPLY=("<unused_InCal>")
                    return 0
                    ;;
                --InOri)
                    COMPREPLY=("<unused_InOri>")
                    return 0
                    ;;
                --DoC)
                    COMPREPLY=("<unused_DoC>")
                    return 0
                    ;;
                --ForCalib)
                    COMPREPLY=("<unused_ForCalib>")
                    return 0
                    ;;
                --Focs)
                    COMPREPLY=("<unused_Focs>")
                    return 0
                    ;;
                --VitesseInit)
                    COMPREPLY=("<unused_VitesseInit>")
                    return 0
                    ;;
                --PPRel)
                    COMPREPLY=("<unused_PPRel>")
                    return 0
                    ;;
                --Decentre)
                    COMPREPLY=("<unused_Decentre>")
                    return 0
                    ;;
                --PropDiag)
                    COMPREPLY=("<unused_PropDiag>")
                    return 0
                    ;;
                --SauvAutom)
                    COMPREPLY=("<unused_SauvAutom>")
                    return 0
                    ;;
                --ImInit)
                    COMPREPLY=("<unused_ImInit>")
                    return 0
                    ;;
                --MOI)
                    COMPREPLY=("<unused_MOI>")
                    return 0
                    ;;
                --DBF)
                    COMPREPLY=("<unused_DBF>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --DegRadMax)
                    COMPREPLY=("<unused_DegRadMax>")
                    return 0
                    ;;
                --DegGen)
                    COMPREPLY=("<unused_DegGen>")
                    return 0
                    ;;
                --LibAff)
                    COMPREPLY=("<unused_LibAff>")
                    return 0
                    ;;
                --LibDec)
                    COMPREPLY=("<unused_LibDec>")
                    return 0
                    ;;
                --LibPP)
                    COMPREPLY=("<unused_LibPP>")
                    return 0
                    ;;
                --LibCP)
                    COMPREPLY=("<unused_LibCP>")
                    return 0
                    ;;
                --LibFoc)
                    COMPREPLY=("<unused_LibFoc>")
                    return 0
                    ;;
                --RapTxt)
                    COMPREPLY=("<unused_RapTxt>")
                    return 0
                    ;;
                --LinkPPaPPs)
                    COMPREPLY=("<unused_LinkPPaPPs>")
                    return 0
                    ;;
                --FrozenPoses)
                    COMPREPLY=("<unused_FrozenPoses>")
                    return 0
                    ;;
                --FreeCalibInit)
                    COMPREPLY=("<unused_FreeCalibInit>")
                    return 0
                    ;;
                --FrozenCalibs)
                    COMPREPLY=("<unused_FrozenCalibs>")
                    return 0
                    ;;
                --FreeCalibs)
                    COMPREPLY=("<unused_FreeCalibs>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --RefineAll)
                    COMPREPLY=("<unused_RefineAll>")
                    return 0
                    ;;
                --ImMinMax)
                    COMPREPLY=("<unused_ImMinMax>")
                    return 0
                    ;;
                --EcMax)
                    COMPREPLY=("<unused_EcMax>")
                    return 0
                    ;;
                --EcInit)
                    COMPREPLY=("<unused_EcInit>")
                    return 0
                    ;;
                --CondMaxPano)
                    COMPREPLY=("<unused_CondMaxPano>")
                    return 0
                    ;;
                --SinglePos)
                    COMPREPLY=("<unused_SinglePos>")
                    return 0
                    ;;
                --RankInitF)
                    COMPREPLY=("<unused_RankInitF>")
                    return 0
                    ;;
                --RankInitPP)
                    COMPREPLY=("<unused_RankInitPP>")
                    return 0
                    ;;
                --RegulDist)
                    COMPREPLY=("<unused_RegulDist>")
                    return 0
                    ;;
                --MulLVM)
                    COMPREPLY=("<unused_MulLVM>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Nuage2Ply)
            opts="--Sz --P0 --Out --Scale --Attr --Comments --Bin --Mask --SeuilMask --Dyn --DoPly --DoXYZ --Normale --NormByC --ExagZ --RatioAttrCarte --Mesh --64B --Offs --NeighMask --ForceRGB  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Scale)
                    COMPREPLY=("<unused_Scale>")
                    return 0
                    ;;
                --Attr)
                    COMPREPLY=("<unused_Attr>")
                    return 0
                    ;;
                --Comments)
                    COMPREPLY=("<unused_Comments>")
                    return 0
                    ;;
                --Bin)
                    COMPREPLY=("<unused_Bin>")
                    return 0
                    ;;
                --Mask)
                    COMPREPLY=("<unused_Mask>")
                    return 0
                    ;;
                --SeuilMask)
                    COMPREPLY=("<unused_SeuilMask>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --DoPly)
                    COMPREPLY=("<unused_DoPly>")
                    return 0
                    ;;
                --DoXYZ)
                    COMPREPLY=("<unused_DoXYZ>")
                    return 0
                    ;;
                --Normale)
                    COMPREPLY=("<unused_Normale>")
                    return 0
                    ;;
                --NormByC)
                    COMPREPLY=("<unused_NormByC>")
                    return 0
                    ;;
                --ExagZ)
                    COMPREPLY=("<unused_ExagZ>")
                    return 0
                    ;;
                --RatioAttrCarte)
                    COMPREPLY=("<unused_RatioAttrCarte>")
                    return 0
                    ;;
                --Mesh)
                    COMPREPLY=("<unused_Mesh>")
                    return 0
                    ;;
                --64B)
                    COMPREPLY=("<unused_64B>")
                    return 0
                    ;;
                --Offs)
                    COMPREPLY=("<unused_Offs>")
                    return 0
                    ;;
                --NeighMask)
                    COMPREPLY=("<unused_NeighMask>")
                    return 0
                    ;;
                --ForceRGB)
                    COMPREPLY=("<unused_ForceRGB>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__NuageBascule)
            opts="--ByP --AutoResize --AutoClipIn --BoxIn --SzDecoup --InternallCalledByP --InternalATopo --InternallSuplOut --ShowCom --Debug --TileFile --Paral --SeuilE --SaveImEtrir  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ByP)
                    COMPREPLY=("<unused_ByP>")
                    return 0
                    ;;
                --AutoResize)
                    COMPREPLY=("<unused_AutoResize>")
                    return 0
                    ;;
                --AutoClipIn)
                    COMPREPLY=("<unused_AutoClipIn>")
                    return 0
                    ;;
                --BoxIn)
                    COMPREPLY=("<unused_BoxIn>")
                    return 0
                    ;;
                --SzDecoup)
                    COMPREPLY=("<unused_SzDecoup>")
                    return 0
                    ;;
                --InternallCalledByP)
                    COMPREPLY=("<unused_InternallCalledByP>")
                    return 0
                    ;;
                --InternalATopo)
                    COMPREPLY=("<unused_InternalATopo>")
                    return 0
                    ;;
                --InternallSuplOut)
                    COMPREPLY=("<unused_InternallSuplOut>")
                    return 0
                    ;;
                --ShowCom)
                    COMPREPLY=("<unused_ShowCom>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --TileFile)
                    COMPREPLY=("<unused_TileFile>")
                    return 0
                    ;;
                --Paral)
                    COMPREPLY=("<unused_Paral>")
                    return 0
                    ;;
                --SeuilE)
                    COMPREPLY=("<unused_SeuilE>")
                    return 0
                    ;;
                --SaveImEtrir)
                    COMPREPLY=("<unused_SaveImEtrir>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__OldTapas)
            opts="--ExpTxt --Out --InCal --InOri --DoC --ForCalib --Focs --VitesseInit --PPRel --Decentre --PropDiag --SauvAutom --ImInit --MOI --DBF --Debug --DegRadMax --LibAff --LibDec --LibPP --LibCP --LibFoc --RapTxt --LinkPPaPPs --FrozenPoses --SH --MulLVM  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --InCal)
                    COMPREPLY=("<unused_InCal>")
                    return 0
                    ;;
                --InOri)
                    COMPREPLY=("<unused_InOri>")
                    return 0
                    ;;
                --DoC)
                    COMPREPLY=("<unused_DoC>")
                    return 0
                    ;;
                --ForCalib)
                    COMPREPLY=("<unused_ForCalib>")
                    return 0
                    ;;
                --Focs)
                    COMPREPLY=("<unused_Focs>")
                    return 0
                    ;;
                --VitesseInit)
                    COMPREPLY=("<unused_VitesseInit>")
                    return 0
                    ;;
                --PPRel)
                    COMPREPLY=("<unused_PPRel>")
                    return 0
                    ;;
                --Decentre)
                    COMPREPLY=("<unused_Decentre>")
                    return 0
                    ;;
                --PropDiag)
                    COMPREPLY=("<unused_PropDiag>")
                    return 0
                    ;;
                --SauvAutom)
                    COMPREPLY=("<unused_SauvAutom>")
                    return 0
                    ;;
                --ImInit)
                    COMPREPLY=("<unused_ImInit>")
                    return 0
                    ;;
                --MOI)
                    COMPREPLY=("<unused_MOI>")
                    return 0
                    ;;
                --DBF)
                    COMPREPLY=("<unused_DBF>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --DegRadMax)
                    COMPREPLY=("<unused_DegRadMax>")
                    return 0
                    ;;
                --LibAff)
                    COMPREPLY=("<unused_LibAff>")
                    return 0
                    ;;
                --LibDec)
                    COMPREPLY=("<unused_LibDec>")
                    return 0
                    ;;
                --LibPP)
                    COMPREPLY=("<unused_LibPP>")
                    return 0
                    ;;
                --LibCP)
                    COMPREPLY=("<unused_LibCP>")
                    return 0
                    ;;
                --LibFoc)
                    COMPREPLY=("<unused_LibFoc>")
                    return 0
                    ;;
                --RapTxt)
                    COMPREPLY=("<unused_RapTxt>")
                    return 0
                    ;;
                --LinkPPaPPs)
                    COMPREPLY=("<unused_LinkPPaPPs>")
                    return 0
                    ;;
                --FrozenPoses)
                    COMPREPLY=("<unused_FrozenPoses>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --MulLVM)
                    COMPREPLY=("<unused_MulLVM>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Ori2Xml)
            opts="--toto  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --toto)
                    COMPREPLY=("<unused_toto>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__OriConvert)
            opts="--ChSys --Calib --AddCalib --ConvOri --PrePost --KN2I --DN --ImC --NbImC --RedSizeSC --Reexp --Regul --RegNewBr --Reliab --CalcV --Delay --TFC --RefOri --SiftR --SiftLR --NameCple --Delaunay --DelaunayCross --Cpt --UOC --MTD1 --Line --CBF --AltiSol --Prof --OffsetXY --CalOFC --OkNoIm --SzW  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ChSys)
                    COMPREPLY=("<unused_ChSys>")
                    return 0
                    ;;
                --Calib)
                    COMPREPLY=("<unused_Calib>")
                    return 0
                    ;;
                --AddCalib)
                    COMPREPLY=("<unused_AddCalib>")
                    return 0
                    ;;
                --ConvOri)
                    COMPREPLY=("<unused_ConvOri>")
                    return 0
                    ;;
                --PrePost)
                    COMPREPLY=("<unused_PrePost>")
                    return 0
                    ;;
                --KN2I)
                    COMPREPLY=("<unused_KN2I>")
                    return 0
                    ;;
                --DN)
                    COMPREPLY=("<unused_DN>")
                    return 0
                    ;;
                --ImC)
                    COMPREPLY=("<unused_ImC>")
                    return 0
                    ;;
                --NbImC)
                    COMPREPLY=("<unused_NbImC>")
                    return 0
                    ;;
                --RedSizeSC)
                    COMPREPLY=("<unused_RedSizeSC>")
                    return 0
                    ;;
                --Reexp)
                    COMPREPLY=("<unused_Reexp>")
                    return 0
                    ;;
                --Regul)
                    COMPREPLY=("<unused_Regul>")
                    return 0
                    ;;
                --RegNewBr)
                    COMPREPLY=("<unused_RegNewBr>")
                    return 0
                    ;;
                --Reliab)
                    COMPREPLY=("<unused_Reliab>")
                    return 0
                    ;;
                --CalcV)
                    COMPREPLY=("<unused_CalcV>")
                    return 0
                    ;;
                --Delay)
                    COMPREPLY=("<unused_Delay>")
                    return 0
                    ;;
                --TFC)
                    COMPREPLY=("<unused_TFC>")
                    return 0
                    ;;
                --RefOri)
                    COMPREPLY=("<unused_RefOri>")
                    return 0
                    ;;
                --SiftR)
                    COMPREPLY=("<unused_SiftR>")
                    return 0
                    ;;
                --SiftLR)
                    COMPREPLY=("<unused_SiftLR>")
                    return 0
                    ;;
                --NameCple)
                    COMPREPLY=("<unused_NameCple>")
                    return 0
                    ;;
                --Delaunay)
                    COMPREPLY=("<unused_Delaunay>")
                    return 0
                    ;;
                --DelaunayCross)
                    COMPREPLY=("<unused_DelaunayCross>")
                    return 0
                    ;;
                --Cpt)
                    COMPREPLY=("<unused_Cpt>")
                    return 0
                    ;;
                --UOC)
                    COMPREPLY=("<unused_UOC>")
                    return 0
                    ;;
                --MTD1)
                    COMPREPLY=("<unused_MTD1>")
                    return 0
                    ;;
                --Line)
                    COMPREPLY=("<unused_Line>")
                    return 0
                    ;;
                --CBF)
                    COMPREPLY=("<unused_CBF>")
                    return 0
                    ;;
                --AltiSol)
                    COMPREPLY=("<unused_AltiSol>")
                    return 0
                    ;;
                --Prof)
                    COMPREPLY=("<unused_Prof>")
                    return 0
                    ;;
                --OffsetXY)
                    COMPREPLY=("<unused_OffsetXY>")
                    return 0
                    ;;
                --CalOFC)
                    COMPREPLY=("<unused_CalOFC>")
                    return 0
                    ;;
                --OkNoIm)
                    COMPREPLY=("<unused_OkNoIm>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__OriExport)
            opts="--AddF --ModeExp --OnlyCenters --OnlyAngles  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --AddF)
                    COMPREPLY=("<unused_AddF>")
                    return 0
                    ;;
                --ModeExp)
                    COMPREPLY=("<unused_ModeExp>")
                    return 0
                    ;;
                --OnlyCenters)
                    COMPREPLY=("<unused_OnlyCenters>")
                    return 0
                    ;;
                --OnlyAngles)
                    COMPREPLY=("<unused_OnlyAngles>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__OriRedTieP)
            opts="--OriCalib --Prec2P --KBox --SzTile --DistPMul --MVG --Paral --VerifNM --FromRG --FromRB --LevelOr --Debug --DCA --UseP  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --OriCalib)
                    COMPREPLY=("<unused_OriCalib>")
                    return 0
                    ;;
                --Prec2P)
                    COMPREPLY=("<unused_Prec2P>")
                    return 0
                    ;;
                --KBox)
                    COMPREPLY=("<unused_KBox>")
                    return 0
                    ;;
                --SzTile)
                    COMPREPLY=("<unused_SzTile>")
                    return 0
                    ;;
                --DistPMul)
                    COMPREPLY=("<unused_DistPMul>")
                    return 0
                    ;;
                --MVG)
                    COMPREPLY=("<unused_MVG>")
                    return 0
                    ;;
                --Paral)
                    COMPREPLY=("<unused_Paral>")
                    return 0
                    ;;
                --VerifNM)
                    COMPREPLY=("<unused_VerifNM>")
                    return 0
                    ;;
                --FromRG)
                    COMPREPLY=("<unused_FromRG>")
                    return 0
                    ;;
                --FromRB)
                    COMPREPLY=("<unused_FromRB>")
                    return 0
                    ;;
                --LevelOr)
                    COMPREPLY=("<unused_LevelOr>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --DCA)
                    COMPREPLY=("<unused_DCA>")
                    return 0
                    ;;
                --UseP)
                    COMPREPLY=("<unused_UseP>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PHO_MI)
            opts="--HomolIn --ExpTxt --HomolOut --Strategie --Dist --DistHom --PropDiag --CorelThres --SizeVignette --DispVignette --By1Img --TauxGood --Autour  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --HomolIn)
                    COMPREPLY=("<unused_HomolIn>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --HomolOut)
                    COMPREPLY=("<unused_HomolOut>")
                    return 0
                    ;;
                --Strategie)
                    COMPREPLY=("<unused_Strategie>")
                    return 0
                    ;;
                --Dist)
                    COMPREPLY=("<unused_Dist>")
                    return 0
                    ;;
                --DistHom)
                    COMPREPLY=("<unused_DistHom>")
                    return 0
                    ;;
                --PropDiag)
                    COMPREPLY=("<unused_PropDiag>")
                    return 0
                    ;;
                --CorelThres)
                    COMPREPLY=("<unused_CorelThres>")
                    return 0
                    ;;
                --SizeVignette)
                    COMPREPLY=("<unused_SizeVignette>")
                    return 0
                    ;;
                --DispVignette)
                    COMPREPLY=("<unused_DispVignette>")
                    return 0
                    ;;
                --By1Img)
                    COMPREPLY=("<unused_By1Img>")
                    return 0
                    ;;
                --TauxGood)
                    COMPREPLY=("<unused_TauxGood>")
                    return 0
                    ;;
                --Autour)
                    COMPREPLY=("<unused_Autour>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PIMs)
            opts="--Masq3D --Tuning --Purge --ZoomF --UseGpu --DefCor --ZReg --ExpTxt --FilePair --DebugMMByP --ExpImSec --OffsetPly --SzW  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --Tuning)
                    COMPREPLY=("<unused_Tuning>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --UseGpu)
                    COMPREPLY=("<unused_UseGpu>")
                    return 0
                    ;;
                --DefCor)
                    COMPREPLY=("<unused_DefCor>")
                    return 0
                    ;;
                --ZReg)
                    COMPREPLY=("<unused_ZReg>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --FilePair)
                    COMPREPLY=("<unused_FilePair>")
                    return 0
                    ;;
                --DebugMMByP)
                    COMPREPLY=("<unused_DebugMMByP>")
                    return 0
                    ;;
                --ExpImSec)
                    COMPREPLY=("<unused_ExpImSec>")
                    return 0
                    ;;
                --OffsetPly)
                    COMPREPLY=("<unused_OffsetPly>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PIMs2Mnt)
            opts="--DS --ZReg --Repere --Pat --DoMnt --DoOrtho --MasqImGlob --Debug --UseTA --RI --SeuilE  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --DS)
                    COMPREPLY=("<unused_DS>")
                    return 0
                    ;;
                --ZReg)
                    COMPREPLY=("<unused_ZReg>")
                    return 0
                    ;;
                --Repere)
                    COMPREPLY=("<unused_Repere>")
                    return 0
                    ;;
                --Pat)
                    COMPREPLY=("<unused_Pat>")
                    return 0
                    ;;
                --DoMnt)
                    COMPREPLY=("<unused_DoMnt>")
                    return 0
                    ;;
                --DoOrtho)
                    COMPREPLY=("<unused_DoOrtho>")
                    return 0
                    ;;
                --MasqImGlob)
                    COMPREPLY=("<unused_MasqImGlob>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --UseTA)
                    COMPREPLY=("<unused_UseTA>")
                    return 0
                    ;;
                --RI)
                    COMPREPLY=("<unused_RI>")
                    return 0
                    ;;
                --SeuilE)
                    COMPREPLY=("<unused_SeuilE>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PIMs2Ply)
            opts="--DS --Out --Pat --OffsetPly  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --DS)
                    COMPREPLY=("<unused_DS>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Pat)
                    COMPREPLY=("<unused_Pat>")
                    return 0
                    ;;
                --OffsetPly)
                    COMPREPLY=("<unused_OffsetPly>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PanelIm)
            opts="--Border --NbL --Res --Scale --Fond --Gray  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Border)
                    COMPREPLY=("<unused_Border>")
                    return 0
                    ;;
                --NbL)
                    COMPREPLY=("<unused_NbL>")
                    return 0
                    ;;
                --Res)
                    COMPREPLY=("<unused_Res>")
                    return 0
                    ;;
                --Scale)
                    COMPREPLY=("<unused_Scale>")
                    return 0
                    ;;
                --Fond)
                    COMPREPLY=("<unused_Fond>")
                    return 0
                    ;;
                --Gray)
                    COMPREPLY=("<unused_Gray>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PastDevlop)
            opts="--Sz1 --Sz2 --Coul8B  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Sz1)
                    COMPREPLY=("<unused_Sz1>")
                    return 0
                    ;;
                --Sz2)
                    COMPREPLY=("<unused_Sz2>")
                    return 0
                    ;;
                --Coul8B)
                    COMPREPLY=("<unused_Coul8B>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Pasta)
            opts="--ExpTxt --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Pastis)
            opts="--Exe --IC --Purge --Add --Rev --DOIDE --MkF --MkAdd --IsRelancedByThis  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                --IC)
                    COMPREPLY=("<unused_IC>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                --Add)
                    COMPREPLY=("<unused_Add>")
                    return 0
                    ;;
                --Rev)
                    COMPREPLY=("<unused_Rev>")
                    return 0
                    ;;
                --DOIDE)
                    COMPREPLY=("<unused_DOIDE>")
                    return 0
                    ;;
                --MkF)
                    COMPREPLY=("<unused_MkF>")
                    return 0
                    ;;
                --MkAdd)
                    COMPREPLY=("<unused_MkAdd>")
                    return 0
                    ;;
                --IsRelancedByThis)
                    COMPREPLY=("<unused_IsRelancedByThis>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PatFromOri)
            opts="--Show  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Show)
                    COMPREPLY=("<unused_Show>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__PointeInitPolyg)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Porto)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Prep4masq)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Ratafia)
            opts="--OriCalib --LevelOR --NbP --RecMax --ShowP --SzPixDec --TEO --Out --DistPMul --MVG --Paral --DCA --UseP --ProbaSel  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --OriCalib)
                    COMPREPLY=("<unused_OriCalib>")
                    return 0
                    ;;
                --LevelOR)
                    COMPREPLY=("<unused_LevelOR>")
                    return 0
                    ;;
                --NbP)
                    COMPREPLY=("<unused_NbP>")
                    return 0
                    ;;
                --RecMax)
                    COMPREPLY=("<unused_RecMax>")
                    return 0
                    ;;
                --ShowP)
                    COMPREPLY=("<unused_ShowP>")
                    return 0
                    ;;
                --SzPixDec)
                    COMPREPLY=("<unused_SzPixDec>")
                    return 0
                    ;;
                --TEO)
                    COMPREPLY=("<unused_TEO>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --DistPMul)
                    COMPREPLY=("<unused_DistPMul>")
                    return 0
                    ;;
                --MVG)
                    COMPREPLY=("<unused_MVG>")
                    return 0
                    ;;
                --Paral)
                    COMPREPLY=("<unused_Paral>")
                    return 0
                    ;;
                --DCA)
                    COMPREPLY=("<unused_DCA>")
                    return 0
                    ;;
                --UseP)
                    COMPREPLY=("<unused_UseP>")
                    return 0
                    ;;
                --ProbaSel)
                    COMPREPLY=("<unused_ProbaSel>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ReSampFid)
            opts="--BoxCh --Kern --AttrMasq  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --BoxCh)
                    COMPREPLY=("<unused_BoxCh>")
                    return 0
                    ;;
                --Kern)
                    COMPREPLY=("<unused_Kern>")
                    return 0
                    ;;
                --AttrMasq)
                    COMPREPLY=("<unused_AttrMasq>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__RechCibleDRad)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__RechCibleInit)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__RedTieP)
            opts="--NumPointsX --NumPointsY --Adaptive --SubcommandIndex --ExpSubCom --ExpTxt --SortByNum --Desc --WeightAccGain --MinNumHomol  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NumPointsX)
                    COMPREPLY=("<unused_NumPointsX>")
                    return 0
                    ;;
                --NumPointsY)
                    COMPREPLY=("<unused_NumPointsY>")
                    return 0
                    ;;
                --Adaptive)
                    COMPREPLY=("<unused_Adaptive>")
                    return 0
                    ;;
                --SubcommandIndex)
                    COMPREPLY=("<unused_SubcommandIndex>")
                    return 0
                    ;;
                --ExpSubCom)
                    COMPREPLY=("<unused_ExpSubCom>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --SortByNum)
                    COMPREPLY=("<unused_SortByNum>")
                    return 0
                    ;;
                --Desc)
                    COMPREPLY=("<unused_Desc>")
                    return 0
                    ;;
                --WeightAccGain)
                    COMPREPLY=("<unused_WeightAccGain>")
                    return 0
                    ;;
                --MinNumHomol)
                    COMPREPLY=("<unused_MinNumHomol>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Reduc2MM)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ReducHom)
            opts="--ImpTxt --ExpTxt --ExtH --NbMinHom --SeuilQual --RatioQualMoy  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ImpTxt)
                    COMPREPLY=("<unused_ImpTxt>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ExtH)
                    COMPREPLY=("<unused_ExtH>")
                    return 0
                    ;;
                --NbMinHom)
                    COMPREPLY=("<unused_NbMinHom>")
                    return 0
                    ;;
                --SeuilQual)
                    COMPREPLY=("<unused_SeuilQual>")
                    return 0
                    ;;
                --RatioQualMoy)
                    COMPREPLY=("<unused_RatioQualMoy>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__RepLocBascule)
            opts="--ExpTxt --PostPlan --OrthoCyl  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --PostPlan)
                    COMPREPLY=("<unused_PostPlan>")
                    return 0
                    ;;
                --OrthoCyl)
                    COMPREPLY=("<unused_OrthoCyl>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ReprojImg)
            opts="--AutoMask --DepthRepImage --KeepGreen --LutSqrt --Out --CoulourImgScale  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --AutoMask)
                    COMPREPLY=("<unused_AutoMask>")
                    return 0
                    ;;
                --DepthRepImage)
                    COMPREPLY=("<unused_DepthRepImage>")
                    return 0
                    ;;
                --KeepGreen)
                    COMPREPLY=("<unused_KeepGreen>")
                    return 0
                    ;;
                --LutSqrt)
                    COMPREPLY=("<unused_LutSqrt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --CoulourImgScale)
                    COMPREPLY=("<unused_CoulourImgScale>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SBGlobBascule)
            opts="--ExpTxt --PostPlan --DistFS --Rep --CPI  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --PostPlan)
                    COMPREPLY=("<unused_PostPlan>")
                    return 0
                    ;;
                --DistFS)
                    COMPREPLY=("<unused_DistFS>")
                    return 0
                    ;;
                --Rep)
                    COMPREPLY=("<unused_Rep>")
                    return 0
                    ;;
                --CPI)
                    COMPREPLY=("<unused_CPI>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SEL)
            opts="--R --RL1 --F --KH --KCpl --SzW --ModeEpip --SH  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --R)
                    COMPREPLY=("<unused_R>")
                    return 0
                    ;;
                --RL1)
                    COMPREPLY=("<unused_RL1>")
                    return 0
                    ;;
                --F)
                    COMPREPLY=("<unused_F>")
                    return 0
                    ;;
                --KH)
                    COMPREPLY=("<unused_KH>")
                    return 0
                    ;;
                --KCpl)
                    COMPREPLY=("<unused_KCpl>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --ModeEpip)
                    COMPREPLY=("<unused_ModeEpip>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SMDM)
            opts="--TargetGeom --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --TargetGeom)
                    COMPREPLY=("<unused_TargetGeom>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieAppuisInit)
            opts="--SzW --NbF --NameAuto --Pref2Add --ForceGray --OriMode --ZMoy --ZInc --InputSec  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --NameAuto)
                    COMPREPLY=("<unused_NameAuto>")
                    return 0
                    ;;
                --Pref2Add)
                    COMPREPLY=("<unused_Pref2Add>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                --OriMode)
                    COMPREPLY=("<unused_OriMode>")
                    return 0
                    ;;
                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --ZInc)
                    COMPREPLY=("<unused_ZInc>")
                    return 0
                    ;;
                --InputSec)
                    COMPREPLY=("<unused_InputSec>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieAppuisInitQT)
            opts="--SzW --NbF --NameAuto --ForceGray --OriMode --ZMoy --ZInc  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --NameAuto)
                    COMPREPLY=("<unused_NameAuto>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                --OriMode)
                    COMPREPLY=("<unused_OriMode>")
                    return 0
                    ;;
                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --ZInc)
                    COMPREPLY=("<unused_ZInc>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieAppuisPredic)
            opts="--SzW --NbF --WBlur --Type --ForceGray --OriMode --ZMoy --ZInc --Masq3D --PIMsF --InputSec  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --WBlur)
                    COMPREPLY=("<unused_WBlur>")
                    return 0
                    ;;
                --Type)
                    COMPREPLY=("<unused_Type>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                --OriMode)
                    COMPREPLY=("<unused_OriMode>")
                    return 0
                    ;;
                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --ZInc)
                    COMPREPLY=("<unused_ZInc>")
                    return 0
                    ;;
                --Masq3D)
                    COMPREPLY=("<unused_Masq3D>")
                    return 0
                    ;;
                --PIMsF)
                    COMPREPLY=("<unused_PIMsF>")
                    return 0
                    ;;
                --InputSec)
                    COMPREPLY=("<unused_InputSec>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieAppuisPredicQT)
            opts="--SzW --NbF --WBlur --Type --ForceGray  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --WBlur)
                    COMPREPLY=("<unused_WBlur>")
                    return 0
                    ;;
                --Type)
                    COMPREPLY=("<unused_Type>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieBasc)
            opts="--SzW --NbF --ForceGray  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieBascQT)
            opts="--SzW --NbF --ForceGray  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieBoxQT)
            opts="--SzW --Post --Name --Gama  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --Post)
                    COMPREPLY=("<unused_Post>")
                    return 0
                    ;;
                --Name)
                    COMPREPLY=("<unused_Name>")
                    return 0
                    ;;
                --Gama)
                    COMPREPLY=("<unused_Gama>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieCyl)
            opts="--SzW --NbF --ForceGray  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieCylQT)
            opts="--SzW --NbF --ForceGray  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --NbF)
                    COMPREPLY=("<unused_NbF>")
                    return 0
                    ;;
                --ForceGray)
                    COMPREPLY=("<unused_ForceGray>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieMasq)
            opts="--SzW --Post --Name --Gama --Attr  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --Post)
                    COMPREPLY=("<unused_Post>")
                    return 0
                    ;;
                --Name)
                    COMPREPLY=("<unused_Name>")
                    return 0
                    ;;
                --Gama)
                    COMPREPLY=("<unused_Gama>")
                    return 0
                    ;;
                --Attr)
                    COMPREPLY=("<unused_Attr>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisieMasqQT)
            opts="--SzW --Post --Name --Gama --Attr  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --Post)
                    COMPREPLY=("<unused_Post>")
                    return 0
                    ;;
                --Name)
                    COMPREPLY=("<unused_Name>")
                    return 0
                    ;;
                --Gama)
                    COMPREPLY=("<unused_Gama>")
                    return 0
                    ;;
                --Attr)
                    COMPREPLY=("<unused_Attr>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SaisiePts)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Sake)
            opts="--ZMoy --ZInc --ModeOri --Mask --SzW --DefCor --ZRegul --ZPas --ZoomF --BoxClip --BoxTer --ResolTerrain --EZA --DirMEC --DirOrtho --DoOrthoM --NbProc --Exe  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --ZInc)
                    COMPREPLY=("<unused_ZInc>")
                    return 0
                    ;;
                --ModeOri)
                    COMPREPLY=("<unused_ModeOri>")
                    return 0
                    ;;
                --Mask)
                    COMPREPLY=("<unused_Mask>")
                    return 0
                    ;;
                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --DefCor)
                    COMPREPLY=("<unused_DefCor>")
                    return 0
                    ;;
                --ZRegul)
                    COMPREPLY=("<unused_ZRegul>")
                    return 0
                    ;;
                --ZPas)
                    COMPREPLY=("<unused_ZPas>")
                    return 0
                    ;;
                --ZoomF)
                    COMPREPLY=("<unused_ZoomF>")
                    return 0
                    ;;
                --BoxClip)
                    COMPREPLY=("<unused_BoxClip>")
                    return 0
                    ;;
                --BoxTer)
                    COMPREPLY=("<unused_BoxTer>")
                    return 0
                    ;;
                --ResolTerrain)
                    COMPREPLY=("<unused_ResolTerrain>")
                    return 0
                    ;;
                --EZA)
                    COMPREPLY=("<unused_EZA>")
                    return 0
                    ;;
                --DirMEC)
                    COMPREPLY=("<unused_DirMEC>")
                    return 0
                    ;;
                --DirOrtho)
                    COMPREPLY=("<unused_DirOrtho>")
                    return 0
                    ;;
                --DoOrthoM)
                    COMPREPLY=("<unused_DoOrthoM>")
                    return 0
                    ;;
                --NbProc)
                    COMPREPLY=("<unused_NbProc>")
                    return 0
                    ;;
                --Exe)
                    COMPREPLY=("<unused_Exe>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SateLib)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ScaleIm)
            opts="--Out --YScale --Sz --P0 --Type --Mult --Dilate --DilXY --Debug --Offset --Tile --FG --F8B --ModMasq  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --YScale)
                    COMPREPLY=("<unused_YScale>")
                    return 0
                    ;;
                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Type)
                    COMPREPLY=("<unused_Type>")
                    return 0
                    ;;
                --Mult)
                    COMPREPLY=("<unused_Mult>")
                    return 0
                    ;;
                --Dilate)
                    COMPREPLY=("<unused_Dilate>")
                    return 0
                    ;;
                --DilXY)
                    COMPREPLY=("<unused_DilXY>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --Offset)
                    COMPREPLY=("<unused_Offset>")
                    return 0
                    ;;
                --Tile)
                    COMPREPLY=("<unused_Tile>")
                    return 0
                    ;;
                --FG)
                    COMPREPLY=("<unused_FG>")
                    return 0
                    ;;
                --F8B)
                    COMPREPLY=("<unused_F8B>")
                    return 0
                    ;;
                --ModMasq)
                    COMPREPLY=("<unused_ModMasq>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ScaleNuage)
            opts="--Sz --P0 --Old --InDirLoc  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --P0)
                    COMPREPLY=("<unused_P0>")
                    return 0
                    ;;
                --Old)
                    COMPREPLY=("<unused_Old>")
                    return 0
                    ;;
                --InDirLoc)
                    COMPREPLY=("<unused_InDirLoc>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Schnaps)
            opts="--HomolIn --NbWin --ExeWrite --HomolOut --ExpTxt --VeryStrict --ShowStats --PoubelleName --minPercentCoverage  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --HomolIn)
                    COMPREPLY=("<unused_HomolIn>")
                    return 0
                    ;;
                --NbWin)
                    COMPREPLY=("<unused_NbWin>")
                    return 0
                    ;;
                --ExeWrite)
                    COMPREPLY=("<unused_ExeWrite>")
                    return 0
                    ;;
                --HomolOut)
                    COMPREPLY=("<unused_HomolOut>")
                    return 0
                    ;;
                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --VeryStrict)
                    COMPREPLY=("<unused_VeryStrict>")
                    return 0
                    ;;
                --ShowStats)
                    COMPREPLY=("<unused_ShowStats>")
                    return 0
                    ;;
                --PoubelleName)
                    COMPREPLY=("<unused_PoubelleName>")
                    return 0
                    ;;
                --minPercentCoverage)
                    COMPREPLY=("<unused_minPercentCoverage>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__ScriptCalib)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SetExif)
            opts="--F --F35 --Cam --Purge  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --F)
                    COMPREPLY=("<unused_F>")
                    return 0
                    ;;
                --F35)
                    COMPREPLY=("<unused_F35>")
                    return 0
                    ;;
                --Cam)
                    COMPREPLY=("<unused_Cam>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SetGpsExif)
            opts="--GpsVId --LatRef --LonRef --AltRef --TimeStamp --Purge  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --GpsVId)
                    COMPREPLY=("<unused_GpsVId>")
                    return 0
                    ;;
                --LatRef)
                    COMPREPLY=("<unused_LatRef>")
                    return 0
                    ;;
                --LonRef)
                    COMPREPLY=("<unused_LonRef>")
                    return 0
                    ;;
                --AltRef)
                    COMPREPLY=("<unused_AltRef>")
                    return 0
                    ;;
                --TimeStamp)
                    COMPREPLY=("<unused_TimeStamp>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Sift)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SimplePredict)
            opts="--ExportPolyIGN --PrefixeNomImageSize  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExportPolyIGN)
                    COMPREPLY=("<unused_ExportPolyIGN>")
                    return 0
                    ;;
                --PrefixeNomImageSize)
                    COMPREPLY=("<unused_PrefixeNomImageSize>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SplitMPO)
            opts="--Right --Left --TG  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Right)
                    COMPREPLY=("<unused_Right>")
                    return 0
                    ;;
                --Left)
                    COMPREPLY=("<unused_Left>")
                    return 0
                    ;;
                --TG)
                    COMPREPLY=("<unused_TG>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__StackFlatField)
            opts="--NbMed --Out --SousResAdd --NbMedSsRes --TolMed --ByMoy  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbMed)
                    COMPREPLY=("<unused_NbMed>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --SousResAdd)
                    COMPREPLY=("<unused_SousResAdd>")
                    return 0
                    ;;
                --NbMedSsRes)
                    COMPREPLY=("<unused_NbMedSsRes>")
                    return 0
                    ;;
                --TolMed)
                    COMPREPLY=("<unused_TolMed>")
                    return 0
                    ;;
                --ByMoy)
                    COMPREPLY=("<unused_ByMoy>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__StatIm)
            opts="--Sz  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SupMntIm)
            opts="--Out --DynGray --OffsetGray --GamaGray --DynCoul --NoVal --Sat --ShowSat --Grad --CDN --CoulCDN --Masq  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --DynGray)
                    COMPREPLY=("<unused_DynGray>")
                    return 0
                    ;;
                --OffsetGray)
                    COMPREPLY=("<unused_OffsetGray>")
                    return 0
                    ;;
                --GamaGray)
                    COMPREPLY=("<unused_GamaGray>")
                    return 0
                    ;;
                --DynCoul)
                    COMPREPLY=("<unused_DynCoul>")
                    return 0
                    ;;
                --NoVal)
                    COMPREPLY=("<unused_NoVal>")
                    return 0
                    ;;
                --Sat)
                    COMPREPLY=("<unused_Sat>")
                    return 0
                    ;;
                --ShowSat)
                    COMPREPLY=("<unused_ShowSat>")
                    return 0
                    ;;
                --Grad)
                    COMPREPLY=("<unused_Grad>")
                    return 0
                    ;;
                --CDN)
                    COMPREPLY=("<unused_CDN>")
                    return 0
                    ;;
                --CoulCDN)
                    COMPREPLY=("<unused_CoulCDN>")
                    return 0
                    ;;
                --Masq)
                    COMPREPLY=("<unused_Masq>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__SysCoordPolyn)
            opts="--Test  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Test)
                    COMPREPLY=("<unused_Test>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Tapas)
            opts="--ExpTxt --Out --InCal --InOri --DoC --ForCalib --Focs --VitesseInit --PPRel --Decentre --PropDiag --SauvAutom --ImInit --MOI --DBF --Debug --DegRadMax --DegGen --LibAff --LibDec --LibPP --LibCP --LibFoc --RapTxt --LinkPPaPPs --FrozenPoses --FreeCalibInit --FrozenCalibs --FreeCalibs --SH --RefineAll --ImMinMax --EcMax --EcInit --CondMaxPano --SinglePos --RankInitF --RankInitPP --RegulDist --MulLVM  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --InCal)
                    COMPREPLY=("<unused_InCal>")
                    return 0
                    ;;
                --InOri)
                    COMPREPLY=("<unused_InOri>")
                    return 0
                    ;;
                --DoC)
                    COMPREPLY=("<unused_DoC>")
                    return 0
                    ;;
                --ForCalib)
                    COMPREPLY=("<unused_ForCalib>")
                    return 0
                    ;;
                --Focs)
                    COMPREPLY=("<unused_Focs>")
                    return 0
                    ;;
                --VitesseInit)
                    COMPREPLY=("<unused_VitesseInit>")
                    return 0
                    ;;
                --PPRel)
                    COMPREPLY=("<unused_PPRel>")
                    return 0
                    ;;
                --Decentre)
                    COMPREPLY=("<unused_Decentre>")
                    return 0
                    ;;
                --PropDiag)
                    COMPREPLY=("<unused_PropDiag>")
                    return 0
                    ;;
                --SauvAutom)
                    COMPREPLY=("<unused_SauvAutom>")
                    return 0
                    ;;
                --ImInit)
                    COMPREPLY=("<unused_ImInit>")
                    return 0
                    ;;
                --MOI)
                    COMPREPLY=("<unused_MOI>")
                    return 0
                    ;;
                --DBF)
                    COMPREPLY=("<unused_DBF>")
                    return 0
                    ;;
                --Debug)
                    COMPREPLY=("<unused_Debug>")
                    return 0
                    ;;
                --DegRadMax)
                    COMPREPLY=("<unused_DegRadMax>")
                    return 0
                    ;;
                --DegGen)
                    COMPREPLY=("<unused_DegGen>")
                    return 0
                    ;;
                --LibAff)
                    COMPREPLY=("<unused_LibAff>")
                    return 0
                    ;;
                --LibDec)
                    COMPREPLY=("<unused_LibDec>")
                    return 0
                    ;;
                --LibPP)
                    COMPREPLY=("<unused_LibPP>")
                    return 0
                    ;;
                --LibCP)
                    COMPREPLY=("<unused_LibCP>")
                    return 0
                    ;;
                --LibFoc)
                    COMPREPLY=("<unused_LibFoc>")
                    return 0
                    ;;
                --RapTxt)
                    COMPREPLY=("<unused_RapTxt>")
                    return 0
                    ;;
                --LinkPPaPPs)
                    COMPREPLY=("<unused_LinkPPaPPs>")
                    return 0
                    ;;
                --FrozenPoses)
                    COMPREPLY=("<unused_FrozenPoses>")
                    return 0
                    ;;
                --FreeCalibInit)
                    COMPREPLY=("<unused_FreeCalibInit>")
                    return 0
                    ;;
                --FrozenCalibs)
                    COMPREPLY=("<unused_FrozenCalibs>")
                    return 0
                    ;;
                --FreeCalibs)
                    COMPREPLY=("<unused_FreeCalibs>")
                    return 0
                    ;;
                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                --RefineAll)
                    COMPREPLY=("<unused_RefineAll>")
                    return 0
                    ;;
                --ImMinMax)
                    COMPREPLY=("<unused_ImMinMax>")
                    return 0
                    ;;
                --EcMax)
                    COMPREPLY=("<unused_EcMax>")
                    return 0
                    ;;
                --EcInit)
                    COMPREPLY=("<unused_EcInit>")
                    return 0
                    ;;
                --CondMaxPano)
                    COMPREPLY=("<unused_CondMaxPano>")
                    return 0
                    ;;
                --SinglePos)
                    COMPREPLY=("<unused_SinglePos>")
                    return 0
                    ;;
                --RankInitF)
                    COMPREPLY=("<unused_RankInitF>")
                    return 0
                    ;;
                --RankInitPP)
                    COMPREPLY=("<unused_RankInitPP>")
                    return 0
                    ;;
                --RegulDist)
                    COMPREPLY=("<unused_RegulDist>")
                    return 0
                    ;;
                --MulLVM)
                    COMPREPLY=("<unused_MulLVM>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Tapioca)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Tarama)
            opts="--Zoom --Repere --Out --ZMoy --KNadir --IncMax --UnUseAXC  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Zoom)
                    COMPREPLY=("<unused_Zoom>")
                    return 0
                    ;;
                --Repere)
                    COMPREPLY=("<unused_Repere>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --ZMoy)
                    COMPREPLY=("<unused_ZMoy>")
                    return 0
                    ;;
                --KNadir)
                    COMPREPLY=("<unused_KNadir>")
                    return 0
                    ;;
                --IncMax)
                    COMPREPLY=("<unused_IncMax>")
                    return 0
                    ;;
                --UnUseAXC)
                    COMPREPLY=("<unused_UnUseAXC>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Tawny)
            opts="--RadiomEgal --DEq --DEqXY --AddCste --DegRap --DegRapXY --RGP --DynG --ImPrio --SzV --CorThr --NbPerIm --L1F --SatThresh --Out  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --RadiomEgal)
                    COMPREPLY=("<unused_RadiomEgal>")
                    return 0
                    ;;
                --DEq)
                    COMPREPLY=("<unused_DEq>")
                    return 0
                    ;;
                --DEqXY)
                    COMPREPLY=("<unused_DEqXY>")
                    return 0
                    ;;
                --AddCste)
                    COMPREPLY=("<unused_AddCste>")
                    return 0
                    ;;
                --DegRap)
                    COMPREPLY=("<unused_DegRap>")
                    return 0
                    ;;
                --DegRapXY)
                    COMPREPLY=("<unused_DegRapXY>")
                    return 0
                    ;;
                --RGP)
                    COMPREPLY=("<unused_RGP>")
                    return 0
                    ;;
                --DynG)
                    COMPREPLY=("<unused_DynG>")
                    return 0
                    ;;
                --ImPrio)
                    COMPREPLY=("<unused_ImPrio>")
                    return 0
                    ;;
                --SzV)
                    COMPREPLY=("<unused_SzV>")
                    return 0
                    ;;
                --CorThr)
                    COMPREPLY=("<unused_CorThr>")
                    return 0
                    ;;
                --NbPerIm)
                    COMPREPLY=("<unused_NbPerIm>")
                    return 0
                    ;;
                --L1F)
                    COMPREPLY=("<unused_L1F>")
                    return 0
                    ;;
                --SatThresh)
                    COMPREPLY=("<unused_SatThresh>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Tequila)
            opts="--Out --Bin --Optim --Lambda --Iter --Filter --Texture --Sz --Scale --QUAL --Angle --Mode --Crit  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Bin)
                    COMPREPLY=("<unused_Bin>")
                    return 0
                    ;;
                --Optim)
                    COMPREPLY=("<unused_Optim>")
                    return 0
                    ;;
                --Lambda)
                    COMPREPLY=("<unused_Lambda>")
                    return 0
                    ;;
                --Iter)
                    COMPREPLY=("<unused_Iter>")
                    return 0
                    ;;
                --Filter)
                    COMPREPLY=("<unused_Filter>")
                    return 0
                    ;;
                --Texture)
                    COMPREPLY=("<unused_Texture>")
                    return 0
                    ;;
                --Sz)
                    COMPREPLY=("<unused_Sz>")
                    return 0
                    ;;
                --Scale)
                    COMPREPLY=("<unused_Scale>")
                    return 0
                    ;;
                --QUAL)
                    COMPREPLY=("<unused_QUAL>")
                    return 0
                    ;;
                --Angle)
                    COMPREPLY=("<unused_Angle>")
                    return 0
                    ;;
                --Mode)
                    COMPREPLY=("<unused_Mode>")
                    return 0
                    ;;
                --Crit)
                    COMPREPLY=("<unused_Crit>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestBundleInter)
            opts="--Cam3  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Cam3)
                    COMPREPLY=("<unused_Cam3>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestCam)
            opts="--Tag --Grid --Out --ExtP --TOC --TDINV  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Tag)
                    COMPREPLY=("<unused_Tag>")
                    return 0
                    ;;
                --Grid)
                    COMPREPLY=("<unused_Grid>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --ExtP)
                    COMPREPLY=("<unused_ExtP>")
                    return 0
                    ;;
                --TOC)
                    COMPREPLY=("<unused_TOC>")
                    return 0
                    ;;
                --TDINV)
                    COMPREPLY=("<unused_TDINV>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestChantier)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestCmds)
            opts="--Data_set  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Data_set)
                    COMPREPLY=("<unused_Data_set>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestDistM2C)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestKey)
            opts="--Nb --KeyAssoc  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Nb)
                    COMPREPLY=("<unused_Nb>")
                    return 0
                    ;;
                --KeyAssoc)
                    COMPREPLY=("<unused_KeyAssoc>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestLib)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestMTD)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestNameCalib)
            opts="--Nb  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Nb)
                    COMPREPLY=("<unused_Nb>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestPbRPC)
            opts="--NbZ --NbXY --SeuilRP --SeuilGrad --PrErr --PlyErr --PlySXTer --PlySYTer --PlySXIm --PlySYIm  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbZ)
                    COMPREPLY=("<unused_NbZ>")
                    return 0
                    ;;
                --NbXY)
                    COMPREPLY=("<unused_NbXY>")
                    return 0
                    ;;
                --SeuilRP)
                    COMPREPLY=("<unused_SeuilRP>")
                    return 0
                    ;;
                --SeuilGrad)
                    COMPREPLY=("<unused_SeuilGrad>")
                    return 0
                    ;;
                --PrErr)
                    COMPREPLY=("<unused_PrErr>")
                    return 0
                    ;;
                --PlyErr)
                    COMPREPLY=("<unused_PlyErr>")
                    return 0
                    ;;
                --PlySXTer)
                    COMPREPLY=("<unused_PlySXTer>")
                    return 0
                    ;;
                --PlySYTer)
                    COMPREPLY=("<unused_PlySYTer>")
                    return 0
                    ;;
                --PlySXIm)
                    COMPREPLY=("<unused_PlySXIm>")
                    return 0
                    ;;
                --PlySYIm)
                    COMPREPLY=("<unused_PlySYIm>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TestRegEx)
            opts="--DispPat  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --DispPat)
                    COMPREPLY=("<unused_DispPat>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TiPunch)
            opts="--Pattern --Out --Bin --Depth --Rm --Filter --Mode --Scale --FFB  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Pattern)
                    COMPREPLY=("<unused_Pattern>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Bin)
                    COMPREPLY=("<unused_Bin>")
                    return 0
                    ;;
                --Depth)
                    COMPREPLY=("<unused_Depth>")
                    return 0
                    ;;
                --Rm)
                    COMPREPLY=("<unused_Rm>")
                    return 0
                    ;;
                --Filter)
                    COMPREPLY=("<unused_Filter>")
                    return 0
                    ;;
                --Mode)
                    COMPREPLY=("<unused_Mode>")
                    return 0
                    ;;
                --Scale)
                    COMPREPLY=("<unused_Scale>")
                    return 0
                    ;;
                --FFB)
                    COMPREPLY=("<unused_FFB>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TiePAll)
            opts="--ExpTxt --ByP --PostFix --Detect --Circ  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ByP)
                    COMPREPLY=("<unused_ByP>")
                    return 0
                    ;;
                --PostFix)
                    COMPREPLY=("<unused_PostFix>")
                    return 0
                    ;;
                --Detect)
                    COMPREPLY=("<unused_Detect>")
                    return 0
                    ;;
                --Circ)
                    COMPREPLY=("<unused_Circ>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TiePByMesh)
            opts="--disp --corl_glob --corl_pt --method --SzPtCorr --SzAreaCorr --indTri --assum1er --Test --aTypeD --dParam --HomolOut --useExist --angleV --justFil  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --disp)
                    COMPREPLY=("<unused_disp>")
                    return 0
                    ;;
                --corl_glob)
                    COMPREPLY=("<unused_corl_glob>")
                    return 0
                    ;;
                --corl_pt)
                    COMPREPLY=("<unused_corl_pt>")
                    return 0
                    ;;
                --method)
                    COMPREPLY=("<unused_method>")
                    return 0
                    ;;
                --SzPtCorr)
                    COMPREPLY=("<unused_SzPtCorr>")
                    return 0
                    ;;
                --SzAreaCorr)
                    COMPREPLY=("<unused_SzAreaCorr>")
                    return 0
                    ;;
                --indTri)
                    COMPREPLY=("<unused_indTri>")
                    return 0
                    ;;
                --assum1er)
                    COMPREPLY=("<unused_assum1er>")
                    return 0
                    ;;
                --Test)
                    COMPREPLY=("<unused_Test>")
                    return 0
                    ;;
                --aTypeD)
                    COMPREPLY=("<unused_aTypeD>")
                    return 0
                    ;;
                --dParam)
                    COMPREPLY=("<unused_dParam>")
                    return 0
                    ;;
                --HomolOut)
                    COMPREPLY=("<unused_HomolOut>")
                    return 0
                    ;;
                --useExist)
                    COMPREPLY=("<unused_useExist>")
                    return 0
                    ;;
                --angleV)
                    COMPREPLY=("<unused_angleV>")
                    return 0
                    ;;
                --justFil)
                    COMPREPLY=("<unused_justFil>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TiePLine)
            opts="--ExpTxt --ByP --PostFix --Detect --Circ  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ByP)
                    COMPREPLY=("<unused_ByP>")
                    return 0
                    ;;
                --PostFix)
                    COMPREPLY=("<unused_PostFix>")
                    return 0
                    ;;
                --Detect)
                    COMPREPLY=("<unused_Detect>")
                    return 0
                    ;;
                --Circ)
                    COMPREPLY=("<unused_Circ>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TiePMS)
            opts="--ExpTxt --ByP --PostFix --Detect --Circ  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --ExpTxt)
                    COMPREPLY=("<unused_ExpTxt>")
                    return 0
                    ;;
                --ByP)
                    COMPREPLY=("<unused_ByP>")
                    return 0
                    ;;
                --PostFix)
                    COMPREPLY=("<unused_PostFix>")
                    return 0
                    ;;
                --Detect)
                    COMPREPLY=("<unused_Detect>")
                    return 0
                    ;;
                --Circ)
                    COMPREPLY=("<unused_Circ>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TifDev)
            opts="--NbChan --16B --ENC  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbChan)
                    COMPREPLY=("<unused_NbChan>")
                    return 0
                    ;;
                --16B)
                    COMPREPLY=("<unused_16B>")
                    return 0
                    ;;
                --ENC)
                    COMPREPLY=("<unused_ENC>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__TripleSec)
            opts="--OutReportXML --OutErrorsXML --InRefDir --Purge  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --OutReportXML)
                    COMPREPLY=("<unused_OutReportXML>")
                    return 0
                    ;;
                --OutErrorsXML)
                    COMPREPLY=("<unused_OutErrorsXML>")
                    return 0
                    ;;
                --InRefDir)
                    COMPREPLY=("<unused_InRefDir>")
                    return 0
                    ;;
                --Purge)
                    COMPREPLY=("<unused_Purge>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Undist)
            opts="--UseMkF --XX@ABB_InternalCall  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --UseMkF)
                    COMPREPLY=("<unused_UseMkF>")
                    return 0
                    ;;
                --XX@ABB_InternalCall)
                    COMPREPLY=("<unused_XX@ABB_InternalCall>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__VV)
            opts="--Rate --SzS --LineS --Teta  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Rate)
                    COMPREPLY=("<unused_Rate>")
                    return 0
                    ;;
                --SzS)
                    COMPREPLY=("<unused_SzS>")
                    return 0
                    ;;
                --LineS)
                    COMPREPLY=("<unused_LineS>")
                    return 0
                    ;;
                --Teta)
                    COMPREPLY=("<unused_Teta>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Vino)
            opts="--SzW --Bilin --SZG --SZM --WS --Dyn --Gray --IsMnt --FileMnt --ClipCh  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SzW)
                    COMPREPLY=("<unused_SzW>")
                    return 0
                    ;;
                --Bilin)
                    COMPREPLY=("<unused_Bilin>")
                    return 0
                    ;;
                --SZG)
                    COMPREPLY=("<unused_SZG>")
                    return 0
                    ;;
                --SZM)
                    COMPREPLY=("<unused_SZM>")
                    return 0
                    ;;
                --WS)
                    COMPREPLY=("<unused_WS>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --Gray)
                    COMPREPLY=("<unused_Gray>")
                    return 0
                    ;;
                --IsMnt)
                    COMPREPLY=("<unused_IsMnt>")
                    return 0
                    ;;
                --FileMnt)
                    COMPREPLY=("<unused_FileMnt>")
                    return 0
                    ;;
                --ClipCh)
                    COMPREPLY=("<unused_ClipCh>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__VisuRedHom)
            opts="--SH  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --SH)
                    COMPREPLY=("<unused_SH>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Vodka)
            opts="--Out --InTxt --InCal --DoCor  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --InTxt)
                    COMPREPLY=("<unused_InTxt>")
                    return 0
                    ;;
                --InCal)
                    COMPREPLY=("<unused_InCal>")
                    return 0
                    ;;
                --DoCor)
                    COMPREPLY=("<unused_DoCor>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__XLib)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__XYZ2Im)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__XifGps2Txt)
            opts="--OutTxtFile --Sys --DefZ  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --OutTxtFile)
                    COMPREPLY=("<unused_OutTxtFile>")
                    return 0
                    ;;
                --Sys)
                    COMPREPLY=("<unused_Sys>")
                    return 0
                    ;;
                --DefZ)
                    COMPREPLY=("<unused_DefZ>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__XifGps2Xml)
            opts="--DoRTL --RTL --SysCo --DefZ  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --DoRTL)
                    COMPREPLY=("<unused_DoRTL>")
                    return 0
                    ;;
                --RTL)
                    COMPREPLY=("<unused_RTL>")
                    return 0
                    ;;
                --SysCo)
                    COMPREPLY=("<unused_SysCo>")
                    return 0
                    ;;
                --DefZ)
                    COMPREPLY=("<unused_DefZ>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__Zlimit)
            opts="--MasqSup --CorrelIm --CorrelThr --OriginIm --OriginImMinVal --DEM  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --MasqSup)
                    COMPREPLY=("<unused_MasqSup>")
                    return 0
                    ;;
                --CorrelIm)
                    COMPREPLY=("<unused_CorrelIm>")
                    return 0
                    ;;
                --CorrelThr)
                    COMPREPLY=("<unused_CorrelThr>")
                    return 0
                    ;;
                --OriginIm)
                    COMPREPLY=("<unused_OriginIm>")
                    return 0
                    ;;
                --OriginImMinVal)
                    COMPREPLY=("<unused_OriginImMinVal>")
                    return 0
                    ;;
                --DEM)
                    COMPREPLY=("<unused_DEM>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__cod)
            opts="--dc  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --dc)
                    COMPREPLY=("<unused_dc>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__genmail)
            opts="--NbByF --SingleFile --Dests  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --NbByF)
                    COMPREPLY=("<unused_NbByF>")
                    return 0
                    ;;
                --SingleFile)
                    COMPREPLY=("<unused_SingleFile>")
                    return 0
                    ;;
                --Dests)
                    COMPREPLY=("<unused_Dests>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__help)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__mmxv)
            opts=" "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__tiff_info)
            opts="--MaxMin  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --MaxMin)
                    COMPREPLY=("<unused_MaxMin>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__to8Bits)
            opts="--EcMin --Out --Brd --NbIter --Dyn --Offset --NewOffset --Circ --Coul --AdaptMinMax --AdaptMin --IS1 --GS1 --WS1 --Type --Strip --Compr --TestVals --Step --VisuAff --P0Crop --P1Crop --CropIsAbs --CanTileFile --EqHisto --StepH --ForceMax --ForceMin --Mask --BoucheMask --UseSigne --2XV  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --EcMin)
                    COMPREPLY=("<unused_EcMin>")
                    return 0
                    ;;
                --Out)
                    COMPREPLY=("<unused_Out>")
                    return 0
                    ;;
                --Brd)
                    COMPREPLY=("<unused_Brd>")
                    return 0
                    ;;
                --NbIter)
                    COMPREPLY=("<unused_NbIter>")
                    return 0
                    ;;
                --Dyn)
                    COMPREPLY=("<unused_Dyn>")
                    return 0
                    ;;
                --Offset)
                    COMPREPLY=("<unused_Offset>")
                    return 0
                    ;;
                --NewOffset)
                    COMPREPLY=("<unused_NewOffset>")
                    return 0
                    ;;
                --Circ)
                    COMPREPLY=("<unused_Circ>")
                    return 0
                    ;;
                --Coul)
                    COMPREPLY=("<unused_Coul>")
                    return 0
                    ;;
                --AdaptMinMax)
                    COMPREPLY=("<unused_AdaptMinMax>")
                    return 0
                    ;;
                --AdaptMin)
                    COMPREPLY=("<unused_AdaptMin>")
                    return 0
                    ;;
                --IS1)
                    COMPREPLY=("<unused_IS1>")
                    return 0
                    ;;
                --GS1)
                    COMPREPLY=("<unused_GS1>")
                    return 0
                    ;;
                --WS1)
                    COMPREPLY=("<unused_WS1>")
                    return 0
                    ;;
                --Type)
                    COMPREPLY=("<unused_Type>")
                    return 0
                    ;;
                --Strip)
                    COMPREPLY=("<unused_Strip>")
                    return 0
                    ;;
                --Compr)
                    COMPREPLY=("<unused_Compr>")
                    return 0
                    ;;
                --TestVals)
                    COMPREPLY=("<unused_TestVals>")
                    return 0
                    ;;
                --Step)
                    COMPREPLY=("<unused_Step>")
                    return 0
                    ;;
                --VisuAff)
                    COMPREPLY=("<unused_VisuAff>")
                    return 0
                    ;;
                --P0Crop)
                    COMPREPLY=("<unused_P0Crop>")
                    return 0
                    ;;
                --P1Crop)
                    COMPREPLY=("<unused_P1Crop>")
                    return 0
                    ;;
                --CropIsAbs)
                    COMPREPLY=("<unused_CropIsAbs>")
                    return 0
                    ;;
                --CanTileFile)
                    COMPREPLY=("<unused_CanTileFile>")
                    return 0
                    ;;
                --EqHisto)
                    COMPREPLY=("<unused_EqHisto>")
                    return 0
                    ;;
                --StepH)
                    COMPREPLY=("<unused_StepH>")
                    return 0
                    ;;
                --ForceMax)
                    COMPREPLY=("<unused_ForceMax>")
                    return 0
                    ;;
                --ForceMin)
                    COMPREPLY=("<unused_ForceMin>")
                    return 0
                    ;;
                --Mask)
                    COMPREPLY=("<unused_Mask>")
                    return 0
                    ;;
                --BoucheMask)
                    COMPREPLY=("<unused_BoucheMask>")
                    return 0
                    ;;
                --UseSigne)
                    COMPREPLY=("<unused_UseSigne>")
                    return 0
                    ;;
                --2XV)
                    COMPREPLY=("<unused_2XV>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
        mm3d__vic)
            opts="--editor  "
            if [[ ${cur} == -* || ${COMP_CWORD} -eq 2 ]] ; then
                COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
                return 0
            fi
            case "${prev}" in

                --editor)
                    COMPREPLY=("<unused_editor>")
                    return 0
                    ;;
                *)
                    COMPREPLY=()
                    ;;
            esac
            COMPREPLY=( $(compgen -W "${opts}" -- ${cur}) )
            return 0
            ;;
    esac
}

complete -F _mm3d -o bashdefault -o default mm3d
