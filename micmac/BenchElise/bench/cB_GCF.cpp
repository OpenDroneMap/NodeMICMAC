// File Automatically generated by eLiSe
#ifndef _cB_GCF_cpp_
#define _cB_GCF_cpp_

#include "general/all.h"
#include "private/all.h"
#include "cB_GCF.h"


cB_GCF::cB_GCF():
    cElCompiledFonc()
{
   AddIntRef (cIncIntervale("Interv1",0,2));
   AddIntRef (cIncIntervale("Interv2",2,5));
   Close(false);
}



void cB_GCF::ComputeVal()
{
   double tmp0_ = mLocA-mLocB;
   double tmp1_ = mCompCoord[0];
   double tmp2_ = mCompCoord[1];
   double tmp3_ = tmp1_*tmp2_;
   double tmp4_ = mCompCoord[2];
   double tmp5_ = mCompCoord[3];
   double tmp6_ = tmp4_*tmp5_;
   double tmp7_ = sin(tmp1_);
   double tmp8_ = sin(tmp2_);
   double tmp9_ = tmp7_-tmp8_;

  mVal = ((mLocA*mLocB*mLocA*mLocB+(tmp0_)*(mLocA+mLocB)+mLocA/mLocB)-mLocB/mLocA+tmp0_)-mLocB+mLocB-(tmp0_)+tmp3_+tmp3_+tmp1_+tmp2_+tmp4_+tmp5_+tmp6_+tmp6_+cos(mCompCoord[4])+1+1+mLocA*tmp1_+tmp9_+mLocB*(tmp9_);

}


void cB_GCF::ComputeValDeriv()
{
   double tmp0_ = mLocA-mLocB;
   double tmp1_ = mCompCoord[0];
   double tmp2_ = mCompCoord[1];
   double tmp3_ = tmp1_*tmp2_;
   double tmp4_ = mCompCoord[2];
   double tmp5_ = mCompCoord[3];
   double tmp6_ = tmp4_*tmp5_;
   double tmp7_ = sin(tmp1_);
   double tmp8_ = sin(tmp2_);
   double tmp9_ = tmp7_-tmp8_;
   double tmp10_ = cos(tmp1_);
   double tmp11_ = cos(tmp2_);
   double tmp12_ = -(tmp11_);
   double tmp13_ = mCompCoord[4];

  mVal = ((mLocA*mLocB*mLocA*mLocB+(tmp0_)*(mLocA+mLocB)+mLocA/mLocB)-mLocB/mLocA+tmp0_)-mLocB+mLocB-(tmp0_)+tmp3_+tmp3_+tmp1_+tmp2_+tmp4_+tmp5_+tmp6_+tmp6_+cos(tmp13_)+1+1+mLocA*tmp1_+tmp9_+mLocB*(tmp9_);

  mCompDer[0] = tmp2_+tmp2_+1+mLocA+tmp10_+tmp10_*mLocB;
  mCompDer[1] = tmp1_+tmp1_+1+tmp12_+tmp12_*mLocB;
  mCompDer[2] = 1+tmp5_+tmp5_;
  mCompDer[3] = 1+tmp4_+tmp4_;
  mCompDer[4] = -(1)*sin(tmp13_);
}


void cB_GCF::ComputeValDerivHessian()
{
   double tmp0_ = mLocA-mLocB;
   double tmp1_ = mCompCoord[0];
   double tmp2_ = mCompCoord[1];
   double tmp3_ = tmp1_*tmp2_;
   double tmp4_ = mCompCoord[2];
   double tmp5_ = mCompCoord[3];
   double tmp6_ = tmp4_*tmp5_;
   double tmp7_ = sin(tmp1_);
   double tmp8_ = sin(tmp2_);
   double tmp9_ = tmp7_-tmp8_;
   double tmp10_ = cos(tmp1_);
   double tmp11_ = cos(tmp2_);
   double tmp12_ = -(tmp11_);
   double tmp13_ = mCompCoord[4];
   double tmp14_ = -(1);
   double tmp15_ = tmp14_*tmp7_;
   double tmp16_ = tmp14_*tmp8_;
   double tmp17_ = -(tmp16_);
   double tmp18_ = cos(tmp13_);

  mVal = ((mLocA*mLocB*mLocA*mLocB+(tmp0_)*(mLocA+mLocB)+mLocA/mLocB)-mLocB/mLocA+tmp0_)-mLocB+mLocB-(tmp0_)+tmp3_+tmp3_+tmp1_+tmp2_+tmp4_+tmp5_+tmp6_+tmp6_+tmp18_+1+1+mLocA*tmp1_+tmp9_+mLocB*(tmp9_);

  mCompDer[0] = tmp2_+tmp2_+1+mLocA+tmp10_+tmp10_*mLocB;
  mCompDer[1] = tmp1_+tmp1_+1+tmp12_+tmp12_*mLocB;
  mCompDer[2] = 1+tmp5_+tmp5_;
  mCompDer[3] = 1+tmp4_+tmp4_;
  mCompDer[4] = tmp14_*sin(tmp13_);
  mCompHessian[0][0]=   mCompHessian[0][0]= tmp15_+tmp15_*mLocB;
  mCompHessian[1][0]=   mCompHessian[0][1]= 2.000000;
  mCompHessian[1][1]=   mCompHessian[1][1]= tmp17_+tmp17_*mLocB;
  mCompHessian[2][0]=   mCompHessian[0][2]= 0;
  mCompHessian[2][1]=   mCompHessian[1][2]= 0;
  mCompHessian[2][2]=   mCompHessian[2][2]= 0;
  mCompHessian[3][0]=   mCompHessian[0][3]= 0;
  mCompHessian[3][1]=   mCompHessian[1][3]= 0;
  mCompHessian[3][2]=   mCompHessian[2][3]= 2.000000;
  mCompHessian[3][3]=   mCompHessian[3][3]= 0;
  mCompHessian[4][0]=   mCompHessian[0][4]= 0;
  mCompHessian[4][1]=   mCompHessian[1][4]= 0;
  mCompHessian[4][2]=   mCompHessian[2][4]= 0;
  mCompHessian[4][3]=   mCompHessian[3][4]= 0;
  mCompHessian[4][4]=   mCompHessian[4][4]= tmp18_*tmp14_;
}



void cB_GCF::SetA(double aVal){ mLocA = aVal;}
void cB_GCF::SetB(double aVal){ mLocB = aVal;}



double * cB_GCF::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "A") return & mLocA;
   if (aName == "B") return & mLocB;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cB_GCF::mTheAuto("cB_GCF",cB_GCF::Alloc);


cElCompiledFonc *  cB_GCF::Alloc()
{  return new cB_GCF();
}


#endif // _cB_GCF_cpp_
