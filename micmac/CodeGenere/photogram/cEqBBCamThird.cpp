// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cEqBBCamThird.h"


cEqBBCamThird::cEqBBCamThird():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("C3",0,3));
   AddIntRef (cIncIntervale("Omega3",3,6));
   AddIntRef (cIncIntervale("Tmp_PTer",6,9));
   Close(false);
}



void cEqBBCamThird::ComputeVal()
{
   double tmp0_ = mCompCoord[8];
   double tmp1_ = mCompCoord[7];
   double tmp2_ = mCompCoord[4];
   double tmp3_ = mCompCoord[6];
   double tmp4_ = mCompCoord[5];
   double tmp5_ = mCompCoord[3];
   double tmp6_ = tmp5_*tmp1_;
   double tmp7_ = tmp2_*tmp3_;
   double tmp8_ = tmp6_-tmp7_;
   double tmp9_ = tmp0_+tmp8_;
   double tmp10_ = mCompCoord[2];
   double tmp11_ = tmp10_+mLocCInit3_z;
   double tmp12_ = (tmp9_)-(tmp11_);

  mVal[0] = mLocI3_x-((tmp3_+tmp2_*tmp0_-tmp4_*tmp1_)-(mCompCoord[0]+mLocCInit3_x))/(tmp12_);

  mVal[1] = mLocI3_y-((tmp1_+tmp4_*tmp3_-tmp5_*tmp0_)-(mCompCoord[1]+mLocCInit3_y))/(tmp12_);

}


void cEqBBCamThird::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[8];
   double tmp1_ = mCompCoord[7];
   double tmp2_ = mCompCoord[4];
   double tmp3_ = mCompCoord[6];
   double tmp4_ = mCompCoord[3];
   double tmp5_ = tmp4_*tmp1_;
   double tmp6_ = tmp2_*tmp3_;
   double tmp7_ = tmp5_-tmp6_;
   double tmp8_ = tmp0_+tmp7_;
   double tmp9_ = mCompCoord[2];
   double tmp10_ = tmp9_+mLocCInit3_z;
   double tmp11_ = (tmp8_)-(tmp10_);
   double tmp12_ = tmp2_*tmp0_;
   double tmp13_ = mCompCoord[5];
   double tmp14_ = tmp13_*tmp1_;
   double tmp15_ = tmp12_-tmp14_;
   double tmp16_ = tmp3_+tmp15_;
   double tmp17_ = mCompCoord[0];
   double tmp18_ = tmp17_+mLocCInit3_x;
   double tmp19_ = (tmp16_)-(tmp18_);
   double tmp20_ = -(1);
   double tmp21_ = ElSquare(tmp11_);
   double tmp22_ = tmp20_*(tmp11_);
   double tmp23_ = (tmp22_)/tmp21_;
   double tmp24_ = -(tmp23_);
   double tmp25_ = tmp13_*tmp3_;
   double tmp26_ = tmp4_*tmp0_;
   double tmp27_ = tmp25_-tmp26_;
   double tmp28_ = tmp1_+tmp27_;
   double tmp29_ = mCompCoord[1];
   double tmp30_ = tmp29_+mLocCInit3_y;
   double tmp31_ = (tmp28_)-(tmp30_);
   double tmp32_ = -(tmp3_);
   double tmp33_ = -(tmp2_);

  mVal[0] = mLocI3_x-(tmp19_)/(tmp11_);

  mCompDer[0][0] = tmp24_;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = -(-((tmp19_)*tmp20_)/tmp21_);
  mCompDer[0][3] = -(-((tmp19_)*tmp1_)/tmp21_);
  mCompDer[0][4] = -((tmp0_*(tmp11_)-(tmp19_)*tmp32_)/tmp21_);
  mCompDer[0][5] = -((-(tmp1_)*(tmp11_))/tmp21_);
  mCompDer[0][6] = -((tmp11_-(tmp19_)*tmp33_)/tmp21_);
  mCompDer[0][7] = -((-(tmp13_)*(tmp11_)-(tmp19_)*tmp4_)/tmp21_);
  mCompDer[0][8] = -((tmp2_*(tmp11_)-(tmp19_))/tmp21_);
  mVal[1] = mLocI3_y-(tmp31_)/(tmp11_);

  mCompDer[1][0] = 0;
  mCompDer[1][1] = tmp24_;
  mCompDer[1][2] = -(-((tmp31_)*tmp20_)/tmp21_);
  mCompDer[1][3] = -((-(tmp0_)*(tmp11_)-(tmp31_)*tmp1_)/tmp21_);
  mCompDer[1][4] = -(-((tmp31_)*tmp32_)/tmp21_);
  mCompDer[1][5] = -((tmp3_*(tmp11_))/tmp21_);
  mCompDer[1][6] = -((tmp13_*(tmp11_)-(tmp31_)*tmp33_)/tmp21_);
  mCompDer[1][7] = -((tmp11_-(tmp31_)*tmp4_)/tmp21_);
  mCompDer[1][8] = -((-(tmp4_)*(tmp11_)-(tmp31_))/tmp21_);
}


void cEqBBCamThird::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqBBCamThird Has no Der Sec");
}

void cEqBBCamThird::SetCInit3_x(double aVal){ mLocCInit3_x = aVal;}
void cEqBBCamThird::SetCInit3_y(double aVal){ mLocCInit3_y = aVal;}
void cEqBBCamThird::SetCInit3_z(double aVal){ mLocCInit3_z = aVal;}
void cEqBBCamThird::SetI3_x(double aVal){ mLocI3_x = aVal;}
void cEqBBCamThird::SetI3_y(double aVal){ mLocI3_y = aVal;}



double * cEqBBCamThird::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "CInit3_x") return & mLocCInit3_x;
   if (aName == "CInit3_y") return & mLocCInit3_y;
   if (aName == "CInit3_z") return & mLocCInit3_z;
   if (aName == "I3_x") return & mLocI3_x;
   if (aName == "I3_y") return & mLocI3_y;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqBBCamThird::mTheAuto("cEqBBCamThird",cEqBBCamThird::Alloc);


cElCompiledFonc *  cEqBBCamThird::Alloc()
{  return new cEqBBCamThird();
}


