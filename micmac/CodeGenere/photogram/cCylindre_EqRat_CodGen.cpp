// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "cCylindre_EqRat_CodGen.h"


cCylindre_EqRat_CodGen::cCylindre_EqRat_CodGen():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("SurfRat",0,7));
   Close(false);
}



void cCylindre_EqRat_CodGen::ComputeVal()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mLocP2Proj_x-tmp0_;
   double tmp2_ = mCompCoord[4];
   double tmp3_ = mLocP2Proj_y-tmp2_;
   double tmp4_ = mCompCoord[5];
   double tmp5_ = mLocP2Proj_z-tmp4_;

  mVal[0] = sqrt(((tmp1_)*(tmp1_)+(tmp3_)*(tmp3_)+(tmp5_)*(tmp5_))-ElSquare((tmp1_)*mCompCoord[0]+(tmp3_)*mCompCoord[1]+(tmp5_)*mCompCoord[2]))-mCompCoord[6];

}


void cCylindre_EqRat_CodGen::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mLocP2Proj_x-tmp0_;
   double tmp2_ = mCompCoord[4];
   double tmp3_ = mLocP2Proj_y-tmp2_;
   double tmp4_ = mCompCoord[5];
   double tmp5_ = mLocP2Proj_z-tmp4_;
   double tmp6_ = mCompCoord[0];
   double tmp7_ = (tmp1_)*tmp6_;
   double tmp8_ = mCompCoord[1];
   double tmp9_ = (tmp3_)*tmp8_;
   double tmp10_ = tmp7_+tmp9_;
   double tmp11_ = mCompCoord[2];
   double tmp12_ = (tmp5_)*tmp11_;
   double tmp13_ = tmp10_+tmp12_;
   double tmp14_ = (tmp1_)*(tmp1_);
   double tmp15_ = (tmp3_)*(tmp3_);
   double tmp16_ = tmp14_+tmp15_;
   double tmp17_ = (tmp5_)*(tmp5_);
   double tmp18_ = tmp16_+tmp17_;
   double tmp19_ = ElSquare(tmp13_);
   double tmp20_ = (tmp18_)-tmp19_;
   double tmp21_ = sqrt(tmp20_);
   double tmp22_ = -(1);
   double tmp23_ = tmp22_*(tmp1_);
   double tmp24_ = tmp22_*(tmp3_);
   double tmp25_ = tmp22_*(tmp5_);

  mVal[0] = tmp21_-mCompCoord[6];

  mCompDer[0][0] = (0.500000*-(2*(tmp1_)*(tmp13_)))/tmp21_;
  mCompDer[0][1] = (0.500000*-(2*(tmp3_)*(tmp13_)))/tmp21_;
  mCompDer[0][2] = (0.500000*-(2*(tmp5_)*(tmp13_)))/tmp21_;
  mCompDer[0][3] = (0.500000*((tmp23_+tmp23_)-2*tmp22_*tmp6_*(tmp13_)))/tmp21_;
  mCompDer[0][4] = (0.500000*((tmp24_+tmp24_)-2*tmp22_*tmp8_*(tmp13_)))/tmp21_;
  mCompDer[0][5] = (0.500000*((tmp25_+tmp25_)-2*tmp22_*tmp11_*(tmp13_)))/tmp21_;
  mCompDer[0][6] = tmp22_;
}


void cCylindre_EqRat_CodGen::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cCylindre_EqRat_CodGen Has no Der Sec");
}

void cCylindre_EqRat_CodGen::SetP2Proj_x(double aVal){ mLocP2Proj_x = aVal;}
void cCylindre_EqRat_CodGen::SetP2Proj_y(double aVal){ mLocP2Proj_y = aVal;}
void cCylindre_EqRat_CodGen::SetP2Proj_z(double aVal){ mLocP2Proj_z = aVal;}



double * cCylindre_EqRat_CodGen::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "P2Proj_x") return & mLocP2Proj_x;
   if (aName == "P2Proj_y") return & mLocP2Proj_y;
   if (aName == "P2Proj_z") return & mLocP2Proj_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cCylindre_EqRat_CodGen::mTheAuto("cCylindre_EqRat_CodGen",cCylindre_EqRat_CodGen::Alloc);


cElCompiledFonc *  cCylindre_EqRat_CodGen::Alloc()
{  return new cCylindre_EqRat_CodGen();
}


