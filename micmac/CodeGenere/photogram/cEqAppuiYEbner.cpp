// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cEqAppuiYEbner.h"


cEqAppuiYEbner::cEqAppuiYEbner():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,15));
   AddIntRef (cIncIntervale("Orient",15,21));
   Close(false);
}



void cEqAppuiYEbner::ComputeVal()
{
   double tmp0_ = mLocEbner_State_0_0*mLocEbner_State_0_0;
   double tmp1_ = tmp0_*0.666667;
   double tmp2_ = mLocXIm*mLocXIm;
   double tmp3_ = tmp2_-tmp1_;
   double tmp4_ = mLocYIm*mLocYIm;
   double tmp5_ = tmp4_-tmp1_;
   double tmp6_ = mCompCoord[15];
   double tmp7_ = mCompCoord[17];
   double tmp8_ = cos(tmp6_);
   double tmp9_ = cos(tmp7_);
   double tmp10_ = sin(tmp6_);
   double tmp11_ = mCompCoord[16];
   double tmp12_ = sin(tmp11_);
   double tmp13_ = -(tmp12_);
   double tmp14_ = sin(tmp7_);
   double tmp15_ = -(tmp10_);
   double tmp16_ = tmp8_*tmp13_;
   double tmp17_ = mCompCoord[18];
   double tmp18_ = mLocXTer-tmp17_;
   double tmp19_ = -(tmp14_);
   double tmp20_ = tmp10_*tmp13_;
   double tmp21_ = mCompCoord[19];
   double tmp22_ = mLocYTer-tmp21_;
   double tmp23_ = cos(tmp11_);
   double tmp24_ = mCompCoord[20];
   double tmp25_ = mLocZTer-tmp24_;

  mVal[0] = ((((1-mCompCoord[3])*mLocYIm+mCompCoord[4]*mLocXIm+mCompCoord[5]*mLocXIm*mLocYIm)-mCompCoord[6]*2*(tmp5_)+mCompCoord[8]*(tmp3_)+mCompCoord[10]*mLocYIm*(tmp3_)+mCompCoord[12]*mLocXIm*(tmp5_)+mCompCoord[14]*(tmp3_)*(tmp5_))-mCompCoord[2])/mCompCoord[0]-((tmp15_*tmp9_+tmp16_*tmp14_)*(tmp18_)+(tmp8_*tmp9_+tmp20_*tmp14_)*(tmp22_)+tmp23_*tmp14_*(tmp25_))/((tmp15_*tmp19_+tmp16_*tmp9_)*(tmp18_)+(tmp8_*tmp19_+tmp20_*tmp9_)*(tmp22_)+tmp23_*tmp9_*(tmp25_));

}


void cEqAppuiYEbner::ComputeValDeriv()
{
   double tmp0_ = mLocEbner_State_0_0*mLocEbner_State_0_0;
   double tmp1_ = tmp0_*0.666667;
   double tmp2_ = mLocXIm*mLocXIm;
   double tmp3_ = tmp2_-tmp1_;
   double tmp4_ = mLocYIm*mLocYIm;
   double tmp5_ = tmp4_-tmp1_;
   double tmp6_ = mCompCoord[15];
   double tmp7_ = mCompCoord[17];
   double tmp8_ = cos(tmp6_);
   double tmp9_ = cos(tmp7_);
   double tmp10_ = sin(tmp6_);
   double tmp11_ = mCompCoord[16];
   double tmp12_ = sin(tmp11_);
   double tmp13_ = -(tmp12_);
   double tmp14_ = sin(tmp7_);
   double tmp15_ = -(tmp10_);
   double tmp16_ = tmp8_*tmp13_;
   double tmp17_ = mCompCoord[18];
   double tmp18_ = mLocXTer-tmp17_;
   double tmp19_ = -(tmp14_);
   double tmp20_ = tmp10_*tmp13_;
   double tmp21_ = mCompCoord[19];
   double tmp22_ = mLocYTer-tmp21_;
   double tmp23_ = cos(tmp11_);
   double tmp24_ = mCompCoord[20];
   double tmp25_ = mLocZTer-tmp24_;
   double tmp26_ = mCompCoord[3];
   double tmp27_ = 1-tmp26_;
   double tmp28_ = (tmp27_)*mLocYIm;
   double tmp29_ = mCompCoord[4];
   double tmp30_ = tmp29_*mLocXIm;
   double tmp31_ = tmp28_+tmp30_;
   double tmp32_ = mCompCoord[5];
   double tmp33_ = mLocXIm*mLocYIm;
   double tmp34_ = tmp32_*tmp33_;
   double tmp35_ = tmp31_+tmp34_;
   double tmp36_ = mCompCoord[6];
   double tmp37_ = tmp36_*2;
   double tmp38_ = tmp37_*(tmp5_);
   double tmp39_ = (tmp35_)-tmp38_;
   double tmp40_ = mCompCoord[8];
   double tmp41_ = tmp40_*(tmp3_);
   double tmp42_ = tmp39_+tmp41_;
   double tmp43_ = mCompCoord[10];
   double tmp44_ = tmp43_*mLocYIm;
   double tmp45_ = tmp44_*(tmp3_);
   double tmp46_ = tmp42_+tmp45_;
   double tmp47_ = mCompCoord[12];
   double tmp48_ = tmp47_*mLocXIm;
   double tmp49_ = tmp48_*(tmp5_);
   double tmp50_ = tmp46_+tmp49_;
   double tmp51_ = mCompCoord[14];
   double tmp52_ = tmp51_*(tmp3_);
   double tmp53_ = tmp52_*(tmp5_);
   double tmp54_ = tmp50_+tmp53_;
   double tmp55_ = mCompCoord[2];
   double tmp56_ = (tmp54_)-tmp55_;
   double tmp57_ = mCompCoord[0];
   double tmp58_ = ElSquare(tmp57_);
   double tmp59_ = -(1);
   double tmp60_ = tmp59_*tmp10_;
   double tmp61_ = tmp16_*tmp14_;
   double tmp62_ = tmp15_*tmp19_;
   double tmp63_ = tmp16_*tmp9_;
   double tmp64_ = tmp62_+tmp63_;
   double tmp65_ = (tmp64_)*(tmp18_);
   double tmp66_ = tmp8_*tmp19_;
   double tmp67_ = tmp20_*tmp9_;
   double tmp68_ = tmp66_+tmp67_;
   double tmp69_ = (tmp68_)*(tmp22_);
   double tmp70_ = tmp65_+tmp69_;
   double tmp71_ = tmp23_*tmp9_;
   double tmp72_ = tmp71_*(tmp25_);
   double tmp73_ = tmp70_+tmp72_;
   double tmp74_ = tmp15_*tmp9_;
   double tmp75_ = tmp74_+tmp61_;
   double tmp76_ = (tmp75_)*(tmp18_);
   double tmp77_ = tmp8_*tmp9_;
   double tmp78_ = tmp20_*tmp14_;
   double tmp79_ = tmp77_+tmp78_;
   double tmp80_ = (tmp79_)*(tmp22_);
   double tmp81_ = tmp76_+tmp80_;
   double tmp82_ = tmp23_*tmp14_;
   double tmp83_ = tmp82_*(tmp25_);
   double tmp84_ = tmp81_+tmp83_;
   double tmp85_ = -(tmp8_);
   double tmp86_ = tmp60_*tmp13_;
   double tmp87_ = -(tmp23_);
   double tmp88_ = tmp87_*tmp8_;
   double tmp89_ = tmp87_*tmp10_;
   double tmp90_ = tmp59_*tmp12_;
   double tmp91_ = ElSquare(tmp73_);
   double tmp92_ = tmp59_*tmp14_;
   double tmp93_ = -(tmp9_);

  mVal[0] = (tmp56_)/tmp57_-(tmp84_)/(tmp73_);

  mCompDer[0][0] = -(tmp56_)/tmp58_;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = (tmp59_*tmp57_)/tmp58_;
  mCompDer[0][3] = (tmp59_*mLocYIm*tmp57_)/tmp58_;
  mCompDer[0][4] = (mLocXIm*tmp57_)/tmp58_;
  mCompDer[0][5] = (tmp33_*tmp57_)/tmp58_;
  mCompDer[0][6] = (-(2*(tmp5_))*tmp57_)/tmp58_;
  mCompDer[0][7] = 0;
  mCompDer[0][8] = ((tmp3_)*tmp57_)/tmp58_;
  mCompDer[0][9] = 0;
  mCompDer[0][10] = (mLocYIm*(tmp3_)*tmp57_)/tmp58_;
  mCompDer[0][11] = 0;
  mCompDer[0][12] = (mLocXIm*(tmp5_)*tmp57_)/tmp58_;
  mCompDer[0][13] = 0;
  mCompDer[0][14] = ((tmp3_)*(tmp5_)*tmp57_)/tmp58_;
  mCompDer[0][15] = -((((tmp85_*tmp9_+tmp86_*tmp14_)*(tmp18_)+(tmp60_*tmp9_+tmp61_)*(tmp22_))*(tmp73_)-(tmp84_)*((tmp85_*tmp19_+tmp86_*tmp9_)*(tmp18_)+(tmp60_*tmp19_+tmp63_)*(tmp22_)))/tmp91_);
  mCompDer[0][16] = -(((tmp88_*tmp14_*(tmp18_)+tmp89_*tmp14_*(tmp22_)+tmp90_*tmp14_*(tmp25_))*(tmp73_)-(tmp84_)*(tmp88_*tmp9_*(tmp18_)+tmp89_*tmp9_*(tmp22_)+tmp90_*tmp9_*(tmp25_)))/tmp91_);
  mCompDer[0][17] = -((((tmp92_*tmp15_+tmp9_*tmp16_)*(tmp18_)+(tmp92_*tmp8_+tmp9_*tmp20_)*(tmp22_)+tmp9_*tmp23_*(tmp25_))*(tmp73_)-(tmp84_)*((tmp93_*tmp15_+tmp92_*tmp16_)*(tmp18_)+(tmp93_*tmp8_+tmp92_*tmp20_)*(tmp22_)+tmp92_*tmp23_*(tmp25_)))/tmp91_);
  mCompDer[0][18] = -((tmp59_*(tmp75_)*(tmp73_)-(tmp84_)*tmp59_*(tmp64_))/tmp91_);
  mCompDer[0][19] = -((tmp59_*(tmp79_)*(tmp73_)-(tmp84_)*tmp59_*(tmp68_))/tmp91_);
  mCompDer[0][20] = -((tmp59_*tmp82_*(tmp73_)-(tmp84_)*tmp59_*tmp71_)/tmp91_);
}


void cEqAppuiYEbner::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppuiYEbner Has no Der Sec");
}

void cEqAppuiYEbner::SetEbner_State_0_0(double aVal){ mLocEbner_State_0_0 = aVal;}
void cEqAppuiYEbner::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppuiYEbner::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppuiYEbner::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppuiYEbner::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppuiYEbner::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppuiYEbner::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Ebner_State_0_0") return & mLocEbner_State_0_0;
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppuiYEbner::mTheAuto("cEqAppuiYEbner",cEqAppuiYEbner::Alloc);


cElCompiledFonc *  cEqAppuiYEbner::Alloc()
{  return new cEqAppuiYEbner();
}


