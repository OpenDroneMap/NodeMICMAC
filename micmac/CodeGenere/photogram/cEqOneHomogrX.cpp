// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cEqOneHomogrX.h"


cEqOneHomogrX::cEqOneHomogrX():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Hom",0,8));
   Close(false);
}



void cEqOneHomogrX::ComputeVal()
{

  mVal[0] = (mCompCoord[0]*mLocXL1+mCompCoord[1]*mLocYL1+mCompCoord[2])/(mCompCoord[6]*mLocXL1+mCompCoord[7]*mLocYL1+1)-mLocXL2;

}


void cEqOneHomogrX::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[6];
   double tmp1_ = tmp0_*mLocXL1;
   double tmp2_ = mCompCoord[7];
   double tmp3_ = tmp2_*mLocYL1;
   double tmp4_ = tmp1_+tmp3_;
   double tmp5_ = tmp4_+1;
   double tmp6_ = ElSquare(tmp5_);
   double tmp7_ = mCompCoord[0];
   double tmp8_ = tmp7_*mLocXL1;
   double tmp9_ = mCompCoord[1];
   double tmp10_ = tmp9_*mLocYL1;
   double tmp11_ = tmp8_+tmp10_;
   double tmp12_ = mCompCoord[2];
   double tmp13_ = tmp11_+tmp12_;

  mVal[0] = (tmp13_)/(tmp5_)-mLocXL2;

  mCompDer[0][0] = (mLocXL1*(tmp5_))/tmp6_;
  mCompDer[0][1] = (mLocYL1*(tmp5_))/tmp6_;
  mCompDer[0][2] = (tmp5_)/tmp6_;
  mCompDer[0][3] = 0;
  mCompDer[0][4] = 0;
  mCompDer[0][5] = 0;
  mCompDer[0][6] = -((tmp13_)*mLocXL1)/tmp6_;
  mCompDer[0][7] = -((tmp13_)*mLocYL1)/tmp6_;
}


void cEqOneHomogrX::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqOneHomogrX Has no Der Sec");
}

void cEqOneHomogrX::SetXL1(double aVal){ mLocXL1 = aVal;}
void cEqOneHomogrX::SetXL2(double aVal){ mLocXL2 = aVal;}
void cEqOneHomogrX::SetYL1(double aVal){ mLocYL1 = aVal;}



double * cEqOneHomogrX::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "XL1") return & mLocXL1;
   if (aName == "XL2") return & mLocXL2;
   if (aName == "YL1") return & mLocYL1;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqOneHomogrX::mTheAuto("cEqOneHomogrX",cEqOneHomogrX::Alloc);


cElCompiledFonc *  cEqOneHomogrX::Alloc()
{  return new cEqOneHomogrX();
}


