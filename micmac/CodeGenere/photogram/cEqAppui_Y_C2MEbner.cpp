// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_Y_C2MEbner.h"


cEqAppui_Y_C2MEbner::cEqAppui_Y_C2MEbner():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,15));
   AddIntRef (cIncIntervale("Orient",15,21));
   Close(false);
}



void cEqAppui_Y_C2MEbner::ComputeVal()
{
   double tmp0_ = mCompCoord[15];
   double tmp1_ = mCompCoord[17];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[16];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[18];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[19];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[20];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = mLocEbner_State_0_0*mLocEbner_State_0_0;
   double tmp21_ = tmp20_*0.666667;
   double tmp22_ = mLocXIm*mLocXIm;
   double tmp23_ = tmp22_-tmp21_;
   double tmp24_ = mLocYIm*mLocYIm;
   double tmp25_ = tmp24_-tmp21_;

  mVal[0] = (mCompCoord[2]+mCompCoord[0]*(((tmp9_*tmp3_+tmp10_*tmp8_)*(tmp12_)+(tmp2_*tmp3_+tmp14_*tmp8_)*(tmp16_)+tmp17_*tmp8_*(tmp19_))/((tmp9_*tmp13_+tmp10_*tmp3_)*(tmp12_)+(tmp2_*tmp13_+tmp14_*tmp3_)*(tmp16_)+tmp17_*tmp3_*(tmp19_))))-(((1-mCompCoord[3])*mLocYIm+mCompCoord[4]*mLocXIm+mCompCoord[5]*mLocXIm*mLocYIm)-mCompCoord[6]*2*(tmp25_)+mCompCoord[8]*(tmp23_)+mCompCoord[10]*mLocYIm*(tmp23_)+mCompCoord[12]*mLocXIm*(tmp25_)+mCompCoord[14]*(tmp23_)*(tmp25_));

}


void cEqAppui_Y_C2MEbner::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[15];
   double tmp1_ = mCompCoord[17];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[16];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[18];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[19];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[20];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = mLocEbner_State_0_0*mLocEbner_State_0_0;
   double tmp21_ = tmp20_*0.666667;
   double tmp22_ = mLocXIm*mLocXIm;
   double tmp23_ = tmp22_-tmp21_;
   double tmp24_ = mLocYIm*mLocYIm;
   double tmp25_ = tmp24_-tmp21_;
   double tmp26_ = tmp9_*tmp3_;
   double tmp27_ = tmp10_*tmp8_;
   double tmp28_ = tmp26_+tmp27_;
   double tmp29_ = (tmp28_)*(tmp12_);
   double tmp30_ = tmp2_*tmp3_;
   double tmp31_ = tmp14_*tmp8_;
   double tmp32_ = tmp30_+tmp31_;
   double tmp33_ = (tmp32_)*(tmp16_);
   double tmp34_ = tmp29_+tmp33_;
   double tmp35_ = tmp17_*tmp8_;
   double tmp36_ = tmp35_*(tmp19_);
   double tmp37_ = tmp34_+tmp36_;
   double tmp38_ = tmp9_*tmp13_;
   double tmp39_ = tmp10_*tmp3_;
   double tmp40_ = tmp38_+tmp39_;
   double tmp41_ = (tmp40_)*(tmp12_);
   double tmp42_ = tmp2_*tmp13_;
   double tmp43_ = tmp14_*tmp3_;
   double tmp44_ = tmp42_+tmp43_;
   double tmp45_ = (tmp44_)*(tmp16_);
   double tmp46_ = tmp41_+tmp45_;
   double tmp47_ = tmp17_*tmp3_;
   double tmp48_ = tmp47_*(tmp19_);
   double tmp49_ = tmp46_+tmp48_;
   double tmp50_ = (tmp37_)/(tmp49_);
   double tmp51_ = mLocXIm*mLocYIm;
   double tmp52_ = -(1);
   double tmp53_ = tmp52_*tmp4_;
   double tmp54_ = -(tmp2_);
   double tmp55_ = tmp53_*tmp7_;
   double tmp56_ = mCompCoord[0];
   double tmp57_ = -(tmp17_);
   double tmp58_ = tmp57_*tmp2_;
   double tmp59_ = tmp57_*tmp4_;
   double tmp60_ = tmp52_*tmp6_;
   double tmp61_ = ElSquare(tmp49_);
   double tmp62_ = tmp52_*tmp8_;
   double tmp63_ = -(tmp3_);

  mVal[0] = (mCompCoord[2]+tmp56_*(tmp50_))-(((1-mCompCoord[3])*mLocYIm+mCompCoord[4]*mLocXIm+mCompCoord[5]*tmp51_)-mCompCoord[6]*2*(tmp25_)+mCompCoord[8]*(tmp23_)+mCompCoord[10]*mLocYIm*(tmp23_)+mCompCoord[12]*mLocXIm*(tmp25_)+mCompCoord[14]*(tmp23_)*(tmp25_));

  mCompDer[0][0] = tmp50_;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 1;
  mCompDer[0][3] = -(tmp52_*mLocYIm);
  mCompDer[0][4] = -(mLocXIm);
  mCompDer[0][5] = -(tmp51_);
  mCompDer[0][6] = -(-(2*(tmp25_)));
  mCompDer[0][7] = 0;
  mCompDer[0][8] = -(tmp23_);
  mCompDer[0][9] = 0;
  mCompDer[0][10] = -(mLocYIm*(tmp23_));
  mCompDer[0][11] = 0;
  mCompDer[0][12] = -(mLocXIm*(tmp25_));
  mCompDer[0][13] = 0;
  mCompDer[0][14] = -((tmp23_)*(tmp25_));
  mCompDer[0][15] = ((((tmp54_*tmp3_+tmp55_*tmp8_)*(tmp12_)+(tmp53_*tmp3_+tmp27_)*(tmp16_))*(tmp49_)-(tmp37_)*((tmp54_*tmp13_+tmp55_*tmp3_)*(tmp12_)+(tmp53_*tmp13_+tmp39_)*(tmp16_)))/tmp61_)*tmp56_;
  mCompDer[0][16] = (((tmp58_*tmp8_*(tmp12_)+tmp59_*tmp8_*(tmp16_)+tmp60_*tmp8_*(tmp19_))*(tmp49_)-(tmp37_)*(tmp58_*tmp3_*(tmp12_)+tmp59_*tmp3_*(tmp16_)+tmp60_*tmp3_*(tmp19_)))/tmp61_)*tmp56_;
  mCompDer[0][17] = ((((tmp62_*tmp9_+tmp3_*tmp10_)*(tmp12_)+(tmp62_*tmp2_+tmp3_*tmp14_)*(tmp16_)+tmp3_*tmp17_*(tmp19_))*(tmp49_)-(tmp37_)*((tmp63_*tmp9_+tmp62_*tmp10_)*(tmp12_)+(tmp63_*tmp2_+tmp62_*tmp14_)*(tmp16_)+tmp62_*tmp17_*(tmp19_)))/tmp61_)*tmp56_;
  mCompDer[0][18] = ((tmp52_*(tmp28_)*(tmp49_)-(tmp37_)*tmp52_*(tmp40_))/tmp61_)*tmp56_;
  mCompDer[0][19] = ((tmp52_*(tmp32_)*(tmp49_)-(tmp37_)*tmp52_*(tmp44_))/tmp61_)*tmp56_;
  mCompDer[0][20] = ((tmp52_*tmp35_*(tmp49_)-(tmp37_)*tmp52_*tmp47_)/tmp61_)*tmp56_;
}


void cEqAppui_Y_C2MEbner::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_Y_C2MEbner Has no Der Sec");
}

void cEqAppui_Y_C2MEbner::SetEbner_State_0_0(double aVal){ mLocEbner_State_0_0 = aVal;}
void cEqAppui_Y_C2MEbner::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_Y_C2MEbner::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_Y_C2MEbner::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_Y_C2MEbner::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_Y_C2MEbner::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_Y_C2MEbner::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Ebner_State_0_0") return & mLocEbner_State_0_0;
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_Y_C2MEbner::mTheAuto("cEqAppui_Y_C2MEbner",cEqAppui_Y_C2MEbner::Alloc);


cElCompiledFonc *  cEqAppui_Y_C2MEbner::Alloc()
{  return new cEqAppui_Y_C2MEbner();
}


