// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cEqBBCamSecond_AccelCsteCoord.h"


cEqBBCamSecond_AccelCsteCoord::cEqBBCamSecond_AccelCsteCoord():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("C2",3,4));
   AddIntRef (cIncIntervale("D2",4,5));
   AddIntRef (cIncIntervale("Omega2",0,3));
   AddIntRef (cIncIntervale("Tmp_PTer",5,8));
   Close(false);
}



void cEqBBCamSecond_AccelCsteCoord::ComputeVal()
{
   double tmp0_ = mCompCoord[7];
   double tmp1_ = tmp0_-mLocVecB2_z;

  mVal[0] = mLocI2_x-(mCompCoord[5]-mLocVecB2_x)/(tmp1_);

  mVal[1] = mLocI2_y-(mCompCoord[6]-mLocVecB2_y)/(tmp1_);

}


void cEqBBCamSecond_AccelCsteCoord::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[5];
   double tmp1_ = tmp0_-mLocVecB2_x;
   double tmp2_ = mCompCoord[7];
   double tmp3_ = tmp2_-mLocVecB2_z;
   double tmp4_ = ElSquare(tmp3_);
   double tmp5_ = mCompCoord[6];
   double tmp6_ = tmp5_-mLocVecB2_y;
   double tmp7_ = -(tmp0_);
   double tmp8_ = -(mLocVecC2_z);
   double tmp9_ = -(mLocVecD2_z);
   double tmp10_ = (tmp3_)/tmp4_;
   double tmp11_ = -(tmp10_);

  mVal[0] = mLocI2_x-(tmp1_)/(tmp3_);

  mCompDer[0][0] = -(-((tmp1_)*tmp5_)/tmp4_);
  mCompDer[0][1] = -((tmp2_*(tmp3_)-(tmp1_)*tmp7_)/tmp4_);
  mCompDer[0][2] = -((-(tmp5_)*(tmp3_))/tmp4_);
  mCompDer[0][3] = -((-(mLocVecC2_x)*(tmp3_)-(tmp1_)*tmp8_)/tmp4_);
  mCompDer[0][4] = -((-(mLocVecD2_x)*(tmp3_)-(tmp1_)*tmp9_)/tmp4_);
  mCompDer[0][5] = tmp11_;
  mCompDer[0][6] = 0;
  mCompDer[0][7] = -(-(tmp1_)/tmp4_);
  mVal[1] = mLocI2_y-(tmp6_)/(tmp3_);

  mCompDer[1][0] = -((-(tmp2_)*(tmp3_)-(tmp6_)*tmp5_)/tmp4_);
  mCompDer[1][1] = -(-((tmp6_)*tmp7_)/tmp4_);
  mCompDer[1][2] = -((tmp0_*(tmp3_))/tmp4_);
  mCompDer[1][3] = -((-(mLocVecC2_y)*(tmp3_)-(tmp6_)*tmp8_)/tmp4_);
  mCompDer[1][4] = -((-(mLocVecD2_y)*(tmp3_)-(tmp6_)*tmp9_)/tmp4_);
  mCompDer[1][5] = 0;
  mCompDer[1][6] = tmp11_;
  mCompDer[1][7] = -(-(tmp6_)/tmp4_);
}


void cEqBBCamSecond_AccelCsteCoord::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqBBCamSecond_AccelCsteCoord Has no Der Sec");
}

void cEqBBCamSecond_AccelCsteCoord::SetI2_x(double aVal){ mLocI2_x = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetI2_y(double aVal){ mLocI2_y = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecB2_x(double aVal){ mLocVecB2_x = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecB2_y(double aVal){ mLocVecB2_y = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecB2_z(double aVal){ mLocVecB2_z = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecC2_x(double aVal){ mLocVecC2_x = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecC2_y(double aVal){ mLocVecC2_y = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecC2_z(double aVal){ mLocVecC2_z = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecD2_x(double aVal){ mLocVecD2_x = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecD2_y(double aVal){ mLocVecD2_y = aVal;}
void cEqBBCamSecond_AccelCsteCoord::SetVecD2_z(double aVal){ mLocVecD2_z = aVal;}



double * cEqBBCamSecond_AccelCsteCoord::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "I2_x") return & mLocI2_x;
   if (aName == "I2_y") return & mLocI2_y;
   if (aName == "VecB2_x") return & mLocVecB2_x;
   if (aName == "VecB2_y") return & mLocVecB2_y;
   if (aName == "VecB2_z") return & mLocVecB2_z;
   if (aName == "VecC2_x") return & mLocVecC2_x;
   if (aName == "VecC2_y") return & mLocVecC2_y;
   if (aName == "VecC2_z") return & mLocVecC2_z;
   if (aName == "VecD2_x") return & mLocVecD2_x;
   if (aName == "VecD2_y") return & mLocVecD2_y;
   if (aName == "VecD2_z") return & mLocVecD2_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqBBCamSecond_AccelCsteCoord::mTheAuto("cEqBBCamSecond_AccelCsteCoord",cEqBBCamSecond_AccelCsteCoord::Alloc);


cElCompiledFonc *  cEqBBCamSecond_AccelCsteCoord::Alloc()
{  return new cEqBBCamSecond_AccelCsteCoord();
}


