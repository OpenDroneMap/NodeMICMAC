// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_X_M2CNoDist.h"


cEqAppui_X_M2CNoDist::cEqAppui_X_M2CNoDist():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,3));
   AddIntRef (cIncIntervale("Orient",3,9));
   Close(false);
}



void cEqAppui_X_M2CNoDist::ComputeVal()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mCompCoord[4];
   double tmp2_ = cos(tmp1_);
   double tmp3_ = sin(tmp0_);
   double tmp4_ = cos(tmp0_);
   double tmp5_ = sin(tmp1_);
   double tmp6_ = mCompCoord[5];
   double tmp7_ = mCompCoord[6];
   double tmp8_ = mLocXTer-tmp7_;
   double tmp9_ = sin(tmp6_);
   double tmp10_ = -(tmp9_);
   double tmp11_ = -(tmp5_);
   double tmp12_ = cos(tmp6_);
   double tmp13_ = mCompCoord[7];
   double tmp14_ = mLocYTer-tmp13_;
   double tmp15_ = mCompCoord[8];
   double tmp16_ = mLocZTer-tmp15_;

  mVal[0] = (mCompCoord[1]+mCompCoord[0]*((tmp4_*tmp2_*(tmp8_)+tmp3_*tmp2_*(tmp14_)+tmp5_*(tmp16_))/((-(tmp3_)*tmp10_+tmp4_*tmp11_*tmp12_)*(tmp8_)+(tmp4_*tmp10_+tmp3_*tmp11_*tmp12_)*(tmp14_)+tmp2_*tmp12_*(tmp16_))))-mLocXIm;

}


void cEqAppui_X_M2CNoDist::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mCompCoord[4];
   double tmp2_ = cos(tmp1_);
   double tmp3_ = sin(tmp0_);
   double tmp4_ = cos(tmp0_);
   double tmp5_ = sin(tmp1_);
   double tmp6_ = mCompCoord[5];
   double tmp7_ = mCompCoord[6];
   double tmp8_ = mLocXTer-tmp7_;
   double tmp9_ = sin(tmp6_);
   double tmp10_ = -(tmp9_);
   double tmp11_ = -(tmp5_);
   double tmp12_ = cos(tmp6_);
   double tmp13_ = mCompCoord[7];
   double tmp14_ = mLocYTer-tmp13_;
   double tmp15_ = mCompCoord[8];
   double tmp16_ = mLocZTer-tmp15_;
   double tmp17_ = tmp4_*tmp2_;
   double tmp18_ = tmp17_*(tmp8_);
   double tmp19_ = tmp3_*tmp2_;
   double tmp20_ = tmp19_*(tmp14_);
   double tmp21_ = tmp18_+tmp20_;
   double tmp22_ = tmp5_*(tmp16_);
   double tmp23_ = tmp21_+tmp22_;
   double tmp24_ = -(tmp3_);
   double tmp25_ = tmp24_*tmp10_;
   double tmp26_ = tmp4_*tmp11_;
   double tmp27_ = tmp26_*tmp12_;
   double tmp28_ = tmp25_+tmp27_;
   double tmp29_ = (tmp28_)*(tmp8_);
   double tmp30_ = tmp4_*tmp10_;
   double tmp31_ = tmp3_*tmp11_;
   double tmp32_ = tmp31_*tmp12_;
   double tmp33_ = tmp30_+tmp32_;
   double tmp34_ = (tmp33_)*(tmp14_);
   double tmp35_ = tmp29_+tmp34_;
   double tmp36_ = tmp2_*tmp12_;
   double tmp37_ = tmp36_*(tmp16_);
   double tmp38_ = tmp35_+tmp37_;
   double tmp39_ = (tmp23_)/(tmp38_);
   double tmp40_ = -(1);
   double tmp41_ = tmp40_*tmp3_;
   double tmp42_ = mCompCoord[0];
   double tmp43_ = tmp40_*tmp5_;
   double tmp44_ = -(tmp2_);
   double tmp45_ = ElSquare(tmp38_);
   double tmp46_ = -(tmp12_);
   double tmp47_ = tmp40_*tmp9_;

  mVal[0] = (mCompCoord[1]+tmp42_*(tmp39_))-mLocXIm;

  mCompDer[0][0] = tmp39_;
  mCompDer[0][1] = 1;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = (((tmp41_*tmp2_*(tmp8_)+tmp17_*(tmp14_))*(tmp38_)-(tmp23_)*((-(tmp4_)*tmp10_+tmp41_*tmp11_*tmp12_)*(tmp8_)+(tmp41_*tmp10_+tmp27_)*(tmp14_)))/tmp45_)*tmp42_;
  mCompDer[0][4] = (((tmp43_*tmp4_*(tmp8_)+tmp43_*tmp3_*(tmp14_)+tmp2_*(tmp16_))*(tmp38_)-(tmp23_)*(tmp44_*tmp4_*tmp12_*(tmp8_)+tmp44_*tmp3_*tmp12_*(tmp14_)+tmp43_*tmp12_*(tmp16_)))/tmp45_)*tmp42_;
  mCompDer[0][5] = (-((tmp23_)*((tmp46_*tmp24_+tmp47_*tmp26_)*(tmp8_)+(tmp46_*tmp4_+tmp47_*tmp31_)*(tmp14_)+tmp47_*tmp2_*(tmp16_)))/tmp45_)*tmp42_;
  mCompDer[0][6] = ((tmp40_*tmp17_*(tmp38_)-(tmp23_)*tmp40_*(tmp28_))/tmp45_)*tmp42_;
  mCompDer[0][7] = ((tmp40_*tmp19_*(tmp38_)-(tmp23_)*tmp40_*(tmp33_))/tmp45_)*tmp42_;
  mCompDer[0][8] = ((tmp43_*(tmp38_)-(tmp23_)*tmp40_*tmp36_)/tmp45_)*tmp42_;
}


void cEqAppui_X_M2CNoDist::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_X_M2CNoDist Has no Der Sec");
}

void cEqAppui_X_M2CNoDist::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_X_M2CNoDist::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_X_M2CNoDist::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_X_M2CNoDist::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_X_M2CNoDist::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_X_M2CNoDist::mTheAuto("cEqAppui_X_M2CNoDist",cEqAppui_X_M2CNoDist::Alloc);


cElCompiledFonc *  cEqAppui_X_M2CNoDist::Alloc()
{  return new cEqAppui_X_M2CNoDist();
}


