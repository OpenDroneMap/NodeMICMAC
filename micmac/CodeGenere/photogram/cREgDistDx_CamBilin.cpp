// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cREgDistDx_CamBilin.h"


cREgDistDx_CamBilin::cREgDistDx_CamBilin():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("Intr",0,11));
   Close(false);
}



void cREgDistDx_CamBilin::ComputeVal()
{
   double tmp0_ = mLocPts1_x - mLocRegDistu1_x;
   double tmp1_ = mLocPts1_x - mLocPts0_x;
   double tmp2_ = (tmp0_) / (tmp1_);
   double tmp3_ = mLocPts2_y - mLocRegDistu1_y;
   double tmp4_ = mLocPts2_y - mLocPts0_y;
   double tmp5_ = (tmp3_) / (tmp4_);
   double tmp6_ = 1 - tmp2_;
   double tmp7_ = 1 - tmp5_;
   double tmp8_ = mCompCoord[3];
   double tmp9_ = mCompCoord[5];
   double tmp10_ = mLocPts1_x - mLocRegDistu2_x;
   double tmp11_ = (tmp10_) / (tmp1_);
   double tmp12_ = mLocPts2_y - mLocRegDistu2_y;
   double tmp13_ = (tmp12_) / (tmp4_);
   double tmp14_ = mCompCoord[7];
   double tmp15_ = mCompCoord[9];
   double tmp16_ = 1 - tmp11_;
   double tmp17_ = 1 - tmp13_;
   double tmp18_ = (tmp2_) * (tmp5_);
   double tmp19_ = (tmp6_) * (tmp5_);
   double tmp20_ = (tmp2_) * (tmp7_);
   double tmp21_ = (tmp6_) * (tmp7_);
   double tmp22_ = mCompCoord[4];
   double tmp23_ = (tmp11_) * (tmp13_);
   double tmp24_ = mCompCoord[6];
   double tmp25_ = (tmp16_) * (tmp13_);
   double tmp26_ = mCompCoord[8];
   double tmp27_ = (tmp11_) * (tmp17_);
   double tmp28_ = mCompCoord[10];
   double tmp29_ = (tmp16_) * (tmp17_);

  mVal[0] = (tmp8_ * tmp18_ + tmp9_ * tmp19_ + tmp14_ * tmp20_ + tmp15_ * tmp21_) - (tmp8_ * tmp23_ + tmp9_ * tmp25_ + tmp14_ * tmp27_ + tmp15_ * tmp29_) - mLocRegDistu3_x;

  mVal[1] = (tmp22_ * tmp18_ + tmp24_ * tmp19_ + tmp26_ * tmp20_ + tmp28_ * tmp21_) - (tmp22_ * tmp23_ + tmp24_ * tmp25_ + tmp26_ * tmp27_ + tmp28_ * tmp29_) - mLocRegDistu3_y;

}


void cREgDistDx_CamBilin::ComputeValDeriv()
{
   double tmp0_ = mLocPts1_x - mLocRegDistu1_x;
   double tmp1_ = mLocPts1_x - mLocPts0_x;
   double tmp2_ = (tmp0_) / (tmp1_);
   double tmp3_ = mLocPts2_y - mLocRegDistu1_y;
   double tmp4_ = mLocPts2_y - mLocPts0_y;
   double tmp5_ = (tmp3_) / (tmp4_);
   double tmp6_ = 1 - tmp2_;
   double tmp7_ = 1 - tmp5_;
   double tmp8_ = mCompCoord[3];
   double tmp9_ = mCompCoord[5];
   double tmp10_ = mLocPts1_x - mLocRegDistu2_x;
   double tmp11_ = (tmp10_) / (tmp1_);
   double tmp12_ = mLocPts2_y - mLocRegDistu2_y;
   double tmp13_ = (tmp12_) / (tmp4_);
   double tmp14_ = mCompCoord[7];
   double tmp15_ = mCompCoord[9];
   double tmp16_ = 1 - tmp11_;
   double tmp17_ = 1 - tmp13_;
   double tmp18_ = (tmp2_) * (tmp5_);
   double tmp19_ = (tmp11_) * (tmp13_);
   double tmp20_ = (tmp6_) * (tmp5_);
   double tmp21_ = (tmp16_) * (tmp13_);
   double tmp22_ = (tmp2_) * (tmp7_);
   double tmp23_ = (tmp11_) * (tmp17_);
   double tmp24_ = (tmp6_) * (tmp7_);
   double tmp25_ = (tmp16_) * (tmp17_);
   double tmp26_ = mCompCoord[4];
   double tmp27_ = mCompCoord[6];
   double tmp28_ = mCompCoord[8];
   double tmp29_ = mCompCoord[10];
   double tmp30_ = tmp18_ - tmp19_;
   double tmp31_ = tmp20_ - tmp21_;
   double tmp32_ = tmp22_ - tmp23_;
   double tmp33_ = tmp24_ - tmp25_;

  mVal[0] = (tmp8_ * tmp18_ + tmp9_ * tmp20_ + tmp14_ * tmp22_ + tmp15_ * tmp24_) - (tmp8_ * tmp19_ + tmp9_ * tmp21_ + tmp14_ * tmp23_ + tmp15_ * tmp25_) - mLocRegDistu3_x;

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = tmp30_;
  mCompDer[0][4] = 0;
  mCompDer[0][5] = tmp31_;
  mCompDer[0][6] = 0;
  mCompDer[0][7] = tmp32_;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = tmp33_;
  mCompDer[0][10] = 0;
  mVal[1] = (tmp26_ * tmp18_ + tmp27_ * tmp20_ + tmp28_ * tmp22_ + tmp29_ * tmp24_) - (tmp26_ * tmp19_ + tmp27_ * tmp21_ + tmp28_ * tmp23_ + tmp29_ * tmp25_) - mLocRegDistu3_y;

  mCompDer[1][0] = 0;
  mCompDer[1][1] = 0;
  mCompDer[1][2] = 0;
  mCompDer[1][3] = 0;
  mCompDer[1][4] = tmp30_;
  mCompDer[1][5] = 0;
  mCompDer[1][6] = tmp31_;
  mCompDer[1][7] = 0;
  mCompDer[1][8] = tmp32_;
  mCompDer[1][9] = 0;
  mCompDer[1][10] = tmp33_;
}


void cREgDistDx_CamBilin::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cREgDistDx_CamBilin Has no Der Sec");
}

void cREgDistDx_CamBilin::SetPts0_x(double aVal){ mLocPts0_x = aVal;}
void cREgDistDx_CamBilin::SetPts0_y(double aVal){ mLocPts0_y = aVal;}
void cREgDistDx_CamBilin::SetPts1_x(double aVal){ mLocPts1_x = aVal;}
void cREgDistDx_CamBilin::SetPts2_y(double aVal){ mLocPts2_y = aVal;}
void cREgDistDx_CamBilin::SetRegDistu1_x(double aVal){ mLocRegDistu1_x = aVal;}
void cREgDistDx_CamBilin::SetRegDistu1_y(double aVal){ mLocRegDistu1_y = aVal;}
void cREgDistDx_CamBilin::SetRegDistu2_x(double aVal){ mLocRegDistu2_x = aVal;}
void cREgDistDx_CamBilin::SetRegDistu2_y(double aVal){ mLocRegDistu2_y = aVal;}
void cREgDistDx_CamBilin::SetRegDistu3_x(double aVal){ mLocRegDistu3_x = aVal;}
void cREgDistDx_CamBilin::SetRegDistu3_y(double aVal){ mLocRegDistu3_y = aVal;}



double * cREgDistDx_CamBilin::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Pts0_x") return & mLocPts0_x;
   if (aName == "Pts0_y") return & mLocPts0_y;
   if (aName == "Pts1_x") return & mLocPts1_x;
   if (aName == "Pts2_y") return & mLocPts2_y;
   if (aName == "RegDistu1_x") return & mLocRegDistu1_x;
   if (aName == "RegDistu1_y") return & mLocRegDistu1_y;
   if (aName == "RegDistu2_x") return & mLocRegDistu2_x;
   if (aName == "RegDistu2_y") return & mLocRegDistu2_y;
   if (aName == "RegDistu3_x") return & mLocRegDistu3_x;
   if (aName == "RegDistu3_y") return & mLocRegDistu3_y;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cREgDistDx_CamBilin::mTheAuto("cREgDistDx_CamBilin",cREgDistDx_CamBilin::Alloc);


cElCompiledFonc *  cREgDistDx_CamBilin::Alloc()
{  return new cREgDistDx_CamBilin();
}


