// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_Y_C2MDRad5APFraser.h"


cEqAppui_Y_C2MDRad5APFraser::cEqAppui_Y_C2MDRad5APFraser():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,14));
   AddIntRef (cIncIntervale("Orient",14,20));
   Close(false);
}



void cEqAppui_Y_C2MDRad5APFraser::ComputeVal()
{
   double tmp0_ = mCompCoord[14];
   double tmp1_ = mCompCoord[16];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[15];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[17];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[18];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[19];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = mCompCoord[4];
   double tmp21_ = mCompCoord[3];
   double tmp22_ = mLocXIm-tmp21_;
   double tmp23_ = mLocYIm-tmp20_;
   double tmp24_ = (tmp22_)*(tmp22_);
   double tmp25_ = (tmp23_)*(tmp23_);
   double tmp26_ = tmp24_+tmp25_;
   double tmp27_ = (tmp26_)*(tmp26_);
   double tmp28_ = tmp27_*(tmp26_);
   double tmp29_ = tmp28_*(tmp26_);
   double tmp30_ = ElSquare(tmp23_);

  mVal[0] = (mCompCoord[2]+mCompCoord[0]*(((tmp9_*tmp3_+tmp10_*tmp8_)*(tmp12_)+(tmp2_*tmp3_+tmp14_*tmp8_)*(tmp16_)+tmp17_*tmp8_*(tmp19_))/((tmp9_*tmp13_+tmp10_*tmp3_)*(tmp12_)+(tmp2_*tmp13_+tmp14_*tmp3_)*(tmp16_)+tmp17_*tmp3_*(tmp19_))))-(tmp20_+(tmp23_)*(1+(tmp26_)*mCompCoord[5]+tmp27_*mCompCoord[6]+tmp28_*mCompCoord[7]+tmp29_*mCompCoord[8]+tmp29_*(tmp26_)*mCompCoord[9])+(2*tmp30_+ElSquare(tmp22_)+tmp30_)*mCompCoord[11]+2*(tmp22_)*(tmp23_)*mCompCoord[10]);

}


void cEqAppui_Y_C2MDRad5APFraser::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[14];
   double tmp1_ = mCompCoord[16];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[15];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[17];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[18];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[19];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = mCompCoord[4];
   double tmp21_ = mCompCoord[3];
   double tmp22_ = mLocXIm-tmp21_;
   double tmp23_ = mLocYIm-tmp20_;
   double tmp24_ = (tmp22_)*(tmp22_);
   double tmp25_ = (tmp23_)*(tmp23_);
   double tmp26_ = tmp24_+tmp25_;
   double tmp27_ = (tmp26_)*(tmp26_);
   double tmp28_ = tmp27_*(tmp26_);
   double tmp29_ = tmp28_*(tmp26_);
   double tmp30_ = ElSquare(tmp23_);
   double tmp31_ = tmp9_*tmp3_;
   double tmp32_ = tmp10_*tmp8_;
   double tmp33_ = tmp31_+tmp32_;
   double tmp34_ = (tmp33_)*(tmp12_);
   double tmp35_ = tmp2_*tmp3_;
   double tmp36_ = tmp14_*tmp8_;
   double tmp37_ = tmp35_+tmp36_;
   double tmp38_ = (tmp37_)*(tmp16_);
   double tmp39_ = tmp34_+tmp38_;
   double tmp40_ = tmp17_*tmp8_;
   double tmp41_ = tmp40_*(tmp19_);
   double tmp42_ = tmp39_+tmp41_;
   double tmp43_ = tmp9_*tmp13_;
   double tmp44_ = tmp10_*tmp3_;
   double tmp45_ = tmp43_+tmp44_;
   double tmp46_ = (tmp45_)*(tmp12_);
   double tmp47_ = tmp2_*tmp13_;
   double tmp48_ = tmp14_*tmp3_;
   double tmp49_ = tmp47_+tmp48_;
   double tmp50_ = (tmp49_)*(tmp16_);
   double tmp51_ = tmp46_+tmp50_;
   double tmp52_ = tmp17_*tmp3_;
   double tmp53_ = tmp52_*(tmp19_);
   double tmp54_ = tmp51_+tmp53_;
   double tmp55_ = (tmp42_)/(tmp54_);
   double tmp56_ = -(1);
   double tmp57_ = tmp56_*(tmp22_);
   double tmp58_ = mCompCoord[5];
   double tmp59_ = tmp57_+tmp57_;
   double tmp60_ = (tmp59_)*(tmp26_);
   double tmp61_ = mCompCoord[6];
   double tmp62_ = tmp60_+tmp60_;
   double tmp63_ = mCompCoord[7];
   double tmp64_ = (tmp62_)*(tmp26_);
   double tmp65_ = (tmp59_)*tmp27_;
   double tmp66_ = tmp64_+tmp65_;
   double tmp67_ = mCompCoord[8];
   double tmp68_ = (tmp66_)*(tmp26_);
   double tmp69_ = (tmp59_)*tmp28_;
   double tmp70_ = tmp68_+tmp69_;
   double tmp71_ = mCompCoord[9];
   double tmp72_ = mCompCoord[11];
   double tmp73_ = mCompCoord[10];
   double tmp74_ = (tmp26_)*tmp58_;
   double tmp75_ = 1+tmp74_;
   double tmp76_ = tmp27_*tmp61_;
   double tmp77_ = tmp75_+tmp76_;
   double tmp78_ = tmp28_*tmp63_;
   double tmp79_ = tmp77_+tmp78_;
   double tmp80_ = tmp29_*tmp67_;
   double tmp81_ = tmp79_+tmp80_;
   double tmp82_ = tmp29_*(tmp26_);
   double tmp83_ = tmp82_*tmp71_;
   double tmp84_ = tmp81_+tmp83_;
   double tmp85_ = tmp56_*(tmp23_);
   double tmp86_ = tmp85_+tmp85_;
   double tmp87_ = (tmp86_)*(tmp26_);
   double tmp88_ = tmp87_+tmp87_;
   double tmp89_ = (tmp88_)*(tmp26_);
   double tmp90_ = (tmp86_)*tmp27_;
   double tmp91_ = tmp89_+tmp90_;
   double tmp92_ = (tmp91_)*(tmp26_);
   double tmp93_ = (tmp86_)*tmp28_;
   double tmp94_ = tmp92_+tmp93_;
   double tmp95_ = 2*tmp56_;
   double tmp96_ = tmp95_*(tmp23_);
   double tmp97_ = 2*(tmp22_);
   double tmp98_ = tmp97_*(tmp23_);
   double tmp99_ = 2*tmp30_;
   double tmp100_ = ElSquare(tmp22_);
   double tmp101_ = tmp100_+tmp30_;
   double tmp102_ = tmp99_+tmp101_;
   double tmp103_ = tmp56_*tmp4_;
   double tmp104_ = -(tmp2_);
   double tmp105_ = tmp103_*tmp7_;
   double tmp106_ = mCompCoord[0];
   double tmp107_ = -(tmp17_);
   double tmp108_ = tmp107_*tmp2_;
   double tmp109_ = tmp107_*tmp4_;
   double tmp110_ = tmp56_*tmp6_;
   double tmp111_ = ElSquare(tmp54_);
   double tmp112_ = tmp56_*tmp8_;
   double tmp113_ = -(tmp3_);

  mVal[0] = (mCompCoord[2]+tmp106_*(tmp55_))-(tmp20_+(tmp23_)*(tmp84_)+(tmp102_)*tmp72_+tmp98_*tmp73_);

  mCompDer[0][0] = tmp55_;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 1;
  mCompDer[0][3] = -(((tmp59_)*tmp58_+(tmp62_)*tmp61_+(tmp66_)*tmp63_+(tmp70_)*tmp67_+((tmp70_)*(tmp26_)+(tmp59_)*tmp29_)*tmp71_)*(tmp23_)+tmp95_*(tmp22_)*tmp72_+tmp56_*2*(tmp23_)*tmp73_);
  mCompDer[0][4] = -(1+tmp56_*(tmp84_)+((tmp86_)*tmp58_+(tmp88_)*tmp61_+(tmp91_)*tmp63_+(tmp94_)*tmp67_+((tmp94_)*(tmp26_)+(tmp86_)*tmp29_)*tmp71_)*(tmp23_)+(tmp96_*2+tmp96_)*tmp72_+tmp56_*tmp97_*tmp73_);
  mCompDer[0][5] = -((tmp26_)*(tmp23_));
  mCompDer[0][6] = -(tmp27_*(tmp23_));
  mCompDer[0][7] = -(tmp28_*(tmp23_));
  mCompDer[0][8] = -(tmp29_*(tmp23_));
  mCompDer[0][9] = -(tmp82_*(tmp23_));
  mCompDer[0][10] = -(tmp98_);
  mCompDer[0][11] = -(tmp102_);
  mCompDer[0][12] = 0;
  mCompDer[0][13] = 0;
  mCompDer[0][14] = ((((tmp104_*tmp3_+tmp105_*tmp8_)*(tmp12_)+(tmp103_*tmp3_+tmp32_)*(tmp16_))*(tmp54_)-(tmp42_)*((tmp104_*tmp13_+tmp105_*tmp3_)*(tmp12_)+(tmp103_*tmp13_+tmp44_)*(tmp16_)))/tmp111_)*tmp106_;
  mCompDer[0][15] = (((tmp108_*tmp8_*(tmp12_)+tmp109_*tmp8_*(tmp16_)+tmp110_*tmp8_*(tmp19_))*(tmp54_)-(tmp42_)*(tmp108_*tmp3_*(tmp12_)+tmp109_*tmp3_*(tmp16_)+tmp110_*tmp3_*(tmp19_)))/tmp111_)*tmp106_;
  mCompDer[0][16] = ((((tmp112_*tmp9_+tmp3_*tmp10_)*(tmp12_)+(tmp112_*tmp2_+tmp3_*tmp14_)*(tmp16_)+tmp3_*tmp17_*(tmp19_))*(tmp54_)-(tmp42_)*((tmp113_*tmp9_+tmp112_*tmp10_)*(tmp12_)+(tmp113_*tmp2_+tmp112_*tmp14_)*(tmp16_)+tmp112_*tmp17_*(tmp19_)))/tmp111_)*tmp106_;
  mCompDer[0][17] = ((tmp56_*(tmp33_)*(tmp54_)-(tmp42_)*tmp56_*(tmp45_))/tmp111_)*tmp106_;
  mCompDer[0][18] = ((tmp56_*(tmp37_)*(tmp54_)-(tmp42_)*tmp56_*(tmp49_))/tmp111_)*tmp106_;
  mCompDer[0][19] = ((tmp56_*tmp40_*(tmp54_)-(tmp42_)*tmp56_*tmp52_)/tmp111_)*tmp106_;
}


void cEqAppui_Y_C2MDRad5APFraser::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_Y_C2MDRad5APFraser Has no Der Sec");
}

void cEqAppui_Y_C2MDRad5APFraser::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_Y_C2MDRad5APFraser::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_Y_C2MDRad5APFraser::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_Y_C2MDRad5APFraser::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_Y_C2MDRad5APFraser::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_Y_C2MDRad5APFraser::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_Y_C2MDRad5APFraser::mTheAuto("cEqAppui_Y_C2MDRad5APFraser",cEqAppui_Y_C2MDRad5APFraser::Alloc);


cElCompiledFonc *  cEqAppui_Y_C2MDRad5APFraser::Alloc()
{  return new cEqAppui_Y_C2MDRad5APFraser();
}


