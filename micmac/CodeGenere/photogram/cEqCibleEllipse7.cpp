/*Header-MicMac-eLiSe-25/06/2007

    MicMac : Multi Image Correspondances par Methodes Automatiques de Correlation
    eLiSe  : ELements of an Image Software Environnement

    www.micmac.ign.fr

   
    Copyright : Institut Geographique National
    Author : Marc Pierrot Deseilligny
    Contributors : Gregoire Maillet, Didier Boldo.

[1] M. Pierrot-Deseilligny, N. Paparoditis.
    "A multiresolution and optimization-based image matching approach:
    An application to surface reconstruction from SPOT5-HRS stereo imagery."
    In IAPRS vol XXXVI-1/W41 in ISPRS Workshop On Topographic Mapping From Space
    (With Special Emphasis on Small Satellites), Ankara, Turquie, 02-2006.

[2] M. Pierrot-Deseilligny, "MicMac, un lociel de mise en correspondance
    d'images, adapte au contexte geograhique" to appears in 
    Bulletin d'information de l'Institut Geographique National, 2007.

Francais :

   MicMac est un logiciel de mise en correspondance d'image adapte 
   au contexte de recherche en information geographique. Il s'appuie sur
   la bibliotheque de manipulation d'image eLiSe. Il est distibue sous la
   licences Cecill-B.  Voir en bas de fichier et  http://www.cecill.info.


English :

    MicMac is an open source software specialized in image matching
    for research in geographic information. MicMac is built on the
    eLiSe image library. MicMac is governed by the  "Cecill-B licence".
    See below and http://www.cecill.info.

Header-MicMac-eLiSe-25/06/2007*/
// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cEqCibleEllipse7.h"


cEqCibleEllipse7::cEqCibleEllipse7():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("ElIma",0,8));
   Close(false);
}



void cEqCibleEllipse7::ComputeVal()
{
   double tmp0_ = mLocDiam0/mLocDiam0;
   double tmp1_ = mCompCoord[5];
   double tmp2_ = mCompCoord[0];
   double tmp3_ = mCompCoord[1];
   double tmp4_ = mCompCoord[2];
   double tmp5_ = mCompCoord[3];
   double tmp6_ = mLocDiam0/mLocDiam1;
   double tmp7_ = mCompCoord[4];
   double tmp8_ = mLocXPix-tmp1_;
   double tmp9_ = mLocYPix-tmp1_;
   double tmp10_ = mLocXPix+tmp1_;
   double tmp11_ = mLocYPix+tmp1_;
   double tmp12_ = mLocDiam0/mLocDiam2;
   double tmp13_ = mLocDiam0/mLocDiam3;
   double tmp14_ = mLocDiam0/mLocDiam4;
   double tmp15_ = mLocDiam0/mLocDiam5;
   double tmp16_ = mLocDiam0/mLocDiam6;
   double tmp17_ = tmp4_*(tmp0_);
   double tmp18_ = tmp5_*(tmp0_);
   double tmp19_ = tmp7_*(tmp0_);
   double tmp20_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp21_ = tmp4_*(tmp6_);
   double tmp22_ = tmp5_*(tmp6_);
   double tmp23_ = tmp7_*(tmp6_);
   double tmp24_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp25_ = (tmp24_)*-1;
   double tmp26_ = (tmp20_)+tmp25_;
   double tmp27_ = tmp4_*(tmp12_);
   double tmp28_ = tmp5_*(tmp12_);
   double tmp29_ = tmp7_*(tmp12_);
   double tmp30_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp31_ = tmp26_+(tmp30_);
   double tmp32_ = tmp4_*(tmp13_);
   double tmp33_ = tmp5_*(tmp13_);
   double tmp34_ = tmp7_*(tmp13_);
   double tmp35_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp36_ = (tmp35_)*-1;
   double tmp37_ = tmp31_+tmp36_;
   double tmp38_ = tmp4_*(tmp14_);
   double tmp39_ = tmp5_*(tmp14_);
   double tmp40_ = tmp7_*(tmp14_);
   double tmp41_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp42_ = tmp37_+(tmp41_);
   double tmp43_ = tmp4_*(tmp15_);
   double tmp44_ = tmp5_*(tmp15_);
   double tmp45_ = tmp7_*(tmp15_);
   double tmp46_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp47_ = (tmp46_)*-1;
   double tmp48_ = tmp42_+tmp47_;
   double tmp49_ = tmp4_*(tmp16_);
   double tmp50_ = tmp5_*(tmp16_);
   double tmp51_ = tmp7_*(tmp16_);
   double tmp52_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp53_ = tmp48_+(tmp52_);
   double tmp54_ = 2*tmp1_;
   double tmp55_ = ElSquare(tmp54_);
   double tmp56_ = (tmp53_)/tmp55_;

  mVal[0] = (mCompCoord[7]*(tmp56_)+mCompCoord[6]*(1-tmp56_))-mLocGray;

}


void cEqCibleEllipse7::ComputeValDeriv()
{
   double tmp0_ = mLocDiam0/mLocDiam0;
   double tmp1_ = mCompCoord[5];
   double tmp2_ = mCompCoord[0];
   double tmp3_ = mCompCoord[1];
   double tmp4_ = mCompCoord[2];
   double tmp5_ = mCompCoord[3];
   double tmp6_ = mLocDiam0/mLocDiam1;
   double tmp7_ = mCompCoord[4];
   double tmp8_ = mLocXPix-tmp1_;
   double tmp9_ = mLocYPix-tmp1_;
   double tmp10_ = mLocXPix+tmp1_;
   double tmp11_ = mLocYPix+tmp1_;
   double tmp12_ = mLocDiam0/mLocDiam2;
   double tmp13_ = mLocDiam0/mLocDiam3;
   double tmp14_ = mLocDiam0/mLocDiam4;
   double tmp15_ = mLocDiam0/mLocDiam5;
   double tmp16_ = mLocDiam0/mLocDiam6;
   double tmp17_ = tmp4_*(tmp0_);
   double tmp18_ = tmp5_*(tmp0_);
   double tmp19_ = tmp7_*(tmp0_);
   double tmp20_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp21_ = tmp4_*(tmp6_);
   double tmp22_ = tmp5_*(tmp6_);
   double tmp23_ = tmp7_*(tmp6_);
   double tmp24_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp25_ = (tmp24_)*-1;
   double tmp26_ = (tmp20_)+tmp25_;
   double tmp27_ = tmp4_*(tmp12_);
   double tmp28_ = tmp5_*(tmp12_);
   double tmp29_ = tmp7_*(tmp12_);
   double tmp30_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp31_ = tmp26_+(tmp30_);
   double tmp32_ = tmp4_*(tmp13_);
   double tmp33_ = tmp5_*(tmp13_);
   double tmp34_ = tmp7_*(tmp13_);
   double tmp35_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp36_ = (tmp35_)*-1;
   double tmp37_ = tmp31_+tmp36_;
   double tmp38_ = tmp4_*(tmp14_);
   double tmp39_ = tmp5_*(tmp14_);
   double tmp40_ = tmp7_*(tmp14_);
   double tmp41_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp42_ = tmp37_+(tmp41_);
   double tmp43_ = tmp4_*(tmp15_);
   double tmp44_ = tmp5_*(tmp15_);
   double tmp45_ = tmp7_*(tmp15_);
   double tmp46_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp47_ = (tmp46_)*-1;
   double tmp48_ = tmp42_+tmp47_;
   double tmp49_ = tmp4_*(tmp16_);
   double tmp50_ = tmp5_*(tmp16_);
   double tmp51_ = tmp7_*(tmp16_);
   double tmp52_ = SurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp53_ = tmp48_+(tmp52_);
   double tmp54_ = 2*tmp1_;
   double tmp55_ = ElSquare(tmp54_);
   double tmp56_ = (tmp53_)/tmp55_;
   double tmp57_ = mCompCoord[7];
   double tmp58_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp59_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp60_ = (tmp59_)*-1;
   double tmp61_ = (tmp58_)+tmp60_;
   double tmp62_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp63_ = tmp61_+(tmp62_);
   double tmp64_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp65_ = (tmp64_)*-1;
   double tmp66_ = tmp63_+tmp65_;
   double tmp67_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp68_ = tmp66_+(tmp67_);
   double tmp69_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp70_ = (tmp69_)*-1;
   double tmp71_ = tmp68_+tmp70_;
   double tmp72_ = DerCElXSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp73_ = tmp71_+(tmp72_);
   double tmp74_ = (tmp73_)*tmp55_;
   double tmp75_ = ElSquare(tmp55_);
   double tmp76_ = (tmp74_)/tmp75_;
   double tmp77_ = mCompCoord[6];
   double tmp78_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp79_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp80_ = (tmp79_)*-1;
   double tmp81_ = (tmp78_)+tmp80_;
   double tmp82_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp83_ = tmp81_+(tmp82_);
   double tmp84_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp85_ = (tmp84_)*-1;
   double tmp86_ = tmp83_+tmp85_;
   double tmp87_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp88_ = tmp86_+(tmp87_);
   double tmp89_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp90_ = (tmp89_)*-1;
   double tmp91_ = tmp88_+tmp90_;
   double tmp92_ = DerCElYSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp93_ = tmp91_+(tmp92_);
   double tmp94_ = (tmp93_)*tmp55_;
   double tmp95_ = (tmp94_)/tmp75_;
   double tmp96_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp97_ = (tmp0_)*(tmp96_);
   double tmp98_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp99_ = (tmp6_)*(tmp98_);
   double tmp100_ = tmp99_*-1;
   double tmp101_ = tmp97_+tmp100_;
   double tmp102_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp103_ = (tmp12_)*(tmp102_);
   double tmp104_ = tmp101_+tmp103_;
   double tmp105_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp106_ = (tmp13_)*(tmp105_);
   double tmp107_ = tmp106_*-1;
   double tmp108_ = tmp104_+tmp107_;
   double tmp109_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp110_ = (tmp14_)*(tmp109_);
   double tmp111_ = tmp108_+tmp110_;
   double tmp112_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp113_ = (tmp15_)*(tmp112_);
   double tmp114_ = tmp113_*-1;
   double tmp115_ = tmp111_+tmp114_;
   double tmp116_ = DerASurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp117_ = (tmp16_)*(tmp116_);
   double tmp118_ = tmp115_+tmp117_;
   double tmp119_ = (tmp118_)*tmp55_;
   double tmp120_ = (tmp119_)/tmp75_;
   double tmp121_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp122_ = (tmp0_)*(tmp121_);
   double tmp123_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp124_ = (tmp6_)*(tmp123_);
   double tmp125_ = tmp124_*-1;
   double tmp126_ = tmp122_+tmp125_;
   double tmp127_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp128_ = (tmp12_)*(tmp127_);
   double tmp129_ = tmp126_+tmp128_;
   double tmp130_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp131_ = (tmp13_)*(tmp130_);
   double tmp132_ = tmp131_*-1;
   double tmp133_ = tmp129_+tmp132_;
   double tmp134_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp135_ = (tmp14_)*(tmp134_);
   double tmp136_ = tmp133_+tmp135_;
   double tmp137_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp138_ = (tmp15_)*(tmp137_);
   double tmp139_ = tmp138_*-1;
   double tmp140_ = tmp136_+tmp139_;
   double tmp141_ = DerBSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp142_ = (tmp16_)*(tmp141_);
   double tmp143_ = tmp140_+tmp142_;
   double tmp144_ = (tmp143_)*tmp55_;
   double tmp145_ = (tmp144_)/tmp75_;
   double tmp146_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp147_ = (tmp0_)*(tmp146_);
   double tmp148_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp149_ = (tmp6_)*(tmp148_);
   double tmp150_ = tmp149_*-1;
   double tmp151_ = tmp147_+tmp150_;
   double tmp152_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp153_ = (tmp12_)*(tmp152_);
   double tmp154_ = tmp151_+tmp153_;
   double tmp155_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp156_ = (tmp13_)*(tmp155_);
   double tmp157_ = tmp156_*-1;
   double tmp158_ = tmp154_+tmp157_;
   double tmp159_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp160_ = (tmp14_)*(tmp159_);
   double tmp161_ = tmp158_+tmp160_;
   double tmp162_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp163_ = (tmp15_)*(tmp162_);
   double tmp164_ = tmp163_*-1;
   double tmp165_ = tmp161_+tmp164_;
   double tmp166_ = DerCSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp167_ = (tmp16_)*(tmp166_);
   double tmp168_ = tmp165_+tmp167_;
   double tmp169_ = (tmp168_)*tmp55_;
   double tmp170_ = (tmp169_)/tmp75_;
   double tmp171_ = -(1);
   double tmp172_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp173_ = tmp171_*(tmp172_);
   double tmp174_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp175_ = tmp171_*(tmp174_);
   double tmp176_ = tmp173_+tmp175_;
   double tmp177_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp178_ = tmp176_+(tmp177_);
   double tmp179_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp17_,tmp18_,tmp19_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp180_ = tmp178_+(tmp179_);
   double tmp181_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp182_ = tmp171_*(tmp181_);
   double tmp183_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp184_ = tmp171_*(tmp183_);
   double tmp185_ = tmp182_+tmp184_;
   double tmp186_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp187_ = tmp185_+(tmp186_);
   double tmp188_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp21_,tmp22_,tmp23_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp189_ = tmp187_+(tmp188_);
   double tmp190_ = (tmp189_)*-1;
   double tmp191_ = tmp180_+tmp190_;
   double tmp192_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp193_ = tmp171_*(tmp192_);
   double tmp194_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp195_ = tmp171_*(tmp194_);
   double tmp196_ = tmp193_+tmp195_;
   double tmp197_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp198_ = tmp196_+(tmp197_);
   double tmp199_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp27_,tmp28_,tmp29_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp200_ = tmp198_+(tmp199_);
   double tmp201_ = tmp191_+tmp200_;
   double tmp202_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp203_ = tmp171_*(tmp202_);
   double tmp204_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp205_ = tmp171_*(tmp204_);
   double tmp206_ = tmp203_+tmp205_;
   double tmp207_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp208_ = tmp206_+(tmp207_);
   double tmp209_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp32_,tmp33_,tmp34_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp210_ = tmp208_+(tmp209_);
   double tmp211_ = (tmp210_)*-1;
   double tmp212_ = tmp201_+tmp211_;
   double tmp213_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp214_ = tmp171_*(tmp213_);
   double tmp215_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp216_ = tmp171_*(tmp215_);
   double tmp217_ = tmp214_+tmp216_;
   double tmp218_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp219_ = tmp217_+(tmp218_);
   double tmp220_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp38_,tmp39_,tmp40_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp221_ = tmp219_+(tmp220_);
   double tmp222_ = tmp212_+tmp221_;
   double tmp223_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp224_ = tmp171_*(tmp223_);
   double tmp225_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp226_ = tmp171_*(tmp225_);
   double tmp227_ = tmp224_+tmp226_;
   double tmp228_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp229_ = tmp227_+(tmp228_);
   double tmp230_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp43_,tmp44_,tmp45_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp231_ = tmp229_+(tmp230_);
   double tmp232_ = (tmp231_)*-1;
   double tmp233_ = tmp222_+tmp232_;
   double tmp234_ = DerP0XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp235_ = tmp171_*(tmp234_);
   double tmp236_ = DerP0YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp237_ = tmp171_*(tmp236_);
   double tmp238_ = tmp235_+tmp237_;
   double tmp239_ = DerP1XSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp240_ = tmp238_+(tmp239_);
   double tmp241_ = DerP1YSurfIER(Pt2dr(tmp2_,tmp3_) ,tmp49_,tmp50_,tmp51_,Pt2dr(tmp8_,tmp9_) ,Pt2dr(tmp10_,tmp11_) );
   double tmp242_ = tmp240_+(tmp241_);
   double tmp243_ = tmp233_+tmp242_;
   double tmp244_ = (tmp243_)*tmp55_;
   double tmp245_ = 4.000000*tmp54_;
   double tmp246_ = (tmp53_)*tmp245_;
   double tmp247_ = tmp244_-tmp246_;
   double tmp248_ = (tmp247_)/tmp75_;
   double tmp249_ = 1-tmp56_;

  mVal[0] = (tmp57_*(tmp56_)+tmp77_*(tmp249_))-mLocGray;

  mCompDer[0][0] = (tmp76_)*tmp57_+-(tmp76_)*tmp77_;
  mCompDer[0][1] = (tmp95_)*tmp57_+-(tmp95_)*tmp77_;
  mCompDer[0][2] = (tmp120_)*tmp57_+-(tmp120_)*tmp77_;
  mCompDer[0][3] = (tmp145_)*tmp57_+-(tmp145_)*tmp77_;
  mCompDer[0][4] = (tmp170_)*tmp57_+-(tmp170_)*tmp77_;
  mCompDer[0][5] = (tmp248_)*tmp57_+-(tmp248_)*tmp77_;
  mCompDer[0][6] = tmp249_;
  mCompDer[0][7] = tmp56_;
}


void cEqCibleEllipse7::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqCibleEllipse7 Has no Der Sec");
}

void cEqCibleEllipse7::SetDiam0(double aVal){ mLocDiam0 = aVal;}
void cEqCibleEllipse7::SetDiam1(double aVal){ mLocDiam1 = aVal;}
void cEqCibleEllipse7::SetDiam2(double aVal){ mLocDiam2 = aVal;}
void cEqCibleEllipse7::SetDiam3(double aVal){ mLocDiam3 = aVal;}
void cEqCibleEllipse7::SetDiam4(double aVal){ mLocDiam4 = aVal;}
void cEqCibleEllipse7::SetDiam5(double aVal){ mLocDiam5 = aVal;}
void cEqCibleEllipse7::SetDiam6(double aVal){ mLocDiam6 = aVal;}
void cEqCibleEllipse7::SetGray(double aVal){ mLocGray = aVal;}
void cEqCibleEllipse7::SetXPix(double aVal){ mLocXPix = aVal;}
void cEqCibleEllipse7::SetYPix(double aVal){ mLocYPix = aVal;}



double * cEqCibleEllipse7::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Diam0") return & mLocDiam0;
   if (aName == "Diam1") return & mLocDiam1;
   if (aName == "Diam2") return & mLocDiam2;
   if (aName == "Diam3") return & mLocDiam3;
   if (aName == "Diam4") return & mLocDiam4;
   if (aName == "Diam5") return & mLocDiam5;
   if (aName == "Diam6") return & mLocDiam6;
   if (aName == "Gray") return & mLocGray;
   if (aName == "XPix") return & mLocXPix;
   if (aName == "YPix") return & mLocYPix;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqCibleEllipse7::mTheAuto("cEqCibleEllipse7",cEqCibleEllipse7::Alloc);


cElCompiledFonc *  cEqCibleEllipse7::Alloc()
{  return new cEqCibleEllipse7();
}



/*Footer-MicMac-eLiSe-25/06/2007

Ce logiciel est un programme informatique servant à la mise en
correspondances d'images pour la reconstruction du relief.

Ce logiciel est régi par la licence CeCILL-B soumise au droit français et
respectant les principes de diffusion des logiciels libres. Vous pouvez
utiliser, modifier et/ou redistribuer ce programme sous les conditions
de la licence CeCILL-B telle que diffusée par le CEA, le CNRS et l'INRIA 
sur le site "http://www.cecill.info".

En contrepartie de l'accessibilité au code source et des droits de copie,
de modification et de redistribution accordés par cette licence, il n'est
offert aux utilisateurs qu'une garantie limitée.  Pour les mêmes raisons,
seule une responsabilité restreinte pèse sur l'auteur du programme,  le
titulaire des droits patrimoniaux et les concédants successifs.

A cet égard  l'attention de l'utilisateur est attirée sur les risques
associés au chargement,  à l'utilisation,  à la modification et/ou au
développement et à la reproduction du logiciel par l'utilisateur étant 
donné sa spécificité de logiciel libre, qui peut le rendre complexe à 
manipuler et qui le réserve donc à des développeurs et des professionnels
avertis possédant  des  connaissances  informatiques approfondies.  Les
utilisateurs sont donc invités à charger  et  tester  l'adéquation  du
logiciel à leurs besoins dans des conditions permettant d'assurer la
sécurité de leurs systèmes et ou de leurs données et, plus généralement, 
à l'utiliser et l'exploiter dans les mêmes conditions de sécurité. 

Le fait que vous puissiez accéder à cet en-tête signifie que vous avez 
pris connaissance de la licence CeCILL-B, et que vous en avez accepté les
termes.
Footer-MicMac-eLiSe-25/06/2007*/
