// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "EqObsBaclt.h"


EqObsBaclt::EqObsBaclt():
    cElCompiledFonc(3)
{
   AddIntRef (cIncIntervale("Lambda",6,7));
   AddIntRef (cIncIntervale("Orient",0,6));
   Close(false);
}



void EqObsBaclt::ComputeVal()
{
   double tmp0_ = mCompCoord[0];
   double tmp1_ = cos(tmp0_);
   double tmp2_ = mCompCoord[1];
   double tmp3_ = mCompCoord[2];
   double tmp4_ = mCompCoord[6];
   double tmp5_ = sin(tmp0_);
   double tmp6_ = -(tmp5_);
   double tmp7_ = sin(tmp3_);
   double tmp8_ = sin(tmp2_);
   double tmp9_ = -(tmp8_);
   double tmp10_ = tmp1_*tmp9_;
   double tmp11_ = cos(tmp3_);
   double tmp12_ = cos(tmp2_);
   double tmp13_ = mLocP1_x*tmp4_;
   double tmp14_ = mLocP1_y*tmp4_;
   double tmp15_ = -(tmp7_);
   double tmp16_ = tmp5_*tmp9_;
   double tmp17_ = mLocP1_z*tmp4_;

  mVal[0] = (tmp1_*tmp12_*tmp13_+(tmp6_*tmp11_+tmp10_*tmp7_)*tmp14_+(tmp6_*tmp15_+tmp10_*tmp11_)*tmp17_+mCompCoord[3])-mLocP2_x;

  mVal[1] = (tmp5_*tmp12_*tmp13_+(tmp1_*tmp11_+tmp16_*tmp7_)*tmp14_+(tmp1_*tmp15_+tmp16_*tmp11_)*tmp17_+mCompCoord[4])-mLocP2_y;

  mVal[2] = (tmp8_*tmp13_+tmp12_*tmp7_*tmp14_+tmp12_*tmp11_*tmp17_+mCompCoord[5])-mLocP2_z;

}


void EqObsBaclt::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[0];
   double tmp1_ = cos(tmp0_);
   double tmp2_ = mCompCoord[1];
   double tmp3_ = mCompCoord[2];
   double tmp4_ = mCompCoord[6];
   double tmp5_ = sin(tmp0_);
   double tmp6_ = -(tmp5_);
   double tmp7_ = sin(tmp3_);
   double tmp8_ = sin(tmp2_);
   double tmp9_ = -(tmp8_);
   double tmp10_ = tmp1_*tmp9_;
   double tmp11_ = cos(tmp3_);
   double tmp12_ = cos(tmp2_);
   double tmp13_ = mLocP1_x*tmp4_;
   double tmp14_ = -(1);
   double tmp15_ = tmp14_*tmp5_;
   double tmp16_ = mLocP1_y*tmp4_;
   double tmp17_ = -(tmp1_);
   double tmp18_ = -(tmp7_);
   double tmp19_ = tmp15_*tmp9_;
   double tmp20_ = mLocP1_z*tmp4_;
   double tmp21_ = -(tmp12_);
   double tmp22_ = tmp21_*tmp1_;
   double tmp23_ = tmp14_*tmp7_;
   double tmp24_ = tmp1_*tmp12_;
   double tmp25_ = tmp6_*tmp11_;
   double tmp26_ = tmp10_*tmp7_;
   double tmp27_ = tmp25_+tmp26_;
   double tmp28_ = tmp6_*tmp18_;
   double tmp29_ = tmp10_*tmp11_;
   double tmp30_ = tmp28_+tmp29_;
   double tmp31_ = tmp5_*tmp9_;
   double tmp32_ = tmp24_*tmp13_;
   double tmp33_ = tmp14_*tmp8_;
   double tmp34_ = tmp21_*tmp5_;
   double tmp35_ = -(tmp11_);
   double tmp36_ = tmp5_*tmp12_;
   double tmp37_ = tmp1_*tmp11_;
   double tmp38_ = tmp31_*tmp7_;
   double tmp39_ = tmp37_+tmp38_;
   double tmp40_ = tmp1_*tmp18_;
   double tmp41_ = tmp31_*tmp11_;
   double tmp42_ = tmp40_+tmp41_;
   double tmp43_ = tmp12_*tmp7_;
   double tmp44_ = tmp12_*tmp11_;

  mVal[0] = (tmp32_+(tmp27_)*tmp16_+(tmp30_)*tmp20_+mCompCoord[3])-mLocP2_x;

  mCompDer[0][0] = tmp15_*tmp12_*tmp13_+(tmp17_*tmp11_+tmp19_*tmp7_)*tmp16_+(tmp17_*tmp18_+tmp19_*tmp11_)*tmp20_;
  mCompDer[0][1] = tmp33_*tmp1_*tmp13_+tmp22_*tmp7_*tmp16_+tmp22_*tmp11_*tmp20_;
  mCompDer[0][2] = (tmp23_*tmp6_+tmp11_*tmp10_)*tmp16_+(tmp35_*tmp6_+tmp23_*tmp10_)*tmp20_;
  mCompDer[0][3] = 1;
  mCompDer[0][4] = 0;
  mCompDer[0][5] = 0;
  mCompDer[0][6] = mLocP1_x*tmp24_+mLocP1_y*(tmp27_)+mLocP1_z*(tmp30_);
  mVal[1] = (tmp36_*tmp13_+(tmp39_)*tmp16_+(tmp42_)*tmp20_+mCompCoord[4])-mLocP2_y;

  mCompDer[1][0] = tmp32_+(tmp15_*tmp11_+tmp26_)*tmp16_+(tmp15_*tmp18_+tmp29_)*tmp20_;
  mCompDer[1][1] = tmp33_*tmp5_*tmp13_+tmp34_*tmp7_*tmp16_+tmp34_*tmp11_*tmp20_;
  mCompDer[1][2] = (tmp23_*tmp1_+tmp11_*tmp31_)*tmp16_+(tmp35_*tmp1_+tmp23_*tmp31_)*tmp20_;
  mCompDer[1][3] = 0;
  mCompDer[1][4] = 1;
  mCompDer[1][5] = 0;
  mCompDer[1][6] = mLocP1_x*tmp36_+mLocP1_y*(tmp39_)+mLocP1_z*(tmp42_);
  mVal[2] = (tmp8_*tmp13_+tmp43_*tmp16_+tmp44_*tmp20_+mCompCoord[5])-mLocP2_z;

  mCompDer[2][0] = 0;
  mCompDer[2][1] = tmp12_*tmp13_+tmp33_*tmp7_*tmp16_+tmp33_*tmp11_*tmp20_;
  mCompDer[2][2] = tmp11_*tmp12_*tmp16_+tmp23_*tmp12_*tmp20_;
  mCompDer[2][3] = 0;
  mCompDer[2][4] = 0;
  mCompDer[2][5] = 1;
  mCompDer[2][6] = mLocP1_x*tmp8_+mLocP1_y*tmp43_+mLocP1_z*tmp44_;
}


void EqObsBaclt::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur EqObsBaclt Has no Der Sec");
}

void EqObsBaclt::SetP1_x(double aVal){ mLocP1_x = aVal;}
void EqObsBaclt::SetP1_y(double aVal){ mLocP1_y = aVal;}
void EqObsBaclt::SetP1_z(double aVal){ mLocP1_z = aVal;}
void EqObsBaclt::SetP2_x(double aVal){ mLocP2_x = aVal;}
void EqObsBaclt::SetP2_y(double aVal){ mLocP2_y = aVal;}
void EqObsBaclt::SetP2_z(double aVal){ mLocP2_z = aVal;}



double * EqObsBaclt::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "P1_x") return & mLocP1_x;
   if (aName == "P1_y") return & mLocP1_y;
   if (aName == "P1_z") return & mLocP1_z;
   if (aName == "P2_x") return & mLocP2_x;
   if (aName == "P2_y") return & mLocP2_y;
   if (aName == "P2_z") return & mLocP2_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry EqObsBaclt::mTheAuto("EqObsBaclt",EqObsBaclt::Alloc);


cElCompiledFonc *  EqObsBaclt::Alloc()
{  return new EqObsBaclt();
}


