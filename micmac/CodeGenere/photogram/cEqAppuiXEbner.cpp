// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cEqAppuiXEbner.h"


cEqAppuiXEbner::cEqAppuiXEbner():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,15));
   AddIntRef (cIncIntervale("Orient",15,21));
   Close(false);
}



void cEqAppuiXEbner::ComputeVal()
{
   double tmp0_ = mLocEbner_State_0_0*mLocEbner_State_0_0;
   double tmp1_ = tmp0_*0.666667;
   double tmp2_ = mLocYIm*mLocYIm;
   double tmp3_ = tmp2_-tmp1_;
   double tmp4_ = mLocXIm*mLocXIm;
   double tmp5_ = tmp4_-tmp1_;
   double tmp6_ = mCompCoord[15];
   double tmp7_ = mCompCoord[16];
   double tmp8_ = cos(tmp7_);
   double tmp9_ = sin(tmp6_);
   double tmp10_ = cos(tmp6_);
   double tmp11_ = sin(tmp7_);
   double tmp12_ = mCompCoord[17];
   double tmp13_ = mCompCoord[18];
   double tmp14_ = mLocXTer-tmp13_;
   double tmp15_ = sin(tmp12_);
   double tmp16_ = -(tmp15_);
   double tmp17_ = -(tmp11_);
   double tmp18_ = cos(tmp12_);
   double tmp19_ = mCompCoord[19];
   double tmp20_ = mLocYTer-tmp19_;
   double tmp21_ = mCompCoord[20];
   double tmp22_ = mLocZTer-tmp21_;

  mVal[0] = ((((1+mCompCoord[3])*mLocXIm+mCompCoord[4]*mLocYIm)-mCompCoord[5]*2*(tmp5_)+mCompCoord[6]*mLocXIm*mLocYIm+mCompCoord[7]*(tmp3_)+mCompCoord[9]*mLocXIm*(tmp3_)+mCompCoord[11]*mLocYIm*(tmp5_)+mCompCoord[13]*(tmp5_)*(tmp3_))-mCompCoord[1])/mCompCoord[0]-(tmp10_*tmp8_*(tmp14_)+tmp9_*tmp8_*(tmp20_)+tmp11_*(tmp22_))/((-(tmp9_)*tmp16_+tmp10_*tmp17_*tmp18_)*(tmp14_)+(tmp10_*tmp16_+tmp9_*tmp17_*tmp18_)*(tmp20_)+tmp8_*tmp18_*(tmp22_));

}


void cEqAppuiXEbner::ComputeValDeriv()
{
   double tmp0_ = mLocEbner_State_0_0*mLocEbner_State_0_0;
   double tmp1_ = tmp0_*0.666667;
   double tmp2_ = mLocYIm*mLocYIm;
   double tmp3_ = tmp2_-tmp1_;
   double tmp4_ = mLocXIm*mLocXIm;
   double tmp5_ = tmp4_-tmp1_;
   double tmp6_ = mCompCoord[15];
   double tmp7_ = mCompCoord[16];
   double tmp8_ = cos(tmp7_);
   double tmp9_ = sin(tmp6_);
   double tmp10_ = cos(tmp6_);
   double tmp11_ = sin(tmp7_);
   double tmp12_ = mCompCoord[17];
   double tmp13_ = mCompCoord[18];
   double tmp14_ = mLocXTer-tmp13_;
   double tmp15_ = sin(tmp12_);
   double tmp16_ = -(tmp15_);
   double tmp17_ = -(tmp11_);
   double tmp18_ = cos(tmp12_);
   double tmp19_ = mCompCoord[19];
   double tmp20_ = mLocYTer-tmp19_;
   double tmp21_ = mCompCoord[20];
   double tmp22_ = mLocZTer-tmp21_;
   double tmp23_ = mCompCoord[3];
   double tmp24_ = 1+tmp23_;
   double tmp25_ = (tmp24_)*mLocXIm;
   double tmp26_ = mCompCoord[4];
   double tmp27_ = tmp26_*mLocYIm;
   double tmp28_ = tmp25_+tmp27_;
   double tmp29_ = mCompCoord[5];
   double tmp30_ = tmp29_*2;
   double tmp31_ = tmp30_*(tmp5_);
   double tmp32_ = (tmp28_)-tmp31_;
   double tmp33_ = mCompCoord[6];
   double tmp34_ = mLocXIm*mLocYIm;
   double tmp35_ = tmp33_*tmp34_;
   double tmp36_ = tmp32_+tmp35_;
   double tmp37_ = mCompCoord[7];
   double tmp38_ = tmp37_*(tmp3_);
   double tmp39_ = tmp36_+tmp38_;
   double tmp40_ = mCompCoord[9];
   double tmp41_ = tmp40_*mLocXIm;
   double tmp42_ = tmp41_*(tmp3_);
   double tmp43_ = tmp39_+tmp42_;
   double tmp44_ = mCompCoord[11];
   double tmp45_ = tmp44_*mLocYIm;
   double tmp46_ = tmp45_*(tmp5_);
   double tmp47_ = tmp43_+tmp46_;
   double tmp48_ = mCompCoord[13];
   double tmp49_ = tmp48_*(tmp5_);
   double tmp50_ = tmp49_*(tmp3_);
   double tmp51_ = tmp47_+tmp50_;
   double tmp52_ = mCompCoord[1];
   double tmp53_ = (tmp51_)-tmp52_;
   double tmp54_ = mCompCoord[0];
   double tmp55_ = ElSquare(tmp54_);
   double tmp56_ = -(1);
   double tmp57_ = tmp10_*tmp8_;
   double tmp58_ = -(tmp9_);
   double tmp59_ = tmp58_*tmp16_;
   double tmp60_ = tmp10_*tmp17_;
   double tmp61_ = tmp60_*tmp18_;
   double tmp62_ = tmp59_+tmp61_;
   double tmp63_ = (tmp62_)*(tmp14_);
   double tmp64_ = tmp10_*tmp16_;
   double tmp65_ = tmp9_*tmp17_;
   double tmp66_ = tmp65_*tmp18_;
   double tmp67_ = tmp64_+tmp66_;
   double tmp68_ = (tmp67_)*(tmp20_);
   double tmp69_ = tmp63_+tmp68_;
   double tmp70_ = tmp8_*tmp18_;
   double tmp71_ = tmp70_*(tmp22_);
   double tmp72_ = tmp69_+tmp71_;
   double tmp73_ = tmp57_*(tmp14_);
   double tmp74_ = tmp9_*tmp8_;
   double tmp75_ = tmp74_*(tmp20_);
   double tmp76_ = tmp73_+tmp75_;
   double tmp77_ = tmp11_*(tmp22_);
   double tmp78_ = tmp76_+tmp77_;
   double tmp79_ = tmp56_*tmp9_;
   double tmp80_ = tmp56_*tmp11_;
   double tmp81_ = -(tmp8_);
   double tmp82_ = ElSquare(tmp72_);
   double tmp83_ = -(tmp18_);
   double tmp84_ = tmp56_*tmp15_;

  mVal[0] = (tmp53_)/tmp54_-(tmp78_)/(tmp72_);

  mCompDer[0][0] = -(tmp53_)/tmp55_;
  mCompDer[0][1] = (tmp56_*tmp54_)/tmp55_;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = (mLocXIm*tmp54_)/tmp55_;
  mCompDer[0][4] = (mLocYIm*tmp54_)/tmp55_;
  mCompDer[0][5] = (-(2*(tmp5_))*tmp54_)/tmp55_;
  mCompDer[0][6] = (tmp34_*tmp54_)/tmp55_;
  mCompDer[0][7] = ((tmp3_)*tmp54_)/tmp55_;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = (mLocXIm*(tmp3_)*tmp54_)/tmp55_;
  mCompDer[0][10] = 0;
  mCompDer[0][11] = (mLocYIm*(tmp5_)*tmp54_)/tmp55_;
  mCompDer[0][12] = 0;
  mCompDer[0][13] = ((tmp5_)*(tmp3_)*tmp54_)/tmp55_;
  mCompDer[0][14] = 0;
  mCompDer[0][15] = -(((tmp79_*tmp8_*(tmp14_)+tmp57_*(tmp20_))*(tmp72_)-(tmp78_)*((-(tmp10_)*tmp16_+tmp79_*tmp17_*tmp18_)*(tmp14_)+(tmp79_*tmp16_+tmp61_)*(tmp20_)))/tmp82_);
  mCompDer[0][16] = -(((tmp80_*tmp10_*(tmp14_)+tmp80_*tmp9_*(tmp20_)+tmp8_*(tmp22_))*(tmp72_)-(tmp78_)*(tmp81_*tmp10_*tmp18_*(tmp14_)+tmp81_*tmp9_*tmp18_*(tmp20_)+tmp80_*tmp18_*(tmp22_)))/tmp82_);
  mCompDer[0][17] = -(-((tmp78_)*((tmp83_*tmp58_+tmp84_*tmp60_)*(tmp14_)+(tmp83_*tmp10_+tmp84_*tmp65_)*(tmp20_)+tmp84_*tmp8_*(tmp22_)))/tmp82_);
  mCompDer[0][18] = -((tmp56_*tmp57_*(tmp72_)-(tmp78_)*tmp56_*(tmp62_))/tmp82_);
  mCompDer[0][19] = -((tmp56_*tmp74_*(tmp72_)-(tmp78_)*tmp56_*(tmp67_))/tmp82_);
  mCompDer[0][20] = -((tmp80_*(tmp72_)-(tmp78_)*tmp56_*tmp70_)/tmp82_);
}


void cEqAppuiXEbner::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppuiXEbner Has no Der Sec");
}

void cEqAppuiXEbner::SetEbner_State_0_0(double aVal){ mLocEbner_State_0_0 = aVal;}
void cEqAppuiXEbner::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppuiXEbner::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppuiXEbner::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppuiXEbner::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppuiXEbner::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppuiXEbner::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Ebner_State_0_0") return & mLocEbner_State_0_0;
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppuiXEbner::mTheAuto("cEqAppuiXEbner",cEqAppuiXEbner::Alloc);


cElCompiledFonc *  cEqAppuiXEbner::Alloc()
{  return new cEqAppuiXEbner();
}


