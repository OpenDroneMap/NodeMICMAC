// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cRegCamConseq_CompR_Polyn1.h"


cRegCamConseq_CompR_Polyn1::cRegCamConseq_CompR_Polyn1():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("Intr",0,5));
   AddIntRef (cIncIntervale("Intr2",5,10));
   AddIntRef (cIncIntervale("Tmp_PTer",10,13));
   Close(false);
}



void cRegCamConseq_CompR_Polyn1::ComputeVal()
{
   double tmp0_ = mCompCoord[0];
   double tmp1_ = tmp0_ / mLocRay_z;
   double tmp2_ = mCompCoord[11];
   double tmp3_ = mCompCoord[12];
   double tmp4_ = mCompCoord[10];
   double tmp5_ = mCompCoord[5];
   double tmp6_ = tmp4_ * mLocRay_y;
   double tmp7_ = tmp2_ * mLocRay_x;
   double tmp8_ = tmp6_ - tmp7_;
   double tmp9_ = mLocRay_z + tmp8_;
   double tmp10_ = tmp5_ / (tmp9_);
   double tmp11_ = mCompCoord[3];
   double tmp12_ = mLocRay_y * (tmp1_);
   double tmp13_ = mCompCoord[2];
   double tmp14_ = tmp12_ + tmp13_;
   double tmp15_ = mCompCoord[4];
   double tmp16_ = mLocRay_x * (tmp1_);
   double tmp17_ = mCompCoord[1];
   double tmp18_ = tmp16_ + tmp17_;
   double tmp19_ = mCompCoord[8];
   double tmp20_ = tmp3_ * mLocRay_x;
   double tmp21_ = tmp4_ * mLocRay_z;
   double tmp22_ = tmp20_ - tmp21_;
   double tmp23_ = mLocRay_y + tmp22_;
   double tmp24_ = (tmp23_) * (tmp10_);
   double tmp25_ = mCompCoord[7];
   double tmp26_ = tmp24_ + tmp25_;
   double tmp27_ = mCompCoord[9];
   double tmp28_ = tmp2_ * mLocRay_z;
   double tmp29_ = tmp3_ * mLocRay_y;
   double tmp30_ = tmp28_ - tmp29_;
   double tmp31_ = mLocRay_x + tmp30_;
   double tmp32_ = (tmp31_) * (tmp10_);
   double tmp33_ = mCompCoord[6];
   double tmp34_ = tmp32_ + tmp33_;

  mVal[0] = ((1 + tmp11_) * (tmp18_) + tmp15_ * (tmp14_)) - ((1 + tmp19_) * (tmp34_) + tmp27_ * (tmp26_));

  mVal[1] = ((1 - tmp11_) * (tmp14_) + tmp15_ * (tmp18_)) - ((1 - tmp19_) * (tmp26_) + tmp27_ * (tmp34_));

}


void cRegCamConseq_CompR_Polyn1::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[0];
   double tmp1_ = tmp0_ / mLocRay_z;
   double tmp2_ = mCompCoord[11];
   double tmp3_ = mCompCoord[12];
   double tmp4_ = mCompCoord[10];
   double tmp5_ = mCompCoord[5];
   double tmp6_ = tmp4_ * mLocRay_y;
   double tmp7_ = tmp2_ * mLocRay_x;
   double tmp8_ = tmp6_ - tmp7_;
   double tmp9_ = mLocRay_z + tmp8_;
   double tmp10_ = tmp5_ / (tmp9_);
   double tmp11_ = mCompCoord[3];
   double tmp12_ = 1 + tmp11_;
   double tmp13_ = ElSquare(mLocRay_z);
   double tmp14_ = mLocRay_z / tmp13_;
   double tmp15_ = mCompCoord[4];
   double tmp16_ = mLocRay_x * (tmp1_);
   double tmp17_ = mCompCoord[1];
   double tmp18_ = tmp16_ + tmp17_;
   double tmp19_ = mLocRay_y * (tmp1_);
   double tmp20_ = mCompCoord[2];
   double tmp21_ = tmp19_ + tmp20_;
   double tmp22_ = tmp2_ * mLocRay_z;
   double tmp23_ = tmp3_ * mLocRay_y;
   double tmp24_ = tmp22_ - tmp23_;
   double tmp25_ = mLocRay_x + tmp24_;
   double tmp26_ = mCompCoord[8];
   double tmp27_ = 1 + tmp26_;
   double tmp28_ = ElSquare(tmp9_);
   double tmp29_ = (tmp9_) / tmp28_;
   double tmp30_ = tmp3_ * mLocRay_x;
   double tmp31_ = tmp4_ * mLocRay_z;
   double tmp32_ = tmp30_ - tmp31_;
   double tmp33_ = mLocRay_y + tmp32_;
   double tmp34_ = mCompCoord[9];
   double tmp35_ = (tmp25_) * (tmp10_);
   double tmp36_ = mCompCoord[6];
   double tmp37_ = tmp35_ + tmp36_;
   double tmp38_ = (tmp33_) * (tmp10_);
   double tmp39_ = mCompCoord[7];
   double tmp40_ = tmp38_ + tmp39_;
   double tmp41_ = tmp5_ * mLocRay_y;
   double tmp42_ = -(tmp41_);
   double tmp43_ = tmp42_ / tmp28_;
   double tmp44_ = -(mLocRay_x);
   double tmp45_ = tmp5_ * tmp44_;
   double tmp46_ = -(tmp45_);
   double tmp47_ = tmp46_ / tmp28_;
   double tmp48_ = (tmp14_) * mLocRay_y;
   double tmp49_ = 1 - tmp11_;
   double tmp50_ = (tmp14_) * mLocRay_x;
   double tmp51_ = (tmp29_) * (tmp33_);
   double tmp52_ = 1 - tmp26_;
   double tmp53_ = (tmp29_) * (tmp25_);
   double tmp54_ = -(tmp34_);
   double tmp55_ = -(1);
   double tmp56_ = -(tmp37_);
   double tmp57_ = -(mLocRay_z);
   double tmp58_ = tmp57_ * (tmp10_);
   double tmp59_ = (tmp43_) * (tmp33_);
   double tmp60_ = tmp58_ + tmp59_;
   double tmp61_ = (tmp43_) * (tmp25_);
   double tmp62_ = (tmp47_) * (tmp33_);
   double tmp63_ = mLocRay_z * (tmp10_);
   double tmp64_ = (tmp47_) * (tmp25_);
   double tmp65_ = tmp63_ + tmp64_;
   double tmp66_ = mLocRay_x * (tmp10_);
   double tmp67_ = -(mLocRay_y);
   double tmp68_ = tmp67_ * (tmp10_);

  mVal[0] = ((tmp12_) * (tmp18_) + tmp15_ * (tmp21_)) - ((tmp27_) * (tmp37_) + tmp34_ * (tmp40_));

  mCompDer[0][0] = tmp50_ * (tmp12_) + tmp48_ * tmp15_;
  mCompDer[0][1] = tmp12_;
  mCompDer[0][2] = tmp15_;
  mCompDer[0][3] = tmp18_;
  mCompDer[0][4] = tmp21_;
  mCompDer[0][5] = -(tmp53_ * (tmp27_) + tmp51_ * tmp34_);
  mCompDer[0][6] = -(tmp27_);
  mCompDer[0][7] = tmp54_;
  mCompDer[0][8] = tmp56_;
  mCompDer[0][9] = -(tmp40_);
  mCompDer[0][10] = -(tmp61_ * (tmp27_) + (tmp60_) * tmp34_);
  mCompDer[0][11] = -((tmp65_) * (tmp27_) + tmp62_ * tmp34_);
  mCompDer[0][12] = -(tmp68_ * (tmp27_) + tmp66_ * tmp34_);
  mVal[1] = ((tmp49_) * (tmp21_) + tmp15_ * (tmp18_)) - ((tmp52_) * (tmp40_) + tmp34_ * (tmp37_));

  mCompDer[1][0] = tmp48_ * (tmp49_) + tmp50_ * tmp15_;
  mCompDer[1][1] = tmp15_;
  mCompDer[1][2] = tmp49_;
  mCompDer[1][3] = tmp55_ * (tmp21_);
  mCompDer[1][4] = tmp18_;
  mCompDer[1][5] = -(tmp51_ * (tmp52_) + tmp53_ * tmp34_);
  mCompDer[1][6] = tmp54_;
  mCompDer[1][7] = -(tmp52_);
  mCompDer[1][8] = -(tmp55_ * (tmp40_));
  mCompDer[1][9] = tmp56_;
  mCompDer[1][10] = -((tmp60_) * (tmp52_) + tmp61_ * tmp34_);
  mCompDer[1][11] = -(tmp62_ * (tmp52_) + (tmp65_) * tmp34_);
  mCompDer[1][12] = -(tmp66_ * (tmp52_) + tmp68_ * tmp34_);
}


void cRegCamConseq_CompR_Polyn1::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cRegCamConseq_CompR_Polyn1 Has no Der Sec");
}

void cRegCamConseq_CompR_Polyn1::SetRay_x(double aVal){ mLocRay_x = aVal;}
void cRegCamConseq_CompR_Polyn1::SetRay_y(double aVal){ mLocRay_y = aVal;}
void cRegCamConseq_CompR_Polyn1::SetRay_z(double aVal){ mLocRay_z = aVal;}



double * cRegCamConseq_CompR_Polyn1::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Ray_x") return & mLocRay_x;
   if (aName == "Ray_y") return & mLocRay_y;
   if (aName == "Ray_z") return & mLocRay_z;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cRegCamConseq_CompR_Polyn1::mTheAuto("cRegCamConseq_CompR_Polyn1",cRegCamConseq_CompR_Polyn1::Alloc);


cElCompiledFonc *  cRegCamConseq_CompR_Polyn1::Alloc()
{  return new cRegCamConseq_CompR_Polyn1();
}


