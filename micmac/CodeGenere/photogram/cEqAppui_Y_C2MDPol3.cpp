// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_Y_C2MDPol3.h"


cEqAppui_Y_C2MDPol3::cEqAppui_Y_C2MDPol3():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,20));
   AddIntRef (cIncIntervale("Orient",20,26));
   Close(false);
}



void cEqAppui_Y_C2MDPol3::ComputeVal()
{
   double tmp0_ = mCompCoord[20];
   double tmp1_ = mCompCoord[22];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[21];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[23];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[24];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[25];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = ElSquare(mLocYIm);
   double tmp21_ = ElSquare(mLocXIm);

  mVal[0] = ((tmp9_*tmp3_+tmp10_*tmp8_)*(tmp12_)+(tmp2_*tmp3_+tmp14_*tmp8_)*(tmp16_)+tmp17_*tmp8_*(tmp19_))/((tmp9_*tmp13_+tmp10_*tmp3_)*(tmp12_)+(tmp2_*tmp13_+tmp14_*tmp3_)*(tmp16_)+tmp17_*tmp3_*(tmp19_))-(mCompCoord[10]+mCompCoord[11]*mLocYIm+mCompCoord[12]*mLocXIm+mCompCoord[13]*tmp20_+mCompCoord[14]*mLocXIm*mLocYIm+mCompCoord[15]*tmp21_+mCompCoord[16]*VCube(mLocYIm)+mCompCoord[17]*mLocXIm*tmp20_+mCompCoord[18]*tmp21_*mLocYIm+mCompCoord[19]*VCube(mLocXIm));

}


void cEqAppui_Y_C2MDPol3::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[20];
   double tmp1_ = mCompCoord[22];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[21];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[23];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[24];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[25];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = ElSquare(mLocYIm);
   double tmp21_ = ElSquare(mLocXIm);
   double tmp22_ = VCube(mLocYIm);
   double tmp23_ = VCube(mLocXIm);
   double tmp24_ = -(1);
   double tmp25_ = tmp24_*tmp4_;
   double tmp26_ = tmp10_*tmp8_;
   double tmp27_ = tmp9_*tmp13_;
   double tmp28_ = tmp10_*tmp3_;
   double tmp29_ = tmp27_+tmp28_;
   double tmp30_ = (tmp29_)*(tmp12_);
   double tmp31_ = tmp2_*tmp13_;
   double tmp32_ = tmp14_*tmp3_;
   double tmp33_ = tmp31_+tmp32_;
   double tmp34_ = (tmp33_)*(tmp16_);
   double tmp35_ = tmp30_+tmp34_;
   double tmp36_ = tmp17_*tmp3_;
   double tmp37_ = tmp36_*(tmp19_);
   double tmp38_ = tmp35_+tmp37_;
   double tmp39_ = tmp9_*tmp3_;
   double tmp40_ = tmp39_+tmp26_;
   double tmp41_ = (tmp40_)*(tmp12_);
   double tmp42_ = tmp2_*tmp3_;
   double tmp43_ = tmp14_*tmp8_;
   double tmp44_ = tmp42_+tmp43_;
   double tmp45_ = (tmp44_)*(tmp16_);
   double tmp46_ = tmp41_+tmp45_;
   double tmp47_ = tmp17_*tmp8_;
   double tmp48_ = tmp47_*(tmp19_);
   double tmp49_ = tmp46_+tmp48_;
   double tmp50_ = -(tmp2_);
   double tmp51_ = tmp25_*tmp7_;
   double tmp52_ = -(tmp17_);
   double tmp53_ = tmp52_*tmp2_;
   double tmp54_ = tmp52_*tmp4_;
   double tmp55_ = tmp24_*tmp6_;
   double tmp56_ = ElSquare(tmp38_);
   double tmp57_ = tmp24_*tmp8_;
   double tmp58_ = -(tmp3_);

  mVal[0] = (tmp49_)/(tmp38_)-(mCompCoord[10]+mCompCoord[11]*mLocYIm+mCompCoord[12]*mLocXIm+mCompCoord[13]*tmp20_+mCompCoord[14]*mLocXIm*mLocYIm+mCompCoord[15]*tmp21_+mCompCoord[16]*tmp22_+mCompCoord[17]*mLocXIm*tmp20_+mCompCoord[18]*tmp21_*mLocYIm+mCompCoord[19]*tmp23_);

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = 0;
  mCompDer[0][4] = 0;
  mCompDer[0][5] = 0;
  mCompDer[0][6] = 0;
  mCompDer[0][7] = 0;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = 0;
  mCompDer[0][10] = tmp24_;
  mCompDer[0][11] = -(mLocYIm);
  mCompDer[0][12] = -(mLocXIm);
  mCompDer[0][13] = -(tmp20_);
  mCompDer[0][14] = -(mLocXIm*mLocYIm);
  mCompDer[0][15] = -(tmp21_);
  mCompDer[0][16] = -(tmp22_);
  mCompDer[0][17] = -(mLocXIm*tmp20_);
  mCompDer[0][18] = -(tmp21_*mLocYIm);
  mCompDer[0][19] = -(tmp23_);
  mCompDer[0][20] = (((tmp50_*tmp3_+tmp51_*tmp8_)*(tmp12_)+(tmp25_*tmp3_+tmp26_)*(tmp16_))*(tmp38_)-(tmp49_)*((tmp50_*tmp13_+tmp51_*tmp3_)*(tmp12_)+(tmp25_*tmp13_+tmp28_)*(tmp16_)))/tmp56_;
  mCompDer[0][21] = ((tmp53_*tmp8_*(tmp12_)+tmp54_*tmp8_*(tmp16_)+tmp55_*tmp8_*(tmp19_))*(tmp38_)-(tmp49_)*(tmp53_*tmp3_*(tmp12_)+tmp54_*tmp3_*(tmp16_)+tmp55_*tmp3_*(tmp19_)))/tmp56_;
  mCompDer[0][22] = (((tmp57_*tmp9_+tmp3_*tmp10_)*(tmp12_)+(tmp57_*tmp2_+tmp3_*tmp14_)*(tmp16_)+tmp3_*tmp17_*(tmp19_))*(tmp38_)-(tmp49_)*((tmp58_*tmp9_+tmp57_*tmp10_)*(tmp12_)+(tmp58_*tmp2_+tmp57_*tmp14_)*(tmp16_)+tmp57_*tmp17_*(tmp19_)))/tmp56_;
  mCompDer[0][23] = (tmp24_*(tmp40_)*(tmp38_)-(tmp49_)*tmp24_*(tmp29_))/tmp56_;
  mCompDer[0][24] = (tmp24_*(tmp44_)*(tmp38_)-(tmp49_)*tmp24_*(tmp33_))/tmp56_;
  mCompDer[0][25] = (tmp24_*tmp47_*(tmp38_)-(tmp49_)*tmp24_*tmp36_)/tmp56_;
}


void cEqAppui_Y_C2MDPol3::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_Y_C2MDPol3 Has no Der Sec");
}

void cEqAppui_Y_C2MDPol3::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_Y_C2MDPol3::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_Y_C2MDPol3::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_Y_C2MDPol3::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_Y_C2MDPol3::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_Y_C2MDPol3::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_Y_C2MDPol3::mTheAuto("cEqAppui_Y_C2MDPol3",cEqAppui_Y_C2MDPol3::Alloc);


cElCompiledFonc *  cEqAppui_Y_C2MDPol3::Alloc()
{  return new cEqAppui_Y_C2MDPol3();
}


