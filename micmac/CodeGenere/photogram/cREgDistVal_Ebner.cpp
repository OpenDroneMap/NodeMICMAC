// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cREgDistVal_Ebner.h"


cREgDistVal_Ebner::cREgDistVal_Ebner():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("Intr",0,15));
   Close(false);
}



void cREgDistVal_Ebner::ComputeVal()
{
   double tmp0_ = mLocEbner_State_0_0 * mLocEbner_State_0_0;
   double tmp1_ = tmp0_ * 0.666667;
   double tmp2_ = mLocRegDistValP1_y * mLocRegDistValP1_y;
   double tmp3_ = tmp2_ - tmp1_;
   double tmp4_ = mLocRegDistValP1_x * mLocRegDistValP1_x;
   double tmp5_ = tmp4_ - tmp1_;
   double tmp6_ = mCompCoord[3];
   double tmp7_ = mCompCoord[4];
   double tmp8_ = mCompCoord[5];
   double tmp9_ = mLocRegDistValP1_x * mLocRegDistValP1_y;
   double tmp10_ = mCompCoord[6];

  mVal[0] = (((1 + tmp6_) * mLocRegDistValP1_x + tmp7_ * mLocRegDistValP1_y) - tmp8_ * 2 * (tmp5_) + tmp10_ * tmp9_ + mCompCoord[7] * (tmp3_) + mCompCoord[9] * mLocRegDistValP1_x * (tmp3_) + mCompCoord[11] * mLocRegDistValP1_y * (tmp5_) + mCompCoord[13] * (tmp5_) * (tmp3_)) - mLocRegDistKnownVal_x;

  mVal[1] = (((1 - tmp6_) * mLocRegDistValP1_y + tmp7_ * mLocRegDistValP1_x + tmp8_ * tmp9_) - tmp10_ * 2 * (tmp3_) + mCompCoord[8] * (tmp5_) + mCompCoord[10] * mLocRegDistValP1_y * (tmp5_) + mCompCoord[12] * mLocRegDistValP1_x * (tmp3_) + mCompCoord[14] * (tmp5_) * (tmp3_)) - mLocRegDistKnownVal_y;

}


void cREgDistVal_Ebner::ComputeValDeriv()
{
   double tmp0_ = mLocEbner_State_0_0 * mLocEbner_State_0_0;
   double tmp1_ = tmp0_ * 0.666667;
   double tmp2_ = mLocRegDistValP1_y * mLocRegDistValP1_y;
   double tmp3_ = tmp2_ - tmp1_;
   double tmp4_ = mLocRegDistValP1_x * mLocRegDistValP1_x;
   double tmp5_ = tmp4_ - tmp1_;
   double tmp6_ = mLocRegDistValP1_x * mLocRegDistValP1_y;
   double tmp7_ = mCompCoord[3];
   double tmp8_ = mCompCoord[4];
   double tmp9_ = mCompCoord[5];
   double tmp10_ = mCompCoord[6];
   double tmp11_ = mLocRegDistValP1_y * (tmp5_);
   double tmp12_ = mLocRegDistValP1_x * (tmp3_);
   double tmp13_ = (tmp5_) * (tmp3_);

  mVal[0] = (((1 + tmp7_) * mLocRegDistValP1_x + tmp8_ * mLocRegDistValP1_y) - tmp9_ * 2 * (tmp5_) + tmp10_ * tmp6_ + mCompCoord[7] * (tmp3_) + mCompCoord[9] * mLocRegDistValP1_x * (tmp3_) + mCompCoord[11] * mLocRegDistValP1_y * (tmp5_) + mCompCoord[13] * (tmp5_) * (tmp3_)) - mLocRegDistKnownVal_x;

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = mLocRegDistValP1_x;
  mCompDer[0][4] = mLocRegDistValP1_y;
  mCompDer[0][5] = -(2 * (tmp5_));
  mCompDer[0][6] = tmp6_;
  mCompDer[0][7] = tmp3_;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = tmp12_;
  mCompDer[0][10] = 0;
  mCompDer[0][11] = tmp11_;
  mCompDer[0][12] = 0;
  mCompDer[0][13] = tmp13_;
  mCompDer[0][14] = 0;
  mVal[1] = (((1 - tmp7_) * mLocRegDistValP1_y + tmp8_ * mLocRegDistValP1_x + tmp9_ * tmp6_) - tmp10_ * 2 * (tmp3_) + mCompCoord[8] * (tmp5_) + mCompCoord[10] * mLocRegDistValP1_y * (tmp5_) + mCompCoord[12] * mLocRegDistValP1_x * (tmp3_) + mCompCoord[14] * (tmp5_) * (tmp3_)) - mLocRegDistKnownVal_y;

  mCompDer[1][0] = 0;
  mCompDer[1][1] = 0;
  mCompDer[1][2] = 0;
  mCompDer[1][3] = -(1) * mLocRegDistValP1_y;
  mCompDer[1][4] = mLocRegDistValP1_x;
  mCompDer[1][5] = tmp6_;
  mCompDer[1][6] = -(2 * (tmp3_));
  mCompDer[1][7] = 0;
  mCompDer[1][8] = tmp5_;
  mCompDer[1][9] = 0;
  mCompDer[1][10] = tmp11_;
  mCompDer[1][11] = 0;
  mCompDer[1][12] = tmp12_;
  mCompDer[1][13] = 0;
  mCompDer[1][14] = tmp13_;
}


void cREgDistVal_Ebner::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cREgDistVal_Ebner Has no Der Sec");
}

void cREgDistVal_Ebner::SetEbner_State_0_0(double aVal){ mLocEbner_State_0_0 = aVal;}
void cREgDistVal_Ebner::SetRegDistKnownVal_x(double aVal){ mLocRegDistKnownVal_x = aVal;}
void cREgDistVal_Ebner::SetRegDistKnownVal_y(double aVal){ mLocRegDistKnownVal_y = aVal;}
void cREgDistVal_Ebner::SetRegDistValP1_x(double aVal){ mLocRegDistValP1_x = aVal;}
void cREgDistVal_Ebner::SetRegDistValP1_y(double aVal){ mLocRegDistValP1_y = aVal;}



double * cREgDistVal_Ebner::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Ebner_State_0_0") return & mLocEbner_State_0_0;
   if (aName == "RegDistKnownVal_x") return & mLocRegDistKnownVal_x;
   if (aName == "RegDistKnownVal_y") return & mLocRegDistKnownVal_y;
   if (aName == "RegDistValP1_x") return & mLocRegDistValP1_x;
   if (aName == "RegDistValP1_y") return & mLocRegDistValP1_y;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cREgDistVal_Ebner::mTheAuto("cREgDistVal_Ebner",cREgDistVal_Ebner::Alloc);


cElCompiledFonc *  cREgDistVal_Ebner::Alloc()
{  return new cREgDistVal_Ebner();
}


