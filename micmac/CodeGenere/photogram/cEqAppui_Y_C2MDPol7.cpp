// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_Y_C2MDPol7.h"


cEqAppui_Y_C2MDPol7::cEqAppui_Y_C2MDPol7():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,72));
   AddIntRef (cIncIntervale("Orient",72,78));
   Close(false);
}



void cEqAppui_Y_C2MDPol7::ComputeVal()
{
   double tmp0_ = mCompCoord[72];
   double tmp1_ = mCompCoord[74];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[73];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[75];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[76];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[77];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = ElSquare(mLocYIm);
   double tmp21_ = ElSquare(mLocXIm);
   double tmp22_ = VCube(mLocYIm);
   double tmp23_ = VCube(mLocXIm);
   double tmp24_ = VPow4(mLocYIm);
   double tmp25_ = VPow4(mLocXIm);
   double tmp26_ = VPow5(mLocYIm);
   double tmp27_ = VPow5(mLocXIm);
   double tmp28_ = VPow6(mLocYIm);
   double tmp29_ = VPow6(mLocXIm);

  mVal[0] = ((tmp9_*tmp3_+tmp10_*tmp8_)*(tmp12_)+(tmp2_*tmp3_+tmp14_*tmp8_)*(tmp16_)+tmp17_*tmp8_*(tmp19_))/((tmp9_*tmp13_+tmp10_*tmp3_)*(tmp12_)+(tmp2_*tmp13_+tmp14_*tmp3_)*(tmp16_)+tmp17_*tmp3_*(tmp19_))-(mCompCoord[36]+mCompCoord[37]*mLocYIm+mCompCoord[38]*mLocXIm+mCompCoord[39]*tmp20_+mCompCoord[40]*mLocXIm*mLocYIm+mCompCoord[41]*tmp21_+mCompCoord[42]*tmp22_+mCompCoord[43]*mLocXIm*tmp20_+mCompCoord[44]*tmp21_*mLocYIm+mCompCoord[45]*tmp23_+mCompCoord[46]*tmp24_+mCompCoord[47]*mLocXIm*tmp22_+mCompCoord[48]*tmp21_*tmp20_+mCompCoord[49]*tmp23_*mLocYIm+mCompCoord[50]*tmp25_+mCompCoord[51]*tmp26_+mCompCoord[52]*mLocXIm*tmp24_+mCompCoord[53]*tmp21_*tmp22_+mCompCoord[54]*tmp23_*tmp20_+mCompCoord[55]*tmp25_*mLocYIm+mCompCoord[56]*tmp27_+mCompCoord[57]*tmp28_+mCompCoord[58]*mLocXIm*tmp26_+mCompCoord[59]*tmp21_*tmp24_+mCompCoord[60]*tmp23_*tmp22_+mCompCoord[61]*tmp25_*tmp20_+mCompCoord[62]*tmp27_*mLocYIm+mCompCoord[63]*tmp29_+mCompCoord[64]*VPow7(mLocYIm)+mCompCoord[65]*mLocXIm*tmp28_+mCompCoord[66]*tmp21_*tmp26_+mCompCoord[67]*tmp23_*tmp24_+mCompCoord[68]*tmp25_*tmp22_+mCompCoord[69]*tmp27_*tmp20_+mCompCoord[70]*tmp29_*mLocYIm+mCompCoord[71]*VPow7(mLocXIm));

}


void cEqAppui_Y_C2MDPol7::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[72];
   double tmp1_ = mCompCoord[74];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[73];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[75];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[76];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[77];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = ElSquare(mLocYIm);
   double tmp21_ = ElSquare(mLocXIm);
   double tmp22_ = VCube(mLocYIm);
   double tmp23_ = VCube(mLocXIm);
   double tmp24_ = VPow4(mLocYIm);
   double tmp25_ = VPow4(mLocXIm);
   double tmp26_ = VPow5(mLocYIm);
   double tmp27_ = VPow5(mLocXIm);
   double tmp28_ = VPow6(mLocYIm);
   double tmp29_ = VPow6(mLocXIm);
   double tmp30_ = VPow7(mLocYIm);
   double tmp31_ = VPow7(mLocXIm);
   double tmp32_ = -(1);
   double tmp33_ = tmp32_*tmp4_;
   double tmp34_ = tmp10_*tmp8_;
   double tmp35_ = tmp9_*tmp13_;
   double tmp36_ = tmp10_*tmp3_;
   double tmp37_ = tmp35_+tmp36_;
   double tmp38_ = (tmp37_)*(tmp12_);
   double tmp39_ = tmp2_*tmp13_;
   double tmp40_ = tmp14_*tmp3_;
   double tmp41_ = tmp39_+tmp40_;
   double tmp42_ = (tmp41_)*(tmp16_);
   double tmp43_ = tmp38_+tmp42_;
   double tmp44_ = tmp17_*tmp3_;
   double tmp45_ = tmp44_*(tmp19_);
   double tmp46_ = tmp43_+tmp45_;
   double tmp47_ = tmp9_*tmp3_;
   double tmp48_ = tmp47_+tmp34_;
   double tmp49_ = (tmp48_)*(tmp12_);
   double tmp50_ = tmp2_*tmp3_;
   double tmp51_ = tmp14_*tmp8_;
   double tmp52_ = tmp50_+tmp51_;
   double tmp53_ = (tmp52_)*(tmp16_);
   double tmp54_ = tmp49_+tmp53_;
   double tmp55_ = tmp17_*tmp8_;
   double tmp56_ = tmp55_*(tmp19_);
   double tmp57_ = tmp54_+tmp56_;
   double tmp58_ = -(tmp2_);
   double tmp59_ = tmp33_*tmp7_;
   double tmp60_ = -(tmp17_);
   double tmp61_ = tmp60_*tmp2_;
   double tmp62_ = tmp60_*tmp4_;
   double tmp63_ = tmp32_*tmp6_;
   double tmp64_ = ElSquare(tmp46_);
   double tmp65_ = tmp32_*tmp8_;
   double tmp66_ = -(tmp3_);

  mVal[0] = (tmp57_)/(tmp46_)-(mCompCoord[36]+mCompCoord[37]*mLocYIm+mCompCoord[38]*mLocXIm+mCompCoord[39]*tmp20_+mCompCoord[40]*mLocXIm*mLocYIm+mCompCoord[41]*tmp21_+mCompCoord[42]*tmp22_+mCompCoord[43]*mLocXIm*tmp20_+mCompCoord[44]*tmp21_*mLocYIm+mCompCoord[45]*tmp23_+mCompCoord[46]*tmp24_+mCompCoord[47]*mLocXIm*tmp22_+mCompCoord[48]*tmp21_*tmp20_+mCompCoord[49]*tmp23_*mLocYIm+mCompCoord[50]*tmp25_+mCompCoord[51]*tmp26_+mCompCoord[52]*mLocXIm*tmp24_+mCompCoord[53]*tmp21_*tmp22_+mCompCoord[54]*tmp23_*tmp20_+mCompCoord[55]*tmp25_*mLocYIm+mCompCoord[56]*tmp27_+mCompCoord[57]*tmp28_+mCompCoord[58]*mLocXIm*tmp26_+mCompCoord[59]*tmp21_*tmp24_+mCompCoord[60]*tmp23_*tmp22_+mCompCoord[61]*tmp25_*tmp20_+mCompCoord[62]*tmp27_*mLocYIm+mCompCoord[63]*tmp29_+mCompCoord[64]*tmp30_+mCompCoord[65]*mLocXIm*tmp28_+mCompCoord[66]*tmp21_*tmp26_+mCompCoord[67]*tmp23_*tmp24_+mCompCoord[68]*tmp25_*tmp22_+mCompCoord[69]*tmp27_*tmp20_+mCompCoord[70]*tmp29_*mLocYIm+mCompCoord[71]*tmp31_);

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = 0;
  mCompDer[0][4] = 0;
  mCompDer[0][5] = 0;
  mCompDer[0][6] = 0;
  mCompDer[0][7] = 0;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = 0;
  mCompDer[0][10] = 0;
  mCompDer[0][11] = 0;
  mCompDer[0][12] = 0;
  mCompDer[0][13] = 0;
  mCompDer[0][14] = 0;
  mCompDer[0][15] = 0;
  mCompDer[0][16] = 0;
  mCompDer[0][17] = 0;
  mCompDer[0][18] = 0;
  mCompDer[0][19] = 0;
  mCompDer[0][20] = 0;
  mCompDer[0][21] = 0;
  mCompDer[0][22] = 0;
  mCompDer[0][23] = 0;
  mCompDer[0][24] = 0;
  mCompDer[0][25] = 0;
  mCompDer[0][26] = 0;
  mCompDer[0][27] = 0;
  mCompDer[0][28] = 0;
  mCompDer[0][29] = 0;
  mCompDer[0][30] = 0;
  mCompDer[0][31] = 0;
  mCompDer[0][32] = 0;
  mCompDer[0][33] = 0;
  mCompDer[0][34] = 0;
  mCompDer[0][35] = 0;
  mCompDer[0][36] = tmp32_;
  mCompDer[0][37] = -(mLocYIm);
  mCompDer[0][38] = -(mLocXIm);
  mCompDer[0][39] = -(tmp20_);
  mCompDer[0][40] = -(mLocXIm*mLocYIm);
  mCompDer[0][41] = -(tmp21_);
  mCompDer[0][42] = -(tmp22_);
  mCompDer[0][43] = -(mLocXIm*tmp20_);
  mCompDer[0][44] = -(tmp21_*mLocYIm);
  mCompDer[0][45] = -(tmp23_);
  mCompDer[0][46] = -(tmp24_);
  mCompDer[0][47] = -(mLocXIm*tmp22_);
  mCompDer[0][48] = -(tmp21_*tmp20_);
  mCompDer[0][49] = -(tmp23_*mLocYIm);
  mCompDer[0][50] = -(tmp25_);
  mCompDer[0][51] = -(tmp26_);
  mCompDer[0][52] = -(mLocXIm*tmp24_);
  mCompDer[0][53] = -(tmp21_*tmp22_);
  mCompDer[0][54] = -(tmp23_*tmp20_);
  mCompDer[0][55] = -(tmp25_*mLocYIm);
  mCompDer[0][56] = -(tmp27_);
  mCompDer[0][57] = -(tmp28_);
  mCompDer[0][58] = -(mLocXIm*tmp26_);
  mCompDer[0][59] = -(tmp21_*tmp24_);
  mCompDer[0][60] = -(tmp23_*tmp22_);
  mCompDer[0][61] = -(tmp25_*tmp20_);
  mCompDer[0][62] = -(tmp27_*mLocYIm);
  mCompDer[0][63] = -(tmp29_);
  mCompDer[0][64] = -(tmp30_);
  mCompDer[0][65] = -(mLocXIm*tmp28_);
  mCompDer[0][66] = -(tmp21_*tmp26_);
  mCompDer[0][67] = -(tmp23_*tmp24_);
  mCompDer[0][68] = -(tmp25_*tmp22_);
  mCompDer[0][69] = -(tmp27_*tmp20_);
  mCompDer[0][70] = -(tmp29_*mLocYIm);
  mCompDer[0][71] = -(tmp31_);
  mCompDer[0][72] = (((tmp58_*tmp3_+tmp59_*tmp8_)*(tmp12_)+(tmp33_*tmp3_+tmp34_)*(tmp16_))*(tmp46_)-(tmp57_)*((tmp58_*tmp13_+tmp59_*tmp3_)*(tmp12_)+(tmp33_*tmp13_+tmp36_)*(tmp16_)))/tmp64_;
  mCompDer[0][73] = ((tmp61_*tmp8_*(tmp12_)+tmp62_*tmp8_*(tmp16_)+tmp63_*tmp8_*(tmp19_))*(tmp46_)-(tmp57_)*(tmp61_*tmp3_*(tmp12_)+tmp62_*tmp3_*(tmp16_)+tmp63_*tmp3_*(tmp19_)))/tmp64_;
  mCompDer[0][74] = (((tmp65_*tmp9_+tmp3_*tmp10_)*(tmp12_)+(tmp65_*tmp2_+tmp3_*tmp14_)*(tmp16_)+tmp3_*tmp17_*(tmp19_))*(tmp46_)-(tmp57_)*((tmp66_*tmp9_+tmp65_*tmp10_)*(tmp12_)+(tmp66_*tmp2_+tmp65_*tmp14_)*(tmp16_)+tmp65_*tmp17_*(tmp19_)))/tmp64_;
  mCompDer[0][75] = (tmp32_*(tmp48_)*(tmp46_)-(tmp57_)*tmp32_*(tmp37_))/tmp64_;
  mCompDer[0][76] = (tmp32_*(tmp52_)*(tmp46_)-(tmp57_)*tmp32_*(tmp41_))/tmp64_;
  mCompDer[0][77] = (tmp32_*tmp55_*(tmp46_)-(tmp57_)*tmp32_*tmp44_)/tmp64_;
}


void cEqAppui_Y_C2MDPol7::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_Y_C2MDPol7 Has no Der Sec");
}

void cEqAppui_Y_C2MDPol7::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_Y_C2MDPol7::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_Y_C2MDPol7::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_Y_C2MDPol7::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_Y_C2MDPol7::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_Y_C2MDPol7::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_Y_C2MDPol7::mTheAuto("cEqAppui_Y_C2MDPol7",cEqAppui_Y_C2MDPol7::Alloc);


cElCompiledFonc *  cEqAppui_Y_C2MDPol7::Alloc()
{  return new cEqAppui_Y_C2MDPol7();
}


