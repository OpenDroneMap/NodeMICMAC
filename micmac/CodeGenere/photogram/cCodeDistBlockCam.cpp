// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cCodeDistBlockCam.h"


cCodeDistBlockCam::cCodeDistBlockCam():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("OriL0",6,12));
   AddIntRef (cIncIntervale("OriL1",18,24));
   AddIntRef (cIncIntervale("OriR0",0,6));
   AddIntRef (cIncIntervale("OriR1",12,18));
   Close(false);
}



void cCodeDistBlockCam::ComputeVal()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mCompCoord[9];
   double tmp2_ = tmp0_ - tmp1_;
   double tmp3_ = mCompCoord[4];
   double tmp4_ = mCompCoord[10];
   double tmp5_ = tmp3_ - tmp4_;
   double tmp6_ = mCompCoord[5];
   double tmp7_ = mCompCoord[11];
   double tmp8_ = tmp6_ - tmp7_;
   double tmp9_ = mCompCoord[15];
   double tmp10_ = mCompCoord[21];
   double tmp11_ = tmp9_ - tmp10_;
   double tmp12_ = mCompCoord[16];
   double tmp13_ = mCompCoord[22];
   double tmp14_ = tmp12_ - tmp13_;
   double tmp15_ = mCompCoord[17];
   double tmp16_ = mCompCoord[23];
   double tmp17_ = tmp15_ - tmp16_;

  mVal[0] = sqrt((tmp2_) * (tmp2_) + (tmp5_) * (tmp5_) + (tmp8_) * (tmp8_)) - sqrt((tmp11_) * (tmp11_) + (tmp14_) * (tmp14_) + (tmp17_) * (tmp17_));

}


void cCodeDistBlockCam::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mCompCoord[9];
   double tmp2_ = tmp0_ - tmp1_;
   double tmp3_ = mCompCoord[4];
   double tmp4_ = mCompCoord[10];
   double tmp5_ = tmp3_ - tmp4_;
   double tmp6_ = mCompCoord[5];
   double tmp7_ = mCompCoord[11];
   double tmp8_ = tmp6_ - tmp7_;
   double tmp9_ = mCompCoord[15];
   double tmp10_ = mCompCoord[21];
   double tmp11_ = tmp9_ - tmp10_;
   double tmp12_ = mCompCoord[16];
   double tmp13_ = mCompCoord[22];
   double tmp14_ = tmp12_ - tmp13_;
   double tmp15_ = mCompCoord[17];
   double tmp16_ = mCompCoord[23];
   double tmp17_ = tmp15_ - tmp16_;
   double tmp18_ = (tmp2_) * (tmp2_);
   double tmp19_ = (tmp5_) * (tmp5_);
   double tmp20_ = tmp18_ + tmp19_;
   double tmp21_ = (tmp8_) * (tmp8_);
   double tmp22_ = tmp20_ + tmp21_;
   double tmp23_ = sqrt(tmp22_);
   double tmp24_ = -(1);
   double tmp25_ = tmp24_ * (tmp2_);
   double tmp26_ = tmp24_ * (tmp5_);
   double tmp27_ = tmp24_ * (tmp8_);
   double tmp28_ = (tmp11_) * (tmp11_);
   double tmp29_ = (tmp14_) * (tmp14_);
   double tmp30_ = tmp28_ + tmp29_;
   double tmp31_ = (tmp17_) * (tmp17_);
   double tmp32_ = tmp30_ + tmp31_;
   double tmp33_ = sqrt(tmp32_);
   double tmp34_ = tmp24_ * (tmp11_);
   double tmp35_ = tmp24_ * (tmp14_);
   double tmp36_ = tmp24_ * (tmp17_);

  mVal[0] = tmp23_ - tmp33_;

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = (0.500000 * (tmp2_ + tmp2_)) / tmp23_;
  mCompDer[0][4] = (0.500000 * (tmp5_ + tmp5_)) / tmp23_;
  mCompDer[0][5] = (0.500000 * (tmp8_ + tmp8_)) / tmp23_;
  mCompDer[0][6] = 0;
  mCompDer[0][7] = 0;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = (0.500000 * (tmp25_ + tmp25_)) / tmp23_;
  mCompDer[0][10] = (0.500000 * (tmp26_ + tmp26_)) / tmp23_;
  mCompDer[0][11] = (0.500000 * (tmp27_ + tmp27_)) / tmp23_;
  mCompDer[0][12] = 0;
  mCompDer[0][13] = 0;
  mCompDer[0][14] = 0;
  mCompDer[0][15] = -((0.500000 * (tmp11_ + tmp11_)) / tmp33_);
  mCompDer[0][16] = -((0.500000 * (tmp14_ + tmp14_)) / tmp33_);
  mCompDer[0][17] = -((0.500000 * (tmp17_ + tmp17_)) / tmp33_);
  mCompDer[0][18] = 0;
  mCompDer[0][19] = 0;
  mCompDer[0][20] = 0;
  mCompDer[0][21] = -((0.500000 * (tmp34_ + tmp34_)) / tmp33_);
  mCompDer[0][22] = -((0.500000 * (tmp35_ + tmp35_)) / tmp33_);
  mCompDer[0][23] = -((0.500000 * (tmp36_ + tmp36_)) / tmp33_);
}


void cCodeDistBlockCam::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cCodeDistBlockCam Has no Der Sec");
}




double * cCodeDistBlockCam::AdrVarLocFromString(const std::string & aName)
{
   return 0;
}


cElCompiledFonc::cAutoAddEntry cCodeDistBlockCam::mTheAuto("cCodeDistBlockCam",cCodeDistBlockCam::Alloc);


cElCompiledFonc *  cCodeDistBlockCam::Alloc()
{  return new cCodeDistBlockCam();
}


