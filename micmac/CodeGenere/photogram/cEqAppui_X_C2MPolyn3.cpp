// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_X_C2MPolyn3.h"


cEqAppui_X_C2MPolyn3::cEqAppui_X_C2MPolyn3():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,17));
   AddIntRef (cIncIntervale("Orient",17,23));
   Close(false);
}



void cEqAppui_X_C2MPolyn3::ComputeVal()
{
   double tmp0_ = mCompCoord[17];
   double tmp1_ = mCompCoord[18];
   double tmp2_ = cos(tmp1_);
   double tmp3_ = sin(tmp0_);
   double tmp4_ = cos(tmp0_);
   double tmp5_ = sin(tmp1_);
   double tmp6_ = mCompCoord[19];
   double tmp7_ = mCompCoord[20];
   double tmp8_ = mLocXTer-tmp7_;
   double tmp9_ = sin(tmp6_);
   double tmp10_ = -(tmp9_);
   double tmp11_ = -(tmp5_);
   double tmp12_ = cos(tmp6_);
   double tmp13_ = mCompCoord[21];
   double tmp14_ = mLocYTer-tmp13_;
   double tmp15_ = mCompCoord[22];
   double tmp16_ = mLocZTer-tmp15_;
   double tmp17_ = mLocXIm/mLocPolyn3_State_0_0;
   double tmp18_ = mLocYIm/mLocPolyn3_State_0_0;
   double tmp19_ = (tmp17_)*(tmp17_);
   double tmp20_ = (tmp18_)*(tmp18_);

  mVal[0] = (mCompCoord[1]+mCompCoord[0]*((tmp4_*tmp2_*(tmp8_)+tmp3_*tmp2_*(tmp14_)+tmp5_*(tmp16_))/((-(tmp3_)*tmp10_+tmp4_*tmp11_*tmp12_)*(tmp8_)+(tmp4_*tmp10_+tmp3_*tmp11_*tmp12_)*(tmp14_)+tmp2_*tmp12_*(tmp16_))))-((((1+mCompCoord[3])*(tmp17_)+mCompCoord[4]*(tmp18_))-mCompCoord[5]*2*tmp19_+mCompCoord[6]*(tmp17_)*(tmp18_)+mCompCoord[7]*tmp20_)*mLocPolyn3_State_0_0+(mCompCoord[9]*tmp19_*(tmp17_)+mCompCoord[10]*(tmp18_)*(tmp17_)*(tmp17_)+mCompCoord[11]*tmp20_*(tmp17_)+mCompCoord[12]*(tmp18_)*tmp20_)*mLocPolyn3_State_0_0);

}


void cEqAppui_X_C2MPolyn3::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[17];
   double tmp1_ = mCompCoord[18];
   double tmp2_ = cos(tmp1_);
   double tmp3_ = sin(tmp0_);
   double tmp4_ = cos(tmp0_);
   double tmp5_ = sin(tmp1_);
   double tmp6_ = mCompCoord[19];
   double tmp7_ = mCompCoord[20];
   double tmp8_ = mLocXTer-tmp7_;
   double tmp9_ = sin(tmp6_);
   double tmp10_ = -(tmp9_);
   double tmp11_ = -(tmp5_);
   double tmp12_ = cos(tmp6_);
   double tmp13_ = mCompCoord[21];
   double tmp14_ = mLocYTer-tmp13_;
   double tmp15_ = mCompCoord[22];
   double tmp16_ = mLocZTer-tmp15_;
   double tmp17_ = mLocXIm/mLocPolyn3_State_0_0;
   double tmp18_ = mLocYIm/mLocPolyn3_State_0_0;
   double tmp19_ = (tmp17_)*(tmp17_);
   double tmp20_ = (tmp18_)*(tmp18_);
   double tmp21_ = tmp4_*tmp2_;
   double tmp22_ = tmp21_*(tmp8_);
   double tmp23_ = tmp3_*tmp2_;
   double tmp24_ = tmp23_*(tmp14_);
   double tmp25_ = tmp22_+tmp24_;
   double tmp26_ = tmp5_*(tmp16_);
   double tmp27_ = tmp25_+tmp26_;
   double tmp28_ = -(tmp3_);
   double tmp29_ = tmp28_*tmp10_;
   double tmp30_ = tmp4_*tmp11_;
   double tmp31_ = tmp30_*tmp12_;
   double tmp32_ = tmp29_+tmp31_;
   double tmp33_ = (tmp32_)*(tmp8_);
   double tmp34_ = tmp4_*tmp10_;
   double tmp35_ = tmp3_*tmp11_;
   double tmp36_ = tmp35_*tmp12_;
   double tmp37_ = tmp34_+tmp36_;
   double tmp38_ = (tmp37_)*(tmp14_);
   double tmp39_ = tmp33_+tmp38_;
   double tmp40_ = tmp2_*tmp12_;
   double tmp41_ = tmp40_*(tmp16_);
   double tmp42_ = tmp39_+tmp41_;
   double tmp43_ = (tmp27_)/(tmp42_);
   double tmp44_ = (tmp17_)*(tmp18_);
   double tmp45_ = tmp19_*(tmp17_);
   double tmp46_ = (tmp18_)*(tmp17_);
   double tmp47_ = tmp46_*(tmp17_);
   double tmp48_ = tmp20_*(tmp17_);
   double tmp49_ = (tmp18_)*tmp20_;
   double tmp50_ = -(1);
   double tmp51_ = tmp50_*tmp3_;
   double tmp52_ = mCompCoord[0];
   double tmp53_ = tmp50_*tmp5_;
   double tmp54_ = -(tmp2_);
   double tmp55_ = ElSquare(tmp42_);
   double tmp56_ = -(tmp12_);
   double tmp57_ = tmp50_*tmp9_;

  mVal[0] = (mCompCoord[1]+tmp52_*(tmp43_))-((((1+mCompCoord[3])*(tmp17_)+mCompCoord[4]*(tmp18_))-mCompCoord[5]*2*tmp19_+mCompCoord[6]*tmp44_+mCompCoord[7]*tmp20_)*mLocPolyn3_State_0_0+(mCompCoord[9]*tmp45_+mCompCoord[10]*tmp47_+mCompCoord[11]*tmp48_+mCompCoord[12]*tmp49_)*mLocPolyn3_State_0_0);

  mCompDer[0][0] = tmp43_;
  mCompDer[0][1] = 1;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = -((tmp17_)*mLocPolyn3_State_0_0);
  mCompDer[0][4] = -((tmp18_)*mLocPolyn3_State_0_0);
  mCompDer[0][5] = -(-(2*tmp19_)*mLocPolyn3_State_0_0);
  mCompDer[0][6] = -(tmp44_*mLocPolyn3_State_0_0);
  mCompDer[0][7] = -(tmp20_*mLocPolyn3_State_0_0);
  mCompDer[0][8] = 0;
  mCompDer[0][9] = -(tmp45_*mLocPolyn3_State_0_0);
  mCompDer[0][10] = -(tmp47_*mLocPolyn3_State_0_0);
  mCompDer[0][11] = -(tmp48_*mLocPolyn3_State_0_0);
  mCompDer[0][12] = -(tmp49_*mLocPolyn3_State_0_0);
  mCompDer[0][13] = 0;
  mCompDer[0][14] = 0;
  mCompDer[0][15] = 0;
  mCompDer[0][16] = 0;
  mCompDer[0][17] = (((tmp51_*tmp2_*(tmp8_)+tmp21_*(tmp14_))*(tmp42_)-(tmp27_)*((-(tmp4_)*tmp10_+tmp51_*tmp11_*tmp12_)*(tmp8_)+(tmp51_*tmp10_+tmp31_)*(tmp14_)))/tmp55_)*tmp52_;
  mCompDer[0][18] = (((tmp53_*tmp4_*(tmp8_)+tmp53_*tmp3_*(tmp14_)+tmp2_*(tmp16_))*(tmp42_)-(tmp27_)*(tmp54_*tmp4_*tmp12_*(tmp8_)+tmp54_*tmp3_*tmp12_*(tmp14_)+tmp53_*tmp12_*(tmp16_)))/tmp55_)*tmp52_;
  mCompDer[0][19] = (-((tmp27_)*((tmp56_*tmp28_+tmp57_*tmp30_)*(tmp8_)+(tmp56_*tmp4_+tmp57_*tmp35_)*(tmp14_)+tmp57_*tmp2_*(tmp16_)))/tmp55_)*tmp52_;
  mCompDer[0][20] = ((tmp50_*tmp21_*(tmp42_)-(tmp27_)*tmp50_*(tmp32_))/tmp55_)*tmp52_;
  mCompDer[0][21] = ((tmp50_*tmp23_*(tmp42_)-(tmp27_)*tmp50_*(tmp37_))/tmp55_)*tmp52_;
  mCompDer[0][22] = ((tmp53_*(tmp42_)-(tmp27_)*tmp50_*tmp40_)/tmp55_)*tmp52_;
}


void cEqAppui_X_C2MPolyn3::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_X_C2MPolyn3 Has no Der Sec");
}

void cEqAppui_X_C2MPolyn3::SetPolyn3_State_0_0(double aVal){ mLocPolyn3_State_0_0 = aVal;}
void cEqAppui_X_C2MPolyn3::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_X_C2MPolyn3::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_X_C2MPolyn3::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_X_C2MPolyn3::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_X_C2MPolyn3::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_X_C2MPolyn3::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Polyn3_State_0_0") return & mLocPolyn3_State_0_0;
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_X_C2MPolyn3::mTheAuto("cEqAppui_X_C2MPolyn3",cEqAppui_X_C2MPolyn3::Alloc);


cElCompiledFonc *  cEqAppui_X_C2MPolyn3::Alloc()
{  return new cEqAppui_X_C2MPolyn3();
}


