// File Automatically generated by eLiSe
#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_Y_C2MDCBrown.h"


cEqAppui_Y_C2MDCBrown::cEqAppui_Y_C2MDCBrown():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,17));
   AddIntRef (cIncIntervale("Orient",17,23));
   Close(false);
}



void cEqAppui_Y_C2MDCBrown::ComputeVal()
{
   double tmp0_ = mCompCoord[17];
   double tmp1_ = mCompCoord[19];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[18];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[20];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[21];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[22];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = mLocXIm*mLocXIm;
   double tmp21_ = mLocYIm*mLocYIm;
   double tmp22_ = tmp20_*tmp21_;

  mVal[0] = (mCompCoord[2]+mCompCoord[0]*(((tmp9_*tmp3_+tmp10_*tmp8_)*(tmp12_)+(tmp2_*tmp3_+tmp14_*tmp8_)*(tmp16_)+tmp17_*tmp8_*(tmp19_))/((tmp9_*tmp13_+tmp10_*tmp3_)*(tmp12_)+(tmp2_*tmp13_+tmp14_*tmp3_)*(tmp16_)+tmp17_*tmp3_*(tmp19_))))-(mLocYIm+mCompCoord[10]*mLocXIm*mLocYIm+mCompCoord[11]*tmp20_+mCompCoord[12]*tmp20_*mLocYIm+mCompCoord[13]*mLocXIm*tmp21_+mCompCoord[14]*tmp22_+mCompCoord[15]*(mLocYIm/mLocDCBrown_State_0_0)*tmp22_+mCompCoord[16]*mLocYIm*(tmp20_+tmp21_));

}


void cEqAppui_Y_C2MDCBrown::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[17];
   double tmp1_ = mCompCoord[19];
   double tmp2_ = cos(tmp0_);
   double tmp3_ = cos(tmp1_);
   double tmp4_ = sin(tmp0_);
   double tmp5_ = mCompCoord[18];
   double tmp6_ = sin(tmp5_);
   double tmp7_ = -(tmp6_);
   double tmp8_ = sin(tmp1_);
   double tmp9_ = -(tmp4_);
   double tmp10_ = tmp2_*tmp7_;
   double tmp11_ = mCompCoord[20];
   double tmp12_ = mLocXTer-tmp11_;
   double tmp13_ = -(tmp8_);
   double tmp14_ = tmp4_*tmp7_;
   double tmp15_ = mCompCoord[21];
   double tmp16_ = mLocYTer-tmp15_;
   double tmp17_ = cos(tmp5_);
   double tmp18_ = mCompCoord[22];
   double tmp19_ = mLocZTer-tmp18_;
   double tmp20_ = mLocXIm*mLocXIm;
   double tmp21_ = mLocYIm*mLocYIm;
   double tmp22_ = tmp20_*tmp21_;
   double tmp23_ = tmp9_*tmp3_;
   double tmp24_ = tmp10_*tmp8_;
   double tmp25_ = tmp23_+tmp24_;
   double tmp26_ = (tmp25_)*(tmp12_);
   double tmp27_ = tmp2_*tmp3_;
   double tmp28_ = tmp14_*tmp8_;
   double tmp29_ = tmp27_+tmp28_;
   double tmp30_ = (tmp29_)*(tmp16_);
   double tmp31_ = tmp26_+tmp30_;
   double tmp32_ = tmp17_*tmp8_;
   double tmp33_ = tmp32_*(tmp19_);
   double tmp34_ = tmp31_+tmp33_;
   double tmp35_ = tmp9_*tmp13_;
   double tmp36_ = tmp10_*tmp3_;
   double tmp37_ = tmp35_+tmp36_;
   double tmp38_ = (tmp37_)*(tmp12_);
   double tmp39_ = tmp2_*tmp13_;
   double tmp40_ = tmp14_*tmp3_;
   double tmp41_ = tmp39_+tmp40_;
   double tmp42_ = (tmp41_)*(tmp16_);
   double tmp43_ = tmp38_+tmp42_;
   double tmp44_ = tmp17_*tmp3_;
   double tmp45_ = tmp44_*(tmp19_);
   double tmp46_ = tmp43_+tmp45_;
   double tmp47_ = (tmp34_)/(tmp46_);
   double tmp48_ = mLocXIm*mLocYIm;
   double tmp49_ = tmp20_*mLocYIm;
   double tmp50_ = mLocXIm*tmp21_;
   double tmp51_ = mLocYIm/mLocDCBrown_State_0_0;
   double tmp52_ = tmp20_+tmp21_;
   double tmp53_ = -(1);
   double tmp54_ = tmp53_*tmp4_;
   double tmp55_ = -(tmp2_);
   double tmp56_ = tmp54_*tmp7_;
   double tmp57_ = mCompCoord[0];
   double tmp58_ = -(tmp17_);
   double tmp59_ = tmp58_*tmp2_;
   double tmp60_ = tmp58_*tmp4_;
   double tmp61_ = tmp53_*tmp6_;
   double tmp62_ = ElSquare(tmp46_);
   double tmp63_ = tmp53_*tmp8_;
   double tmp64_ = -(tmp3_);

  mVal[0] = (mCompCoord[2]+tmp57_*(tmp47_))-(mLocYIm+mCompCoord[10]*tmp48_+mCompCoord[11]*tmp20_+mCompCoord[12]*tmp49_+mCompCoord[13]*tmp50_+mCompCoord[14]*tmp22_+mCompCoord[15]*(tmp51_)*tmp22_+mCompCoord[16]*mLocYIm*(tmp52_));

  mCompDer[0][0] = tmp47_;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 1;
  mCompDer[0][3] = 0;
  mCompDer[0][4] = 0;
  mCompDer[0][5] = 0;
  mCompDer[0][6] = 0;
  mCompDer[0][7] = 0;
  mCompDer[0][8] = 0;
  mCompDer[0][9] = 0;
  mCompDer[0][10] = -(tmp48_);
  mCompDer[0][11] = -(tmp20_);
  mCompDer[0][12] = -(tmp49_);
  mCompDer[0][13] = -(tmp50_);
  mCompDer[0][14] = -(tmp22_);
  mCompDer[0][15] = -((tmp51_)*tmp22_);
  mCompDer[0][16] = -(mLocYIm*(tmp52_));
  mCompDer[0][17] = ((((tmp55_*tmp3_+tmp56_*tmp8_)*(tmp12_)+(tmp54_*tmp3_+tmp24_)*(tmp16_))*(tmp46_)-(tmp34_)*((tmp55_*tmp13_+tmp56_*tmp3_)*(tmp12_)+(tmp54_*tmp13_+tmp36_)*(tmp16_)))/tmp62_)*tmp57_;
  mCompDer[0][18] = (((tmp59_*tmp8_*(tmp12_)+tmp60_*tmp8_*(tmp16_)+tmp61_*tmp8_*(tmp19_))*(tmp46_)-(tmp34_)*(tmp59_*tmp3_*(tmp12_)+tmp60_*tmp3_*(tmp16_)+tmp61_*tmp3_*(tmp19_)))/tmp62_)*tmp57_;
  mCompDer[0][19] = ((((tmp63_*tmp9_+tmp3_*tmp10_)*(tmp12_)+(tmp63_*tmp2_+tmp3_*tmp14_)*(tmp16_)+tmp3_*tmp17_*(tmp19_))*(tmp46_)-(tmp34_)*((tmp64_*tmp9_+tmp63_*tmp10_)*(tmp12_)+(tmp64_*tmp2_+tmp63_*tmp14_)*(tmp16_)+tmp63_*tmp17_*(tmp19_)))/tmp62_)*tmp57_;
  mCompDer[0][20] = ((tmp53_*(tmp25_)*(tmp46_)-(tmp34_)*tmp53_*(tmp37_))/tmp62_)*tmp57_;
  mCompDer[0][21] = ((tmp53_*(tmp29_)*(tmp46_)-(tmp34_)*tmp53_*(tmp41_))/tmp62_)*tmp57_;
  mCompDer[0][22] = ((tmp53_*tmp32_*(tmp46_)-(tmp34_)*tmp53_*tmp44_)/tmp62_)*tmp57_;
}


void cEqAppui_Y_C2MDCBrown::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_Y_C2MDCBrown Has no Der Sec");
}

void cEqAppui_Y_C2MDCBrown::SetDCBrown_State_0_0(double aVal){ mLocDCBrown_State_0_0 = aVal;}
void cEqAppui_Y_C2MDCBrown::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_Y_C2MDCBrown::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_Y_C2MDCBrown::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_Y_C2MDCBrown::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_Y_C2MDCBrown::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_Y_C2MDCBrown::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "DCBrown_State_0_0") return & mLocDCBrown_State_0_0;
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_Y_C2MDCBrown::mTheAuto("cEqAppui_Y_C2MDCBrown",cEqAppui_Y_C2MDCBrown::Alloc);


cElCompiledFonc *  cEqAppui_Y_C2MDCBrown::Alloc()
{  return new cEqAppui_Y_C2MDCBrown();
}


