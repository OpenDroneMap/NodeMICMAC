// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cEqBBCamFirst.h"


cEqBBCamFirst::cEqBBCamFirst():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("Tmp_PTer",0,3));
   Close(false);
}



void cEqBBCamFirst::ComputeVal()
{
   double tmp0_ = mCompCoord[2];

  mVal[0] = mLocI1_x-mCompCoord[0]/tmp0_;

  mVal[1] = mLocI1_y-mCompCoord[1]/tmp0_;

}


void cEqBBCamFirst::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[2];
   double tmp1_ = mCompCoord[0];
   double tmp2_ = ElSquare(tmp0_);
   double tmp3_ = tmp0_/tmp2_;
   double tmp4_ = -(tmp3_);
   double tmp5_ = mCompCoord[1];

  mVal[0] = mLocI1_x-tmp1_/tmp0_;

  mCompDer[0][0] = tmp4_;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = -(-(tmp1_)/tmp2_);
  mVal[1] = mLocI1_y-tmp5_/tmp0_;

  mCompDer[1][0] = 0;
  mCompDer[1][1] = tmp4_;
  mCompDer[1][2] = -(-(tmp5_)/tmp2_);
}


void cEqBBCamFirst::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqBBCamFirst Has no Der Sec");
}

void cEqBBCamFirst::SetI1_x(double aVal){ mLocI1_x = aVal;}
void cEqBBCamFirst::SetI1_y(double aVal){ mLocI1_y = aVal;}



double * cEqBBCamFirst::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "I1_x") return & mLocI1_x;
   if (aName == "I1_y") return & mLocI1_y;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqBBCamFirst::mTheAuto("cEqBBCamFirst",cEqBBCamFirst::Alloc);


cElCompiledFonc *  cEqBBCamFirst::Alloc()
{  return new cEqBBCamFirst();
}


