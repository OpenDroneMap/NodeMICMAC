// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cEqAppui_X_C2MDPol5.h"


cEqAppui_X_C2MDPol5::cEqAppui_X_C2MDPol5():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Intr",0,42));
   AddIntRef (cIncIntervale("Orient",42,48));
   Close(false);
}



void cEqAppui_X_C2MDPol5::ComputeVal()
{
   double tmp0_ = mCompCoord[42];
   double tmp1_ = mCompCoord[43];
   double tmp2_ = cos(tmp1_);
   double tmp3_ = sin(tmp0_);
   double tmp4_ = cos(tmp0_);
   double tmp5_ = sin(tmp1_);
   double tmp6_ = mCompCoord[44];
   double tmp7_ = mCompCoord[45];
   double tmp8_ = mLocXTer-tmp7_;
   double tmp9_ = sin(tmp6_);
   double tmp10_ = -(tmp9_);
   double tmp11_ = -(tmp5_);
   double tmp12_ = cos(tmp6_);
   double tmp13_ = mCompCoord[46];
   double tmp14_ = mLocYTer-tmp13_;
   double tmp15_ = mCompCoord[47];
   double tmp16_ = mLocZTer-tmp15_;
   double tmp17_ = ElSquare(mLocYIm);
   double tmp18_ = ElSquare(mLocXIm);
   double tmp19_ = VCube(mLocYIm);
   double tmp20_ = VCube(mLocXIm);
   double tmp21_ = VPow4(mLocYIm);
   double tmp22_ = VPow4(mLocXIm);

  mVal[0] = (tmp4_*tmp2_*(tmp8_)+tmp3_*tmp2_*(tmp14_)+tmp5_*(tmp16_))/((-(tmp3_)*tmp10_+tmp4_*tmp11_*tmp12_)*(tmp8_)+(tmp4_*tmp10_+tmp3_*tmp11_*tmp12_)*(tmp14_)+tmp2_*tmp12_*(tmp16_))-(mCompCoord[0]+mCompCoord[1]*mLocYIm+mCompCoord[2]*mLocXIm+mCompCoord[3]*tmp17_+mCompCoord[4]*mLocXIm*mLocYIm+mCompCoord[5]*tmp18_+mCompCoord[6]*tmp19_+mCompCoord[7]*mLocXIm*tmp17_+mCompCoord[8]*tmp18_*mLocYIm+mCompCoord[9]*tmp20_+mCompCoord[10]*tmp21_+mCompCoord[11]*mLocXIm*tmp19_+mCompCoord[12]*tmp18_*tmp17_+mCompCoord[13]*tmp20_*mLocYIm+mCompCoord[14]*tmp22_+mCompCoord[15]*VPow5(mLocYIm)+mCompCoord[16]*mLocXIm*tmp21_+mCompCoord[17]*tmp18_*tmp19_+mCompCoord[18]*tmp20_*tmp17_+mCompCoord[19]*tmp22_*mLocYIm+mCompCoord[20]*VPow5(mLocXIm));

}


void cEqAppui_X_C2MDPol5::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[42];
   double tmp1_ = mCompCoord[43];
   double tmp2_ = cos(tmp1_);
   double tmp3_ = sin(tmp0_);
   double tmp4_ = cos(tmp0_);
   double tmp5_ = sin(tmp1_);
   double tmp6_ = mCompCoord[44];
   double tmp7_ = mCompCoord[45];
   double tmp8_ = mLocXTer-tmp7_;
   double tmp9_ = sin(tmp6_);
   double tmp10_ = -(tmp9_);
   double tmp11_ = -(tmp5_);
   double tmp12_ = cos(tmp6_);
   double tmp13_ = mCompCoord[46];
   double tmp14_ = mLocYTer-tmp13_;
   double tmp15_ = mCompCoord[47];
   double tmp16_ = mLocZTer-tmp15_;
   double tmp17_ = ElSquare(mLocYIm);
   double tmp18_ = ElSquare(mLocXIm);
   double tmp19_ = VCube(mLocYIm);
   double tmp20_ = VCube(mLocXIm);
   double tmp21_ = VPow4(mLocYIm);
   double tmp22_ = VPow4(mLocXIm);
   double tmp23_ = VPow5(mLocYIm);
   double tmp24_ = VPow5(mLocXIm);
   double tmp25_ = -(1);
   double tmp26_ = tmp4_*tmp2_;
   double tmp27_ = -(tmp3_);
   double tmp28_ = tmp27_*tmp10_;
   double tmp29_ = tmp4_*tmp11_;
   double tmp30_ = tmp29_*tmp12_;
   double tmp31_ = tmp28_+tmp30_;
   double tmp32_ = (tmp31_)*(tmp8_);
   double tmp33_ = tmp4_*tmp10_;
   double tmp34_ = tmp3_*tmp11_;
   double tmp35_ = tmp34_*tmp12_;
   double tmp36_ = tmp33_+tmp35_;
   double tmp37_ = (tmp36_)*(tmp14_);
   double tmp38_ = tmp32_+tmp37_;
   double tmp39_ = tmp2_*tmp12_;
   double tmp40_ = tmp39_*(tmp16_);
   double tmp41_ = tmp38_+tmp40_;
   double tmp42_ = tmp26_*(tmp8_);
   double tmp43_ = tmp3_*tmp2_;
   double tmp44_ = tmp43_*(tmp14_);
   double tmp45_ = tmp42_+tmp44_;
   double tmp46_ = tmp5_*(tmp16_);
   double tmp47_ = tmp45_+tmp46_;
   double tmp48_ = tmp25_*tmp3_;
   double tmp49_ = tmp25_*tmp5_;
   double tmp50_ = -(tmp2_);
   double tmp51_ = ElSquare(tmp41_);
   double tmp52_ = -(tmp12_);
   double tmp53_ = tmp25_*tmp9_;

  mVal[0] = (tmp47_)/(tmp41_)-(mCompCoord[0]+mCompCoord[1]*mLocYIm+mCompCoord[2]*mLocXIm+mCompCoord[3]*tmp17_+mCompCoord[4]*mLocXIm*mLocYIm+mCompCoord[5]*tmp18_+mCompCoord[6]*tmp19_+mCompCoord[7]*mLocXIm*tmp17_+mCompCoord[8]*tmp18_*mLocYIm+mCompCoord[9]*tmp20_+mCompCoord[10]*tmp21_+mCompCoord[11]*mLocXIm*tmp19_+mCompCoord[12]*tmp18_*tmp17_+mCompCoord[13]*tmp20_*mLocYIm+mCompCoord[14]*tmp22_+mCompCoord[15]*tmp23_+mCompCoord[16]*mLocXIm*tmp21_+mCompCoord[17]*tmp18_*tmp19_+mCompCoord[18]*tmp20_*tmp17_+mCompCoord[19]*tmp22_*mLocYIm+mCompCoord[20]*tmp24_);

  mCompDer[0][0] = tmp25_;
  mCompDer[0][1] = -(mLocYIm);
  mCompDer[0][2] = -(mLocXIm);
  mCompDer[0][3] = -(tmp17_);
  mCompDer[0][4] = -(mLocXIm*mLocYIm);
  mCompDer[0][5] = -(tmp18_);
  mCompDer[0][6] = -(tmp19_);
  mCompDer[0][7] = -(mLocXIm*tmp17_);
  mCompDer[0][8] = -(tmp18_*mLocYIm);
  mCompDer[0][9] = -(tmp20_);
  mCompDer[0][10] = -(tmp21_);
  mCompDer[0][11] = -(mLocXIm*tmp19_);
  mCompDer[0][12] = -(tmp18_*tmp17_);
  mCompDer[0][13] = -(tmp20_*mLocYIm);
  mCompDer[0][14] = -(tmp22_);
  mCompDer[0][15] = -(tmp23_);
  mCompDer[0][16] = -(mLocXIm*tmp21_);
  mCompDer[0][17] = -(tmp18_*tmp19_);
  mCompDer[0][18] = -(tmp20_*tmp17_);
  mCompDer[0][19] = -(tmp22_*mLocYIm);
  mCompDer[0][20] = -(tmp24_);
  mCompDer[0][21] = 0;
  mCompDer[0][22] = 0;
  mCompDer[0][23] = 0;
  mCompDer[0][24] = 0;
  mCompDer[0][25] = 0;
  mCompDer[0][26] = 0;
  mCompDer[0][27] = 0;
  mCompDer[0][28] = 0;
  mCompDer[0][29] = 0;
  mCompDer[0][30] = 0;
  mCompDer[0][31] = 0;
  mCompDer[0][32] = 0;
  mCompDer[0][33] = 0;
  mCompDer[0][34] = 0;
  mCompDer[0][35] = 0;
  mCompDer[0][36] = 0;
  mCompDer[0][37] = 0;
  mCompDer[0][38] = 0;
  mCompDer[0][39] = 0;
  mCompDer[0][40] = 0;
  mCompDer[0][41] = 0;
  mCompDer[0][42] = ((tmp48_*tmp2_*(tmp8_)+tmp26_*(tmp14_))*(tmp41_)-(tmp47_)*((-(tmp4_)*tmp10_+tmp48_*tmp11_*tmp12_)*(tmp8_)+(tmp48_*tmp10_+tmp30_)*(tmp14_)))/tmp51_;
  mCompDer[0][43] = ((tmp49_*tmp4_*(tmp8_)+tmp49_*tmp3_*(tmp14_)+tmp2_*(tmp16_))*(tmp41_)-(tmp47_)*(tmp50_*tmp4_*tmp12_*(tmp8_)+tmp50_*tmp3_*tmp12_*(tmp14_)+tmp49_*tmp12_*(tmp16_)))/tmp51_;
  mCompDer[0][44] = -((tmp47_)*((tmp52_*tmp27_+tmp53_*tmp29_)*(tmp8_)+(tmp52_*tmp4_+tmp53_*tmp34_)*(tmp14_)+tmp53_*tmp2_*(tmp16_)))/tmp51_;
  mCompDer[0][45] = (tmp25_*tmp26_*(tmp41_)-(tmp47_)*tmp25_*(tmp31_))/tmp51_;
  mCompDer[0][46] = (tmp25_*tmp43_*(tmp41_)-(tmp47_)*tmp25_*(tmp36_))/tmp51_;
  mCompDer[0][47] = (tmp49_*(tmp41_)-(tmp47_)*tmp25_*tmp39_)/tmp51_;
}


void cEqAppui_X_C2MDPol5::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cEqAppui_X_C2MDPol5 Has no Der Sec");
}

void cEqAppui_X_C2MDPol5::SetXIm(double aVal){ mLocXIm = aVal;}
void cEqAppui_X_C2MDPol5::SetXTer(double aVal){ mLocXTer = aVal;}
void cEqAppui_X_C2MDPol5::SetYIm(double aVal){ mLocYIm = aVal;}
void cEqAppui_X_C2MDPol5::SetYTer(double aVal){ mLocYTer = aVal;}
void cEqAppui_X_C2MDPol5::SetZTer(double aVal){ mLocZTer = aVal;}



double * cEqAppui_X_C2MDPol5::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "XIm") return & mLocXIm;
   if (aName == "XTer") return & mLocXTer;
   if (aName == "YIm") return & mLocYIm;
   if (aName == "YTer") return & mLocYTer;
   if (aName == "ZTer") return & mLocZTer;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cEqAppui_X_C2MDPol5::mTheAuto("cEqAppui_X_C2MDPol5",cEqAppui_X_C2MDPol5::Alloc);


cElCompiledFonc *  cEqAppui_X_C2MDPol5::Alloc()
{  return new cEqAppui_X_C2MDPol5();
}


