// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cREgDistVal_DCBrown.h"


cREgDistVal_DCBrown::cREgDistVal_DCBrown():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("Intr",0,17));
   Close(false);
}



void cREgDistVal_DCBrown::ComputeVal()
{
   double tmp0_ = mLocRegDistValP1_y * mLocRegDistValP1_y;
   double tmp1_ = mLocRegDistValP1_x * mLocRegDistValP1_x;
   double tmp2_ = tmp1_ * tmp0_;
   double tmp3_ = mLocRegDistValP1_x * mLocRegDistValP1_y;
   double tmp4_ = tmp1_ * mLocRegDistValP1_y;
   double tmp5_ = mLocRegDistValP1_x * tmp0_;
   double tmp6_ = mCompCoord[15];
   double tmp7_ = mCompCoord[16];
   double tmp8_ = tmp1_ + tmp0_;

  mVal[0] = ((1 + mCompCoord[3]) * mLocRegDistValP1_x + mCompCoord[4] * mLocRegDistValP1_y + mCompCoord[5] * tmp3_ + mCompCoord[6] * tmp0_ + mCompCoord[7] * tmp4_ + mCompCoord[8] * tmp5_ + mCompCoord[9] * tmp2_ + tmp6_ * (mLocRegDistValP1_x / mLocDCBrown_State_0_0) * tmp2_ + tmp7_ * mLocRegDistValP1_x * (tmp8_)) - mLocRegDistKnownVal_x;

  mVal[1] = (mLocRegDistValP1_y + mCompCoord[10] * tmp3_ + mCompCoord[11] * tmp1_ + mCompCoord[12] * tmp4_ + mCompCoord[13] * tmp5_ + mCompCoord[14] * tmp2_ + tmp6_ * (mLocRegDistValP1_y / mLocDCBrown_State_0_0) * tmp2_ + tmp7_ * mLocRegDistValP1_y * (tmp8_)) - mLocRegDistKnownVal_y;

}


void cREgDistVal_DCBrown::ComputeValDeriv()
{
   double tmp0_ = mLocRegDistValP1_y * mLocRegDistValP1_y;
   double tmp1_ = mLocRegDistValP1_x * mLocRegDistValP1_x;
   double tmp2_ = tmp1_ * tmp0_;
   double tmp3_ = mLocRegDistValP1_x * mLocRegDistValP1_y;
   double tmp4_ = tmp1_ * mLocRegDistValP1_y;
   double tmp5_ = mLocRegDistValP1_x * tmp0_;
   double tmp6_ = mLocRegDistValP1_x / mLocDCBrown_State_0_0;
   double tmp7_ = tmp1_ + tmp0_;
   double tmp8_ = mCompCoord[15];
   double tmp9_ = mCompCoord[16];
   double tmp10_ = mLocRegDistValP1_y / mLocDCBrown_State_0_0;

  mVal[0] = ((1 + mCompCoord[3]) * mLocRegDistValP1_x + mCompCoord[4] * mLocRegDistValP1_y + mCompCoord[5] * tmp3_ + mCompCoord[6] * tmp0_ + mCompCoord[7] * tmp4_ + mCompCoord[8] * tmp5_ + mCompCoord[9] * tmp2_ + tmp8_ * (tmp6_) * tmp2_ + tmp9_ * mLocRegDistValP1_x * (tmp7_)) - mLocRegDistKnownVal_x;

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mCompDer[0][3] = mLocRegDistValP1_x;
  mCompDer[0][4] = mLocRegDistValP1_y;
  mCompDer[0][5] = tmp3_;
  mCompDer[0][6] = tmp0_;
  mCompDer[0][7] = tmp4_;
  mCompDer[0][8] = tmp5_;
  mCompDer[0][9] = tmp2_;
  mCompDer[0][10] = 0;
  mCompDer[0][11] = 0;
  mCompDer[0][12] = 0;
  mCompDer[0][13] = 0;
  mCompDer[0][14] = 0;
  mCompDer[0][15] = (tmp6_) * tmp2_;
  mCompDer[0][16] = mLocRegDistValP1_x * (tmp7_);
  mVal[1] = (mLocRegDistValP1_y + mCompCoord[10] * tmp3_ + mCompCoord[11] * tmp1_ + mCompCoord[12] * tmp4_ + mCompCoord[13] * tmp5_ + mCompCoord[14] * tmp2_ + tmp8_ * (tmp10_) * tmp2_ + tmp9_ * mLocRegDistValP1_y * (tmp7_)) - mLocRegDistKnownVal_y;

  mCompDer[1][0] = 0;
  mCompDer[1][1] = 0;
  mCompDer[1][2] = 0;
  mCompDer[1][3] = 0;
  mCompDer[1][4] = 0;
  mCompDer[1][5] = 0;
  mCompDer[1][6] = 0;
  mCompDer[1][7] = 0;
  mCompDer[1][8] = 0;
  mCompDer[1][9] = 0;
  mCompDer[1][10] = tmp3_;
  mCompDer[1][11] = tmp1_;
  mCompDer[1][12] = tmp4_;
  mCompDer[1][13] = tmp5_;
  mCompDer[1][14] = tmp2_;
  mCompDer[1][15] = (tmp10_) * tmp2_;
  mCompDer[1][16] = mLocRegDistValP1_y * (tmp7_);
}


void cREgDistVal_DCBrown::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cREgDistVal_DCBrown Has no Der Sec");
}

void cREgDistVal_DCBrown::SetDCBrown_State_0_0(double aVal){ mLocDCBrown_State_0_0 = aVal;}
void cREgDistVal_DCBrown::SetRegDistKnownVal_x(double aVal){ mLocRegDistKnownVal_x = aVal;}
void cREgDistVal_DCBrown::SetRegDistKnownVal_y(double aVal){ mLocRegDistKnownVal_y = aVal;}
void cREgDistVal_DCBrown::SetRegDistValP1_x(double aVal){ mLocRegDistValP1_x = aVal;}
void cREgDistVal_DCBrown::SetRegDistValP1_y(double aVal){ mLocRegDistValP1_y = aVal;}



double * cREgDistVal_DCBrown::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "DCBrown_State_0_0") return & mLocDCBrown_State_0_0;
   if (aName == "RegDistKnownVal_x") return & mLocRegDistKnownVal_x;
   if (aName == "RegDistKnownVal_y") return & mLocRegDistKnownVal_y;
   if (aName == "RegDistValP1_x") return & mLocRegDistValP1_x;
   if (aName == "RegDistValP1_y") return & mLocRegDistValP1_y;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cREgDistVal_DCBrown::mTheAuto("cREgDistVal_DCBrown",cREgDistVal_DCBrown::Alloc);


cElCompiledFonc *  cREgDistVal_DCBrown::Alloc()
{  return new cREgDistVal_DCBrown();
}


