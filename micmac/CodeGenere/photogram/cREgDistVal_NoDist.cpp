// File Automatically generated by eLiSe
#include "StdAfx.h"
#include "cREgDistVal_NoDist.h"


cREgDistVal_NoDist::cREgDistVal_NoDist():
    cElCompiledFonc(2)
{
   AddIntRef (cIncIntervale("Intr",0,3));
   Close(false);
}



void cREgDistVal_NoDist::ComputeVal()
{

  mVal[0] = mLocRegDistValP1_x - mLocRegDistKnownVal_x;

  mVal[1] = mLocRegDistValP1_y - mLocRegDistKnownVal_y;

}


void cREgDistVal_NoDist::ComputeValDeriv()
{

  mVal[0] = mLocRegDistValP1_x - mLocRegDistKnownVal_x;

  mCompDer[0][0] = 0;
  mCompDer[0][1] = 0;
  mCompDer[0][2] = 0;
  mVal[1] = mLocRegDistValP1_y - mLocRegDistKnownVal_y;

  mCompDer[1][0] = 0;
  mCompDer[1][1] = 0;
  mCompDer[1][2] = 0;
}


void cREgDistVal_NoDist::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cREgDistVal_NoDist Has no Der Sec");
}

void cREgDistVal_NoDist::SetRegDistKnownVal_x(double aVal){ mLocRegDistKnownVal_x = aVal;}
void cREgDistVal_NoDist::SetRegDistKnownVal_y(double aVal){ mLocRegDistKnownVal_y = aVal;}
void cREgDistVal_NoDist::SetRegDistValP1_x(double aVal){ mLocRegDistValP1_x = aVal;}
void cREgDistVal_NoDist::SetRegDistValP1_y(double aVal){ mLocRegDistValP1_y = aVal;}



double * cREgDistVal_NoDist::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "RegDistKnownVal_x") return & mLocRegDistKnownVal_x;
   if (aName == "RegDistKnownVal_y") return & mLocRegDistKnownVal_y;
   if (aName == "RegDistValP1_x") return & mLocRegDistValP1_x;
   if (aName == "RegDistValP1_y") return & mLocRegDistValP1_y;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cREgDistVal_NoDist::mTheAuto("cREgDistVal_NoDist",cREgDistVal_NoDist::Alloc);


cElCompiledFonc *  cREgDistVal_NoDist::Alloc()
{  return new cREgDistVal_NoDist();
}


