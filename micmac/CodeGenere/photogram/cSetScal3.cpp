// File Automatically generated by eLiSe

#include "general/all.h"
#include "private/all.h"
#include "cSetScal3.h"


cSetScal3::cSetScal3():
    cElCompiledFonc(1)
{
   AddIntRef (cIncIntervale("Pt1",0,3));
   AddIntRef (cIncIntervale("Pt2",3,6));
   Close(false);
}



void cSetScal3::ComputeVal()
{

  mVal[0] = -(mLocVar)+mCompCoord[0]*mCompCoord[3]+mCompCoord[1]*mCompCoord[4]+mCompCoord[2]*mCompCoord[5];

}


void cSetScal3::ComputeValDeriv()
{
   double tmp0_ = mCompCoord[3];
   double tmp1_ = mCompCoord[4];
   double tmp2_ = mCompCoord[5];
   double tmp3_ = mCompCoord[0];
   double tmp4_ = mCompCoord[1];
   double tmp5_ = mCompCoord[2];

  mVal[0] = -(mLocVar)+tmp3_*tmp0_+tmp4_*tmp1_+tmp5_*tmp2_;

  mCompDer[0][0] = tmp0_;
  mCompDer[0][1] = tmp1_;
  mCompDer[0][2] = tmp2_;
  mCompDer[0][3] = tmp3_;
  mCompDer[0][4] = tmp4_;
  mCompDer[0][5] = tmp5_;
}


void cSetScal3::ComputeValDerivHessian()
{
  ELISE_ASSERT(false,"Foncteur cSetScal3 Has no Der Sec");
}

void cSetScal3::SetVar(double aVal){ mLocVar = aVal;}



double * cSetScal3::AdrVarLocFromString(const std::string & aName)
{
   if (aName == "Var") return & mLocVar;
   return 0;
}


cElCompiledFonc::cAutoAddEntry cSetScal3::mTheAuto("cSetScal3",cSetScal3::Alloc);


cElCompiledFonc *  cSetScal3::Alloc()
{  return new cSetScal3();
}


