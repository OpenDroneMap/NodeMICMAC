
<GenCpp  Difndef="Define_NotRechNewPH">

<Verbatim File=".cpp">
#include "StdAfx.h"
#include "cParamNewRechPH.h"
</Verbatim>
<Verbatim File=".h.cpp">
// NOMORE ... 
</Verbatim>
<!--
    eTPR_Corner  = 2,
    eTPR_MaxLapl = 3,
    eTPR_MinLapl = 4,
    eTPR_NoLabel = 5
-->
   <enum Name="eTypePtRemark">
      <eTPR_LaplMax>      </eTPR_LaplMax>
      <eTPR_LaplMin>      </eTPR_LaplMin>

      <eTPR_GrayMax>      </eTPR_GrayMax>
      <eTPR_GrayMin>      </eTPR_GrayMin>

      <eTPR_BifurqMax>    </eTPR_BifurqMax>
      <eTPR_BifurqMin>    </eTPR_BifurqMin>

      <eTPR_NoLabel>  </eTPR_NoLabel>
      <!-- Apparement les sadl points sont peu fiables, en plus il
          semblent (???) couter cher en temps, donc on les met pas ,
          mais on laisse dans le code si on reprend + tard
      -->

      <eTPR_GraySadl>      </eTPR_GraySadl>
      <eTPR_BifurqSadl>    </eTPR_BifurqSadl>
   </enum>

   <!-- Sotcke les noms des differentes options de calcul d'invariants -->
   <enum Name="eTypeVecInvarR">
         <eTVIR_Curve>     </eTVIR_Curve>
         <eTVIR_ACR0>      </eTVIR_ACR0>  <!-- Auto correl radiom basiques -->
         <eTVIR_ACGT>      </eTVIR_ACGT>  <!-- Auto correl gradient tangentiel-->
         <eTVIR_ACGR>      </eTVIR_ACGR>  <!-- Auto correl gradient radial-->
         <eTVIR_NoLabel>   </eTVIR_NoLabel>  <!-- Auto correl gradient radial-->
   </enum>

<!--
         <CoeffRadiom   Nb="1" Type="std::vector<double>">           </CoeffRadiom>
         <CoeffRadiom2  Nb="1" Type="std::vector<double>">           </CoeffRadiom2>
         <CoeffGradRadial   Nb="1" Type="std::vector<double>">       </CoeffGradRadial>
         <CoeffGradTangent   Nb="1" Type="std::vector<double>">      </CoeffGradTangent>
         <CoeffGradTangentPiS2   Nb="1" Type="std::vector<double>">  </CoeffGradTangentPiS2>
         <CoeffGradTangentPi     Nb="1" Type="std::vector<double>">  </CoeffGradTangentPi>
         <CoeffGradCroise   Nb="1" Type="std::vector<double>">       </CoeffGradCroise>
         <CoeffGradCroise2  Nb="1" Type="std::vector<double>">       </CoeffGradCroise2>
         <CoeffDiffOpposePi   Nb="1" Type="std::vector<double>">     </CoeffDiffOpposePi>
         <CoeffDiffOppose2Pi  Nb="1" Type="std::vector<double>">     </CoeffDiffOppose2Pi>
         <CoeffDiffOpposePiS2   Nb="1" Type="std::vector<double>">   </CoeffDiffOpposePiS2>
         <CoeffDiffOppose2PiS2  Nb="1" Type="std::vector<double>">   </CoeffDiffOppose2PiS2>
-->
   <enum Name="eTypeInvRad">
      <eTIR_Radiom>          </eTIR_Radiom>    <!-- 1 -->
      <eTIR_GradRad>         </eTIR_GradRad>
      <eTIR_GradCroise>      </eTIR_GradCroise>
      <eTIR_GradTan>         </eTIR_GradTan>
      <eTIR_GradTanPiS2>     </eTIR_GradTanPiS2>
      <eTIR_GradTanPi>       </eTIR_GradTanPi>   
      <eTIR_LaplRad>         </eTIR_LaplRad>
      <eTIR_LaplTan>         </eTIR_LaplTan>
      <eTIR_LaplCrois>       </eTIR_LaplCrois>
      <eTIR_DiffOpposePi>    </eTIR_DiffOpposePi>
      <eTIR_DiffOpposePiS2>   </eTIR_DiffOpposePiS2>  <!-- 11 -->
      <!--         BEGIN SQUARE -->
      <eTIR_Sq_Radiom>        </eTIR_Sq_Radiom>   
      <eTIR_Sq_GradRad>       </eTIR_Sq_GradRad>
      <eTIR_Sq_GradCroise>    </eTIR_Sq_GradCroise>
      <eTIR_Sq_GradTan>       </eTIR_Sq_GradTan>
      <eTIR_Sq_GradTanPiS2>   </eTIR_Sq_GradTanPiS2>    <!-- 16 -->
      <eTIR_Sq_GradTanPi>     </eTIR_Sq_GradTanPi>
      <eTIR_Sq_LaplRad>       </eTIR_Sq_LaplRad>
      <eTIR_Sq_LaplTan>       </eTIR_Sq_LaplTan>
      <eTIR_Sq_LaplCrois>     </eTIR_Sq_LaplCrois>
      <eTIR_Sq_DiffOpposePi>    </eTIR_Sq_DiffOpposePi>
      <eTIR_Sq_DiffOpposePiS2>  </eTIR_Sq_DiffOpposePiS2>  <!-- 22 -->
      <!--         BEGIN CUBE -->
      <eTIR_Cub_Radiom>        </eTIR_Cub_Radiom>   
      <eTIR_Cub_GradRad>       </eTIR_Cub_GradRad>
      <eTIR_Cub_GradCroise>    </eTIR_Cub_GradCroise>
      <eTIR_Cub_GradTan>       </eTIR_Cub_GradTan>
      <eTIR_Cub_GradTanPiS2>   </eTIR_Cub_GradTanPiS2>    <!-- 16 -->
      <eTIR_Cub_GradTanPi>     </eTIR_Cub_GradTanPi>
      <eTIR_Cub_LaplRad>       </eTIR_Cub_LaplRad>
      <eTIR_Cub_LaplTan>       </eTIR_Cub_LaplTan>
      <eTIR_Cub_LaplCrois>     </eTIR_Cub_LaplCrois>
      <eTIR_Cub_DiffOpposePi>  </eTIR_Cub_DiffOpposePi>
      <eTIR_Cub_DiffOpposePiS2></eTIR_Cub_DiffOpposePiS2>  <!-- 22 -->

      <eTIR_NoLabel>     </eTIR_NoLabel>
   </enum>

   <PtSc  Nb="*" Class="true" ToReference="true">
       <Pt   Nb="1" Type="Pt2dr">     </Pt>
       <Scale   Nb="1" Type="double">  </Scale>
   </PtSc>

   <OneInvRad  Nb="1" Class="true" ToReference="true">
         <!-- y :  NumVect , x : Rho -->
         <ImRad Nb="1" Type="Im2D_INT1"> </ImRad>
         <!-- Code Binaire : devrait etre 1D, mais flemme modifier xml_init et autres ...  -->
         <CodeBinaire  Nb="1" Type="Im2D_U_INT2"> </CodeBinaire>
   </OneInvRad>

   <ProfilRad  Nb="1" Class="true" ToReference="true">
         <!-- y :  NumVect , x : Rho -->
         <ImProfil Nb="1" Type="Im2D_INT1"> </ImProfil>
         <!-- Code Binaire : devrait etre 1D, mais flemme modifier xml_init et autres ...  -->
   </ProfilRad>

   <!-- Les invariants rotationnels obtenu par auto-correlation -->
   <RotInvarAutoCor Nb="1" Class="true" ToReference="true">
         <IR0 Nb="1" Type="Im2D_INT1"> </IR0>
         <IGT Nb="1" Type="Im2D_INT1"> </IGT>
         <IGR Nb="1" Type="Im2D_INT1"> </IGR>
   </RotInvarAutoCor>


   <OnePCarac   Nb="1" Class="true" ToReference="true">
         <Kind Nb="1" Type="eTypePtRemark">        </Kind>
         <Pt   Nb="1" Type="Pt2dr">     </Pt>
         <Pt0   Nb="1" Type="Pt2dr">     </Pt0>  <!-- Avant opt, pour test -->
         <NivScale   Nb="1" Type="int">  </NivScale>
         <Scale   Nb="1" Type="double">  </Scale>
         <ScaleStab   Nb="1" Type="double">  </ScaleStab> <!-- 4 MinMax, highest scale where they are visible -->
         <ScaleNature   Nb="1" Type="double">  </ScaleNature> <!-- May be != from scale when scale was forced -->
         <DirMS   Nb="1" Type="Pt2dr">     </DirMS>
         <DirAC   Nb="1" Type="Pt2dr">     </DirAC>
         <Contraste   Nb="1" Type="double">  </Contraste>
         <ContrasteRel   Nb="1" Type="double">  </ContrasteRel> <!-- Par raport au seuil, pour inspection-->
         <AutoCorrel   Nb="1" Type="double">  </AutoCorrel>
         <OK   Nb="1" Type="bool">  </OK>  <!-- Help 4 compute, should always be true -->
     <!--   codage binaire -->
    <!-- Pour visu -->
         <InvR Nb="1" RefType="OneInvRad">  </InvR>
         <MoyLP   Nb="1" Type="double">  </MoyLP> <!-- Moyenne de l'image log pol-->
         <ImLogPol Nb="1" Type="Im2D_INT1"> </ImLogPol>
         <VectRho   Nb="1" Type="std::vector<double>">  </VectRho>
         <ProfR Nb="1" RefType="ProfilRad">  </ProfR>
         <RIAC  Nb="1" RefType="RotInvarAutoCor">  </RIAC>
         <Id   Nb="1" Type="int">  </Id>  <!-- Tuning -->
         <HeapInd   Nb="1" Type="int">  </HeapInd>  <!-- Tuning -->
         <Prio   Nb="1" Type="double">  </Prio>  <!-- Tuning -->
   </OnePCarac>

   <SetPCarac  Nb="1" Class="true">
      <OnePCarac  Nb="*" RefType="OnePCarac" Container="std::vector"> </OnePCarac>
   </SetPCarac>

   <SetRefPCarac Nb="1" Class="true">
         <SRPC_Truth Nb="*" Container="std::vector">
             <P1  Nb="1" RefType="OnePCarac"> </P1>
             <P2  Nb="1" RefType="OnePCarac"> </P2>
         </SRPC_Truth>
         <SRPC_Rand  Nb="*" RefType="OnePCarac" Container="std::vector"> </SRPC_Rand>
   </SetRefPCarac>

   <CBOneVect   Nb="1" Class="true" ToReference="true">
         <IndVec Nb="1" Type="int">     </IndVec> 
         <CBOneBit Nb="*" Container="std::vector"> 
            <Coeff  Nb="1" Type="std::vector<double>">  </Coeff> 
            <IndInV Nb="1" Type="std::vector<int>">     </IndInV> 
            <IndBit Nb="1" Type="int">     </IndBit> 
         </CBOneBit>
   </CBOneVect>

   <FullParamCB  Nb="1" Class="true">
        <CBOneVect  Nb="*" RefType="CBOneVect" Container="std::vector"> </CBOneVect>
   </FullParamCB>

   
   <CompCBOneBit Nb="1" Class="true" ToReference="true">
      <Coeff  Nb="1" Type="std::vector<double>">  </Coeff> 
      <IndX   Nb="1" Type="std::vector<int>">   </IndX> 
      <IndY   Nb="1" Type="std::vector<int>">   </IndY> 
      <IndBit Nb="1" Type="int">     </IndBit> 
   </CompCBOneBit>

   <CompCB Nb="1" Class="true" ToReference="true">
       <BitThresh Nb="1" Type="int"> </BitThresh>
       <CompCBOneBit  Nb="*" RefType="CompCBOneBit" Container="std::vector"> </CompCBOneBit>
   </CompCB>

   
   <FitsOneBin Nb="1" Class="true" ToReference="true">
       <PrefName Nb="1" Type="std::string">     </PrefName> 
       <PostName Nb="?" Type="std::string" Def="_Local.xml">     </PostName> 
       <CCB Nb="?" RefType="CompCB">            </CCB>
   </FitsOneBin>

   <FitsOneLabel Nb="1" Class="true" ToReference="true">
       <KindOf Nb="1" Type="eTypePtRemark">     </KindOf> 
       <BinIndexed Nb="1" RefType="FitsOneBin">  </BinIndexed>  <!-- Quick one, for indexation -->
       <BinDecisionShort Nb="1" RefType="FitsOneBin"> </BinDecisionShort>  <!-- Quick with lowe error -->
       <BinDecisionLong  Nb="1" RefType="FitsOneBin"> </BinDecisionLong>  <!-- Long with low error -->
   </FitsOneLabel>

   <SeuilFitsParam  Nb="1" Class="true" ToReference="true">
          <SeuilCorrDR Nb="?" Type="double" Def="0.7"> </SeuilCorrDR>  <!--  Seuil corr sur inv rad -->
          <SeuilInc    Nb="?" Type="double" Def="0.01"> </SeuilInc>    <!-- Seuil Inco entre les div estim de shift -->
          <SeuilCorrLP Nb="?" Type="double" Def="0.93"> </SeuilCorrLP> <!-- Seuil correl Log Polar-->
          <ExposantPdsDistGrad Nb="?" Type="double" Def="0.5"> </ExposantPdsDistGrad> <!-- Seuil correl Log Polar-->
          <SeuilDistGrad Nb="?" Type="double" Def="0.5"> </SeuilDistGrad> <!-- Seuil correl Log Polar-->
          <SeuilCorrelRatio12 Nb="?" Type="double" Def="0.6"> </SeuilCorrelRatio12>
          <SeuilGradRatio12 Nb="?" Type="double" Def="0.6">   </SeuilGradRatio12>
   </SeuilFitsParam>
   
   
   <FitsParam Nb="1" Class="true" ToReference="true">
       <DefInit  Nb="1" RefType="FitsOneLabel"> </DefInit>  <!-- 0 ou 1, sera complete autom -->
       <GenLabs  Nb="*" RefType="FitsOneLabel"> </GenLabs>  <!-- 0 ou 1, sera complete autom -->
       <SeuilOL Nb="1" RefType="SeuilFitsParam">  </SeuilOL>
       <SeuilGen Nb="1" RefType="SeuilFitsParam"> </SeuilGen>
   </FitsParam>

<!--
mm3d Malt GeomImage "Soldat-Hue-IMGP703[0-2].JPG" AllRel Master=Soldat-Hue-IMGP7031.JPG ZoomF=4
mm3d PHom_RenameRef 6 Soldat-Hue-IMGP7031.JPG
-->

   <XmlAimeParamApprentissage Nb="1" Class="true" ToReference="true">
       <AbsDir Nb="1" Type="std::string"> </AbsDir>  <!-- pour connaitre le nom absolu a passer aux sous prog-->
       <DefDoIt Nb="?" Type="bool" Def="true"> </DefDoIt>
       <DefDoMatch Nb="?" Type="bool" Def="true"> </DefDoMatch>
       <DefDoPtCar Nb="?" Type="bool" Def="true"> </DefDoPtCar>
       <DefDoRef   Nb="?" Type="bool" Def="true"> </DefDoRef>
       <DefDoApprComb   Nb="?" Type="bool" Def="true"> </DefDoApprComb>
       <DefDoApprLocal1   Nb="?" Type="bool" Def="true"> </DefDoApprLocal1>
       <DefDoApprLocal2   Nb="?" Type="bool" Def="true"> </DefDoApprLocal2>
       <DefParamPtCar Nb="?" Type="std::string" Def=""> </DefParamPtCar>

       <XlmAimeOneDir Nb="*">
            <DoIt Nb="?" Type="bool"> </DoIt>
            <DoMatch Nb="?" Type="bool"> </DoMatch>
            <DoPtCar Nb="?" Type="bool"> </DoPtCar>
            <DoRef   Nb="?" Type="bool"> </DoRef>
            <ZoomF Nb="?" Type="int" Def="4"> </ZoomF>
            <NumMatch Nb="?" Type="int"> </NumMatch>

            <Dir Nb="1" Type="std::string"> </Dir>
            <Ori Nb="1" Type="std::string"> </Ori>

            <XAPA_OneMatch Nb="*">
                <Master Nb="1" Type="std::string">        </Master>
                <!-- Pattern pour le match dense, plutot des B/H faibles -->
                <Pattern Nb="1" Type="std::string">       </Pattern> 
                <!-- Pattern pour les appariements de points caracteristiques -->
                <PatternRef Nb="1" Type="std::string">    </PatternRef>
            </XAPA_OneMatch>

            <!-- Ceux sur lesquel il faut lancer le calcul de pts car TestNewRechPH, union des pattern ...-->
            <XAPA_PtCar Nb="1">
                <Pattern  Nb="1" Type="std::string" AccessorFils="false"> </Pattern>
            </XAPA_PtCar>
       </XlmAimeOneDir>

       <XlmAimeApprent Nb="1">
             <NbExEt0 Nb="1" Type="int">       </NbExEt0>
             <NbExEt1 Nb="1" Type="int">       </NbExEt1>
             <TimeOut Nb="?" Type="double" Def="300.0">       </TimeOut>
             <XlmAimeOneApprent  Nb="*">
                  <PdsW Nb="1" Type="double">  </PdsW>
                  <NbBB Nb="1" Type="int">     </NbBB>
                  <BitM Nb="?" Type="int">     </BitM>
             </XlmAimeOneApprent>
       </XlmAimeApprent>

   </XmlAimeParamApprentissage>


<Verbatim File=".h.cpp">
// };
</Verbatim>

</GenCpp>
