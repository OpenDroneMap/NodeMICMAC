#ifndef _ELISE_GENERAL_H_HOUGH_H
#define _ELISE_GENERAL_H_HOUGH_H


//////////////////////////////////////////////////////////////////////

class H_Hough
{
    public:

      H_Hough(  REAL     pas_rho=1,
                REAL     pas_teta=1,
                INT      nb_min = 20,
                REAL     debut_teta=0,
                REAL     fin_teta = 180
             );

      H_Hough(  Im2D_U_INT1 contour,
                Output      w,
                INT         color,
                REAL        pas_rho=1,
                REAL        pas_teta=1,
                INT         nb_min = 20,
                REAL        debut_teta=0,
                REAL        fin_teta = 180
             );

      H_Hough(  Im2D_U_INT1 image,
                REAL        deriche,
                REAL        hyst_bas,
                REAL        hyst_haut,
                Output      w,
                INT         color,
                REAL        pas_rho=1,
                REAL        pas_teta=1,
                INT         nb_min = 20,
                REAL        debut_teta=0,
                REAL        fin_teta = 180
             );

      void accumuler(Im2D_U_INT1 contour, bool cont = true);

      Im2D_REAL8 accumulator();
      ElList<Pt2di> max_loc(INT nb_max = 3);
      ElList<Pt2di> max_loc_p();
      ElList<Pt2di > droites();
      void tracer(Output W,  INT color = 7);
      void tracer(Output W, Pt2di p, INT color = 7);
      void tracer(Output W, ElList<Pt2di> l, INT color = 7);
      void tracer(Im2D_U_INT1 im);
      INT  nb_droite();

   private:

     Im2D_REAL8    _accumulator;
     Im2D_INT4     _accumulator_im;
     Im2D_U_INT1   _contour;
     Im1D_REAL8    _teta;
     Im1D_REAL8    _s_teta;
     Im1D_REAL8    _c_teta;
     Im1D_REAL8    _moderator;
     REAL8**       _accumulator_data;
     INT4**        _accumulator_im_data;
     U_INT1**      _contour_data;
     REAL8*        _teta_data;
     REAL8*        _s_teta_data;
     REAL8*        _c_teta_data;
     REAL8*        _moderator_data;
 
     ElList<Pt2di> _l;
     REAL          _pas_r;
     REAL          _pas_t;
     REAL          _debut_teta;
     REAL          _fin_teta;
     REAL          _intervale_teta;
     REAL          _merge_teta;
     INT           _tr;
     INT           _tt;
     INT           _semi_tr;
     INT           _tx;
     INT           _ty;
     INT           _nb_min;
     Pt2di         _centre;
     INT           _nb_droite;
     ElList<Pt2di> _l_droite;

     void accumuler(Pt2di p);
     void accumuler_im(Pt2di p);
     void desaccumuler(Pt2di p);
     void conversion(Pt2di p);

};


//////////////////////////////////////////////////////////////////////

class H_Hough_3D
{
    public:

      H_Hough_3D(
                   REAL     pas_rho    = 1, 
                   REAL     pas_teta   = 1, 
                   REAL     pas_phi    = 1, 
                   INT      nb_min     = 20, 
                   REAL     debut_teta = 0, 
                   REAL     fin_teta   = 180,
                   REAL     debut_phi  = 0, 
                   REAL     fin_phi    = 180
                );

      H_Hough_3D(
                   Im3D_U_INT1 entrer,
                   Boite    sortir,
                   REAL     pas_rho    = 1, 
                   REAL     pas_teta   = 1, 
                   REAL     pas_phi    = 1, 
                   INT      nb_min     = 20, 
                   REAL     debut_teta = 0, 
                   REAL     fin_teta   = 180,
                   REAL     debut_phi  = 0, 
                   REAL     fin_phi    = 180
             );

      void accumuler(Im3D_U_INT1 entrer);
      void accumuler(Liste_Pts_REAL nuage);

      Im3D_REAL8 accumulator();
      ElList<Pt3di> max_loc();
      void tracer(Boite& sortir);
      void tracer(Boite& sortir, Pt3di p, INT color = 1);
      void tracer(Boite& sortir, ElList<Pt3di> l);
      ElList<Hplan> plans();

   private:

     Im3D_REAL8    _accumulator;
     Im3D_INT4     _accumulator_im;
     Im1D_REAL8    _teta;
     Im1D_REAL8    _phi;
     Im2D_REAL8    _c_phi_s_teta;
     Im2D_REAL8    _c_phi_c_teta;
     Im1D_REAL8    _s_phi;
     Im2D_REAL8    _moderator;
     U_INT1***     _entrer;
     REAL8***      _accumulator_data;
     INT4***       _accumulator_im_data;
     REAL8*        _teta_data;
     REAL8*        _phi_data;
     REAL8**       _c_phi_s_teta_data;
     REAL8**       _c_phi_c_teta_data;
     REAL8*        _s_phi_data;
     REAL8**       _moderator_data;

     ElList<Pt3di> _l;
     ElList<Hplan> _lplan;
     REAL          _pas_r;
     REAL          _pas_t;
     REAL          _pas_p;

     REAL          _debut_teta;
     REAL          _fin_teta;
     REAL          _intervale_teta;
     REAL          _merge_teta;

     REAL          _debut_phi;
     REAL          _fin_phi;
     REAL          _intervale_phi;
     REAL          _merge_phi;

     INT           _tr;
     INT           _tt;
     INT           _tp;
     INT           _semi_tr;
     INT           _semi_tp;
     INT           _tx;
     INT           _ty;
     INT           _tz;
     INT           _nb_min;
     Pt3di         _centre;

     void accumuler(Pt3di p);
     void accumuler_im(Pt3di p);
     void accumuler_nuage(Pt3dr p);
     void desaccumuler(Pt3di p);

};






#endif //_ELISE_GENERAL_H_HOUGH_H
